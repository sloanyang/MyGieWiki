<?xml version="1.0" encoding="utf-8" ?>
<tiddlers>
<tiddler title="PageProperties" viewTemplate="ViewTemplate" tags="excludeLists">
	<pre>&lt;script&gt;return config.PageProperties.init();&lt;/script&gt;
|&gt;|&gt;|Title&lt;br&gt;&lt;&lt;input text title 95&gt;&gt;|
|&gt;|&gt;|Subtitle&lt;br&gt;&lt;&lt;input text subtitle 95&gt;&gt;|
|Owner&lt;br&gt;&lt;&lt;input text owner 35&gt;&gt;|Group(s) &lt;&lt;defineGroup&gt;&gt;&lt;br&gt;&lt;&lt;input text groups 30&gt;&gt;|Locked&lt;br&gt;&lt;&lt;input checkbox locked false&gt;&gt;|
|&gt;|&gt;|''Access permissions''|
|Group&lt;br&gt;&lt;&lt;input select group javascript:config.accessTypes&gt;&gt;|Authenticated&lt;br&gt;&lt;&lt;input select authenticated javascript:config.accessTypes &gt;&gt;|Anonymous&lt;br&gt;&lt;&lt;input select anonymous &quot;javascript:config.accessTypes&quot;&gt;&gt;|
|&gt;|&gt;|''Use optional features'' (help: [[Template|PageTemplateHelp]], [[Tiddler libraries|LibraryUsageHelp]], [[External scripts|ExtScriptHelp]])|
|Template&lt;br&gt;&lt;&lt;input select template javascript:availableTemplates() &gt;&gt; - &lt;&lt;button &quot;!config.PageProperties.isTemplate()&quot; &quot;examine it&quot; &quot;Examine the template&quot; &quot;/__templates/&quot; &quot;externalLink&quot; &quot;ExamineTemplate&quot;&gt;&gt;&lt;br&gt;&lt;script if=&quot;config.PageProperties.TemplateUpgrade()&quot; label=&quot;Try upgrade to current version&quot;&gt; config.PageProperties.UpgradeTemplate();&lt;/script&gt;|Tiddler libraries:&lt;br&gt;&lt;script label=&quot;static&quot; title=&quot;Statically installed files&quot;&gt;config.PageProperties.openLibrary('static');&lt;/script&gt; &lt;script label=&quot;local&quot; title=&quot;Local pages that are tagged library&quot;&gt;config.PageProperties.openLibrary('local');&lt;/script&gt; &lt;script label=&quot;file&quot; title=&quot;Files on your machine&quot;&gt;config.PageProperties.promptForUpload();&lt;/script&gt; &lt;script label=&quot;uploads&quot; title=&quot;Uploaded files&quot;&gt;config.PageProperties.openLibrary('uploads');&lt;/script&gt; &lt;script label=&quot;giewiki&quot; title=&quot;http://giewiki.appspot.com/lib/plugins/&quot;&gt;config.PageProperties.openLibrary('http://giewiki.appspot.com/lib/plugins/?xsl=');&lt;/script&gt; &lt;script label=&quot;other..&quot;&gt;config.PageProperties.openLibrary('other');&lt;/script&gt;|&lt;script label=&quot;External scripts&quot;&gt;config.PageProperties.listScripts(place)&lt;/script&gt;&lt;br&gt;&lt;script&gt;return config.PageProperties.usedScripts();&lt;/script&gt;|
|&gt;|&gt;|&lt;&lt;importTiddlerStatus forms.PageProperties.systeminclude libraryImport&gt;&gt;|
|&gt;|&gt;|&lt;html&gt;  &lt;span id='libraryCatalog' /&gt;  &lt;/html&gt;|
|&gt;|&gt;|&lt;html&gt;  &lt;span id='libraryImport' /&gt;  &lt;/html&gt;|
|&gt;|Page tags&lt;br&gt;&lt;&lt;input text tags 74&gt;&gt;&lt;br&gt;-type tags separated by spaces or apply special tags:&lt;br&gt;&lt;script label=&quot;hidden&quot; title=&quot;Hide from SiteMap&quot;&gt;config.PageProperties.addTag('hidden')&lt;/script&gt; - &lt;script label=&quot;library&quot; title=&quot;Make content available via Tiddler library 'local'&quot;&gt;config.PageProperties.addTag('library')&lt;/script&gt; - &lt;script label=&quot;template&quot; title=&quot;Make page available as a template&quot;&gt;config.PageProperties.addTag('template')&lt;/script&gt; ( + &lt;script label=&quot;version&quot; title=&quot;See help: Template above&quot;&gt;config.PageProperties.addTag('version')&lt;/script&gt;, &lt;script label=&quot;include&quot; title=&quot;See help: Template above&quot;&gt;config.PageProperties.addTag('include')&lt;/script&gt;)|Read-only options&lt;br&gt;&lt;&lt;input checkbox viewprior true&gt;&gt;Prior versions&lt;br&gt;&lt;&lt;input checkbox viewbutton true&gt;&gt;&quot;view&quot; button   &lt;hr&gt;&lt;&lt;input checkbox foldindex false&gt;&gt;Fold-out index|
|&gt;|&gt;|Predefined tiddler tags&lt;br&gt;&lt;&lt;input text tiddlertags 95&gt;&gt;|
&lt;&lt;submitButton forms.PageProperties.updateaccess 'Save' 'Save your changes' config.PageProperties.save() explanation 'Only the owner can alter page properties'&gt;&gt; | &lt;&lt;submitButton config.PageProperties.DeleteAccess() 'Delete page' 'Delete this page and its contents' config.PageProperties.promptToDeletePage()&gt;&gt;
&lt;script&gt;return config.PageProperties.activated();&lt;/script&gt;
	</pre>
</tiddler>
<tiddler title="PagePropertiesScript" modifier="giewiki" viewTemplate="ViewTemplate" tags="systemConfig excludeLists excludeSearch">
<pre>//{{{
config.PageProperties = {
	init: function () {
		config.accessTypes = &quot;admin|all|edit|add|tag|comment|view|none|&quot;;
		if (!forms.PageProperties)
			forms.PageProperties = http.pageProperties();
		forms.PageProperties.template_changed = function(f,id,val) {
			if (f)
				f[id] = val;
			var btn = document.getElementById('ExamineTemplate');
			if (btn)
				btn.setAttribute('href','/_templates/' + encodeURIComponent(val));
		};
		if (config.isLoggedIn()) {
			if (typeof forms.PageProperties.scripts === &quot;string&quot;)
				forms.PageProperties.scripts = forms.PageProperties.scripts.split('|');
			var scripts = forms.PageProperties.scripts;
			for (var i = 0; i &lt; scripts.length; i++)
				forms.PageProperties[scripts[i]] = true;
		}
		else {
			forms.PageProperties.scripts = [];
			return &quot;''[As you are not logged in, this dialog is not functional]''&quot;;
		}
	},
	isTemplate: function() {
		return window.location.pathname.startsWith('/_templates/');
	},
	DeleteAccess: function() {
		return window.location.pathname.length &gt; 1 &amp;&amp; forms.PageProperties.updateaccess;
	},
	listScripts: function(place) {
		var tg = place;
		var scrlr = http.listScripts();
		var desHandler = function(e) {
			var ev = e || window.event;
			var cbc = resolveTarget(ev);
			var text = cbc.nextSibling.nodeValue;
			forms.PageProperties[text] = cbc.checked;
		};
		var selHandler = function(e) {
			var ev = e || window.event;
			var text = resolveTarget(ev).firstChild.nodeValue;
			var bre = document.createElement('br');
			insertAfter(tg,bre);
			var cb = document.createElement(&quot;input&quot;);
			cb.setAttribute(&quot;type&quot;, &quot;checkbox&quot;);
			cb.checked = true;
			cb.onclick = desHandler;
			insertAfter(bre,cb);
			insertAfter(cb,document.createTextNode(text));
			forms.PageProperties.scripts.push(text);
			forms.PageProperties[text] = true;
		};
		if (scrlr.success) {
			var popup = Popup.create(tg);
			var values = scrlr.list.split('|');
			for (var i = 0; i &lt; values.length; i++)
				createTiddlyButton(createTiddlyElement(popup, &quot;li&quot;), values[i], null, selHandler);
			Popup.show();
		}
	},
	usedScripts: function() {
		var scripts = forms.PageProperties.scripts;
		var arr = [];
		for (var i = 0; i &lt; scripts.length; i++)
			if (scripts[i])
				arr.push( '&lt;&lt;input checkbox ' + scripts[i] + ' true&gt;&gt;' + scripts[i]);
		return arr.length &gt; 0 ? arr.join('&lt;br&gt;') : &quot;(none)&quot;;
	},
	tryingUpgrade: function() {
		return window.location.search == &quot;?upgradeTemplate=try&quot;;
	},
	activated: function () {
		if (!config.isLoggedIn()) {
			forms.PageProperties.controls['title'].setAttribute(&quot;readOnly&quot;, &quot;readOnly&quot;);
			forms.PageProperties.controls['subtitle'].setAttribute(&quot;readOnly&quot;, &quot;readOnly&quot;);
		}
		forms.PageProperties.template_changed(null,null,forms.PageProperties.template);
		if (forms.PageProperties.message)
			displayMessage(forms.PageProperties.message);
		if (!forms.PageProperties || !forms.PageProperties.owner)
			return;
		forms.PageProperties.controls['title'].focus();
		if (!forms.PageProperties.template_info.current &amp;&amp; config.PageProperties.tryingUpgrade()) {
			displayMessage(&quot;Save PageProperties to switch this version of the template&quot;);
			forms.PageProperties.upgradeTemplate = true;
		}
	},
	addTag: function (tag) {
		var tl = forms.PageProperties.tags.readBracketedList();
		if (tl.indexOf(tag) &lt; 0)
			tl.push(tag)
		else if (tag == 'template') {
			if (window.confirm(&quot;Update template?&quot;)) {
				if (http.updateTemplate({ 'tags': forms.PageProperties.tags }).success)
					displayMessage(&quot;Template updated&quot;);
			}
			return;
		}
		setFormFieldValue(forms.PageProperties, 'tags', tl.join(' '))
	}
};
//}}}
// See also [[PagePropertiesScript2]]
</pre>
</tiddler>
<tiddler title="PagePropertiesScript2" modifier="giewiki" viewTemplate="ViewTemplate" tags="systemConfig excludeLists excludeSearch">
<pre>//{{{
	
config.PageProperties.save = function () {
	if (!forms.PageProperties || !forms.PageProperties.owner)
		return displayMessage(&quot;You are not logged in&quot;);
	if (!forms.PageProperties.title)
		return displayMessage(&quot;You need to set the Title&quot;);
	var scripts = forms.PageProperties.scripts;
	var news = [];
	for (var i = 0; i &lt; scripts.length; i++)
		if (forms.PageProperties[scripts[i]])
			news.push(scripts[i]);
	forms.PageProperties.scripts = news.join('|');

	var resp = http.pageProperties(forms.PageProperties);
	if (resp.success &amp;&amp; config.macros.importTiddlers.importSelected(null, story.getTiddler('PageProperties'))) {
		if (config.PageProperties.tryingUpgrade())
			window.location.search = &quot;&quot;;
		else {
			if (window.location.hash == "#Welcome")
				window.location.hash = "#";
			window.location.reload();
		}
	}
};

config.PageProperties.listLibrary = function (url, lines) {
	var liblistId = 'libList' + url;
	var ee = document.getElementById(liblistId);
	if (ee)
		ee.parentNode.removeChild(ee);
		
	var output = [['Library: &lt;html&gt;&lt;span id=&quot;', liblistId, '&quot;&gt;', url, '&lt;/span&gt;&lt;/html&gt; has:'].join('')];
	var urlParts = url.split('/');
	var qry = urlParts[urlParts.length-1];
	if (!qry.startsWith('?'))
		qry = '';
	for (var al = lines.shift(); al; al = lines.shift()) {
		if (urlParts.length &gt; 1) {
			var ups = urlParts.slice(0, 3).join('/') + al + qry;
			al = al.split('/').pop();
		}
		else
			var ups = al;
		output.push(['&lt;script label=&quot;', al, '&quot;&gt;importFromDialog(&quot;', url, '&quot;,&quot;', ups, '&quot;);&lt;/script&gt;'].join(''));
	}
	if (output.length == 1)
		output.push('(none)');
	var delc = document.getElementById('libraryCatalog');
	if (delc.firstChild &amp;&amp; delc.firstChild.nodeValue)
		createTiddlyElement(delc, 'br');
	wikify(output.join('&lt;br&gt; '), delc);
};

config.PageProperties.openLibrary = function (url) {
	if (url == 'other') {
		var opts = config.options.txtExternalLibrary;
		if (!opts)
			config.PageProperties.externalLibrary = opts = window.prompt(&quot;URL of tiddlers to use&quot;, config.PageProperties.externalLibrary);
		if (!opts)
			return;
		var urls = opts.split(' ');
		this.listLibrary(url, urls);
	}
	else {
		var ld = http.openLibrary({ library: url });
		if (ld) {
			if (ld.text != null)
				this.listLibrary(url, ld.text.split('\n'));
			else
				this.listLibrary(url, ld.pages);
		}
	}
};

config.PageProperties.promptForUpload = function() {
	var delc = document.getElementById('libraryCatalog');
	createUploadFrame(delc,'tiddlers','upoadTiddlerFrame', 28, '/static/UploadDialog.htm');
};

config.PageProperties.promptToDeletePage = function() {
	if (!confirm(&quot;Do you really want to delete this page?&quot;)) return;
	if (http.deletePage(window.location.href).success) {
		story.closeAllTiddlers();
		story.displayTiddler(null, &quot;SiteMap&quot;);
		displayMessage(&quot;This page has now been deleted&quot;);
	}
};

config.PageProperties.TemplateUpgrade = function() {
	var ti = forms.PageProperties.template_info;
	return ti ? (forms.PageProperties.template_info.page &amp;&amp; !forms.PageProperties.template_info.current) : false;
};

config.PageProperties.UpgradeTemplate = function() {
	if (window.confirm(&quot;This requires reloading the page (you will lose unsaved changes) - proceed?&quot;)) {
		window.location.hash = &quot;PageSetup&quot;;
		window.location.search = &quot;upgradeTemplate=try&quot;;
	}
};

//}}}
</pre>
</tiddler>
<tiddler title="importTiddlers" modifier="giewiki" viewTemplate="ViewTemplate" tags="systemConfig excludeLists excludeSearch"><pre>//{{{
config.macros.importTiddlers = {
	sortf: function(a,b) {
		a = a.title.toUpperCase();
		b = b.title.toUpperCase();
		if (a &lt; b) return -1;
		if (a &gt; b) return 1;
		return 0;
	},
	handler: function (place, macroName, params, wikifier, paramString) {
		if (params.length == 0)
			wikify(&quot;The importTiddlers macro lets you easily import from ~TiddlyWiki or giewiki documents on the web or on this web site. Usage:&lt;br&gt;    {{{&lt;&lt;importTiddlers URL&gt;&gt;}}}&lt;br&gt;substituting URL with the web address or filename of the library you want to use. Edit this tiddler to insert the parameter&quot;
				+ config.macros.importTiddlers.menu(), place);
		else {
			var aurl = params.shift();
			var filt = params.shift();
			if (filt == 'all') {
				return wikify('all', place);
			}
			if (filt == 'tagged')
				var afilter = params.join(' ');
			else if (filt == 'tiddlers' &amp;&amp; params.length)
				var tiddlers = params.length == 1 ? params[0].split('||') : params;
			config.macros.importTiddlers.renderTL(place,aurl,afilter,tiddlers);
		}
	},
	renderTL: function(place,aurl,afilter,tiddlers,remote) {
		var workMessage = &quot;Getting &lt;br&gt;&quot; + aurl + &quot;&lt;/br&gt;&quot;;
		displayMessage(workMessage);
		var custumUse = story.findContainingTiddler(place).getAttribute('id') != 'tiddlerPageProperties';
		var rqa = { url: aurl, filter: afilter || '' };
		if (remote)
			rqa.source = 'remote';
		var libs = http.tiddlersFromUrl(rqa).sort(config.macros.importTiddlers.sortf);
		clearMessage(workMessage);
		var nCurrent = 0;
		var nExcluded = 0;
		if (libs) {
			this.aurl = aurl;
			this.tims = this.tims || {};
			this.tims[aurl] = {};
			this.libs = libs;
			var wd = createTiddlyElement(place, &quot;div&quot;, &quot;wrdiv:&quot; + aurl);
			var hta = ['&lt;input name=&quot;url&quot; type=&quot;hidden&quot; id=&quot;', aurl, '&quot;/&gt;&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;'];
			var links = [];
			for (var t = 0; t &lt; libs.length; t++) {
				var lt = libs[t];

				if (tiddlers &amp;&amp; tiddlers.indexOf(lt.title) == -1 || lt.title == &quot;_MetaData&quot;)
					continue;
				if (lt.current) { var checked = 'checked=&quot;1&quot;'; nCurrent++; }
				else { var checked = ''; nExcluded++; }
				var ltav = t;
				var line = ['&lt;tr class=&quot;', t % 2 ? 'evenRow' : 'oddRow', '&quot;&gt;&lt;td&gt;&lt;input type=&quot;checkbox&quot; id=&quot;cht', ltav, '&quot; ', checked, ' name=&quot;', ltav, '&quot; value=&quot;1&quot; /&gt;&lt;a href=&quot;javascript:;&quot; id=&quot;itl', ltav, '&quot; title=&quot;', aurl, '&quot;&gt;', lt.title.htmlEncode(), '&lt;/a&gt;&lt;/td&gt;&lt;td&gt;', lt.tags, '&lt;/td&gt;&lt;/tr&gt;'].join('');
				links[t] = 'itl' + ltav;
				hta.push(line);
			}
			if (nCurrent + nExcluded &gt; 1)
				hta.push(['&lt;tr class=&quot;', t % 2 ? 'evenRow' : 'oddRow', '&quot;&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;checkbox&quot; id=&quot;chkAll', aurl, '&quot; name=chkAll&quot; value=&quot;1&quot; /&gt;', &quot;Select all the above&quot;, '&lt;/td&gt;&lt;/tr&gt;'].join(''));
			if (custumUse)
				hta.push('&lt;/tbody&gt;&lt;/table&gt;&lt;a href=&quot;javascript:;&quot; id=&quot;cmdImport&quot;&gt;import (permanently)&lt;/a&gt; or &lt;a href=&quot;/&quot; id=&quot;cmdInclude&quot; target=&quot;_blank&quot;&gt;include (once, via query string)&lt;/a&gt;.');
			if (afilter)
				afilter = &quot; tagged &quot; + afilter;
			var resmsg = ['&lt;a href=&quot;', aurl, '&quot;&gt;', aurl, &quot;&lt;/a&gt; contains &quot;, libs.length, &quot; tiddlers.&quot;, afilter];
			if (tiddlers &amp;&amp; nCurrent &lt; libs.length)
				resmsg.push(&quot;Currently &quot;, nCurrent &gt; 0 ? nCurrent : &quot;none&quot;, &quot; are included.&quot;);
			if (tiddlers &amp;&amp; libs.length &gt; nCurrent + nExcluded)
				resmsg.push(' &lt;a href=&quot;javascript:;&quot; id=&quot;sea', aurl, '&quot;&gt; Show all&lt;/a&gt;');
			else if (aurl.startsWith('http:'))
				resmsg.push(' &lt;a href=&quot;javascript:;&quot; id=&quot;rqs', aurl, '&quot; title=&quot;Update your copy of this file&quot;&gt; Refresh cache&lt;/a&gt;');
			wd.innerHTML = resmsg.join('') + hta.join('');
			if (nCurrent + nExcluded &gt; 1)
				document.getElementById('chkAll' + aurl).onchange = function (ev) {
					var cke = resolveTarget(ev || window.event);
					var tbe = cke.parentNode.parentNode.parentNode;
					for (var tre = tbe.firstChild; tre; tre = tre.nextSibling) {
						var cksn = tre.firstChild.firstChild;
						cksn.checked = cke.checked;
						if (cksn != cke)
							config.macros.importTiddlers.onchange(cksn);
					}
				};
			if (tiddlers) {
				var seaUrl = document.getElementById('sea' + aurl);
				if (seaUrl)
					seaUrl.onclick = config.macros.importTiddlers.showAll;
			}
			var rqsUrl = document.getElementById('rqs' + aurl);
			if (rqsUrl) {
				rqsUrl.onclick = config.macros.importTiddlers.refresh;
				rqsUrl.setAttribute('aurl',aurl);
			}
			if (afilter)
				rqsUrl.setAttribute('filter',afilter);
			for (t in links) {
				if (isNaN(t)) continue;
				var chtid = 'cht' + t;
				var chtel = document.getElementById(chtid);
				this.tims[aurl][chtid] = chtel;
				chtel.onclick = function (ev) { config.macros.importTiddlers.onchange(resolveTarget(ev || window.event)); };
				document.getElementById(links[t]).onclick = config.macros.importTiddlers.fetch;
			}
			if (custumUse)
				document.getElementById('cmdImport').onclick = config.macros.importTiddlers.importSelected;
		}
	},
	showAll: function (ev) {
		var target = resolveTarget(ev || window.event);
		var url = target.id.substring(3);
		var pel = target.parentNode;
		removeChildren(pel);
		config.macros.importTiddlers.serve(url, false, true, pel.id);
	},
	refresh: function (ev) {
		var target = resolveTarget(ev || window.event);
		var aurl = target.getAttribute('aurl');
		var filt = target.getAttribute('filter');
		var wrd = document.getElementById(&quot;wrdiv:&quot; + aurl);
		var place = wrd.parentNode;
		place.removeChild(wrd);
		config.macros.importTiddlers.renderTL(place, aurl, filt, null, true);
		var libs = http.tiddlersFromUrl({ url: aurl, filter: filt || '', source: 'remote' }).sort(config.macros.importTiddlers.sortf);
	},
	onchange: function (target) {
		var idx = Number(target.id.substring(3));
		var libs = config.macros.importTiddlers.libs;
		var hidden = false;
		if (target.checked &amp;&amp; store.hasTiddler(libs[idx].title, true)) {
			hidden = true;
			displayMessage(libs[idx].title + &quot; will be hidden by existing tiddler&quot;);
		}
		libs[idx].current = target.checked;
		var reqmsg = false;
		if (libs[idx].current &amp;&amp; hidden == false) {
			var reqs = libs[idx].requires;
			if (reqs) {
				reqs = reqs.readBracketedList();
				for (var rti = 0; rti &lt; reqs.length; rti++) {
					if (!store.getTiddler(reqs[rti])) {
						displayMessage(libs[idx].title + &quot; requires &quot; + reqs[rti]);
						reqmsg = true;
						if (!libs[idx].pulls)
							libs[idx].pulls = [ reqs[rti] ];
						else
							libs[idx].pulls.push(reqs[rti]);
					}
				}
			}
		}
		if (reqmsg)
			displayMessage(&quot;Required tiddlers are also imported.&quot;);
		var cursel = [];
		for (var t = 0; t &lt; libs.length; t++)
			if (libs[t].current) {
				cursel.push(libs[t].title);
				var pulls = libs[t].pulls;
				for (var lix = 0; lix &lt; pulls.length; lix++) {
					if (cursel.indexOf(pulls[lix]) == -1) {
						cursel.push(pulls[lix]);
						var ctls = target.parentNode.parentNode.parentNode.childNodes;
						for (var cni = 0; cni &lt; ctls.length; cni++) {
							if (ctls[cni].firstChild.childNodes[1].innerText == pulls[lix])
								ctls[cni].firstChild.firstChild.checked = true;
						}
					}
				}
			}
		var aurl = config.macros.importTiddlers.aurl;
		if (aurl.startsWith('http:'))
			aurl = aurl.substring(5);
		var cmdincl = document.getElementById('cmdInclude');
		if (cmdincl) cmdincl.href = [window.location.path, '?include=', aurl, '|', cursel.join('|')].join('');
	},
	fetch: function (ev) {
		var target = resolveTarget(ev || window.event);
		var td = http.getTiddler({ id: target.getAttribute('title') + &quot;#&quot; + target.firstChild.nodeValue });
		if (store.getTiddler(td.title))
			if (!confirm(&quot;This will hide the existing tiddler by the same name&quot;))
				return;

		var tiddler = new Tiddler(td.title, 0, td.text);
		tiddler.tags = td.tags.readBracketedList();
		tiddler.modifier = td.modifier;
		tiddler.modified = td.modified;
		var info = &quot;Retrieved from &quot; + target.getAttribute('title')
		tiddler.versions = '|' + info + '|'
		config.annotations[td.title] = info
		store.addTiddler(tiddler);
		story.displayTiddler(null, tiddler.title);
		story.focusTiddler(tiddler.title, &quot;text&quot;);
	},
	serve: function (file, selected, override, where) {
		var ms = function (t) {
			t.version = t.currentVer = 0;
			t.hasShadow = true;
			t.modifier = config.views.wikified.shadowModifier;
			t.created = null;
			t.modified = null;
			return t;
		};
		if ((!store.fetchTiddler(file)) || override) {
			var bas = ['&lt;&lt;importTiddlers &quot;', file, '&quot; ',
						selected ? 'tiddlers' : '',
						' ', selected ? selected.toJSONString() : &quot;&quot;, '&gt;&gt;'].join('');
			if (where) {
				dew = document.getElementById(where);
				if (dew)
					return wikify(bas, dew);
			}
			store.addTiddler(ms(new Tiddler(file, 0, bas)));
		}
		if (story.getTiddler(file))
			story.refreshTiddler(file, null, true);
		else
			story.displayTiddler(null, file);
	},
	menu: function () {
		var filelist = http.tiddlersFromUrl({ menu: true });
		if (filelist.length == 0)
			return &quot;.&quot;;
		var mls = [&quot; or select from the following previously retrieved files:&quot;];
		for (var i = 0; i &lt; filelist.length; i++)
			mls.push(['&lt;script label=&quot;', filelist[i], '&quot;&gt;config.macros.importTiddlers.serve(', filelist[i].toJSONString(), ')&lt;/script&gt;'].join(''));
		return mls.join('&lt;br&gt;');
	},
	importSelected: function (ev, tidlr) {
		var importByMenu = function (url, tbl) {
			var selectList = [];
			var cls = config.macros.importTiddlers.tims[url];
			for (var mn in cls) {
				var e = cls[mn];
				var tn = e.nextSibling.firstChild.nodeValue;
				if (e.type == 'checkbox' &amp;&amp; e.checked &amp;&amp; tn)
					selectList.push(tn);
			}
			var result = http.tiddlersFromUrl({ url: url, select: selectList.length ? selectList.join('||') : 'void' });
		};
		if (!tidlr)
			tidlr = story.findContainingTiddler(resolveTarget(ev || window.event));
		var urls = document.getElementsByName('url')
		for (var i in urls) {
			var e = urls[i];
			if (isDescendant(e, tidlr)) {
				importByMenu(e.getAttribute(&quot;id&quot;), e.nextSibling);
			}
		}
		return true;
		if (result.success)
			if (window.confirm(result.Message))
				window.location.reload();
	}
};

config.macros.importTiddlerStatus = {
	handler: function (place, macroName, params, wikifier, paramString) {
		try { var evv = eval(params[0]) } catch (e) { return; }
		if (evv) {
			var list = evv.split('\n');
			var n = 0;
			var where = params[1] || '';
			for (var i = 0; i &lt; list.length; i++)
				if (list[i].trim() != &quot;&quot;) {
					var data = list[i].trim().split('#', 2);
					var wt = ['&lt;script label=&quot;', data[0], '&quot;&gt;config.macros.importTiddlers.serve(', data[0].toJSONString(), ',', data[1].toJSONString(), ',true,', where.toJSONString(), ')&lt;/script&gt;&lt;br&gt;'].join('');
					++n;  //if (++n == 1) wikify('&lt;br&gt;', place);
					wikify(wt, place);
				}
			if (n == 0)
				wikify(' (none)', place);
		}
	}
};
//}}}</pre></tiddler></tiddlers>