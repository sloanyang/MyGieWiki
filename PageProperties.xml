<?xml version="1.0" encoding="utf-8" ?>
<tiddlers>
<tiddler title="PageProperties" viewTemplate="ViewTemplate" tags="excludeLists">
	<pre>&lt;script&gt;return config.PageProperties.init();&lt;/script&gt;
|&gt;|&gt;|Title&lt;br&gt;&lt;&lt;input text title 95&gt;&gt;|
|&gt;|&gt;|Subtitle&lt;br&gt;&lt;&lt;input text subtitle 95&gt;&gt;|
|Owner&lt;br&gt;&lt;&lt;input text owner 35&gt;&gt;|Group(s) &lt;&lt;defineGroup&gt;&gt;&lt;br&gt;&lt;&lt;input text groups 30&gt;&gt;|Locked&lt;br&gt;&lt;&lt;input checkbox locked false&gt;&gt;|
|&gt;|&gt;|''Access permissions''|
|Group&lt;br&gt;&lt;&lt;input select group javascript:config.accessTypes&gt;&gt;|Authenticated&lt;br&gt;&lt;&lt;input select authenticated javascript:config.accessTypes &gt;&gt;|Anonymous&lt;br&gt;&lt;&lt;input select anonymous &quot;javascript:config.accessTypes&quot;&gt;&gt;|
|&gt;|&gt;|''Use optional features'' (help: [[Template|PageTemplateHelp]], [[Tiddler libraries|LibraryUsageHelp]], [[External scripts|ExtScriptHelp]])|
|Template&lt;br&gt;&lt;&lt;input select template javascript:availableTemplates() &gt;&gt; - &lt;&lt;button &quot;!config.PageProperties.isTemplate()&quot; &quot;examine it&quot; &quot;Examine the template&quot; &quot;/__templates/&quot; &quot;externalLink&quot; &quot;ExamineTemplate&quot;&gt;&gt;&lt;br&gt;&lt;script if=&quot;config.PageProperties.TemplateUpgrade()&quot; label=&quot;Try upgrade to current version&quot;&gt; config.PageProperties.UpgradeTemplate();&lt;/script&gt;|Tiddler libraries:&lt;br&gt;&lt;script label=&quot;static&quot; title=&quot;Statically installed files&quot;&gt;config.PageProperties.openLibrary('static');&lt;/script&gt; &lt;script label=&quot;local&quot; title=&quot;Local pages that are tagged library&quot;&gt;config.PageProperties.openLibrary('local');&lt;/script&gt; &lt;script label=&quot;file&quot; title=&quot;Files on your machine&quot;&gt;config.PageProperties.promptForUpload();&lt;/script&gt; &lt;script label=&quot;uploads&quot; title=&quot;Uploaded files&quot;&gt;config.PageProperties.openLibrary('uploads');&lt;/script&gt; &lt;script label=&quot;giewiki&quot; title=&quot;http://giewiki.appspot.com/lib/plugins/&quot;&gt;config.PageProperties.openLibrary('http://giewiki.appspot.com/lib/plugins/?xsl=');&lt;/script&gt; &lt;script label=&quot;other..&quot;&gt;config.PageProperties.openLibrary('other');&lt;/script&gt;|&lt;script label=&quot;External scripts&quot;&gt;config.PageProperties.listScripts(place)&lt;/script&gt;&lt;br&gt;&lt;script&gt;return config.PageProperties.usedScripts();&lt;/script&gt;|
|&gt;|&gt;|&lt;&lt;importTiddlerStatus forms.PageProperties.systeminclude libraryImport&gt;&gt;|
|&gt;|&gt;|&lt;html&gt;  &lt;span id='libraryCatalog' /&gt;  &lt;/html&gt;|
|&gt;|&gt;|&lt;html&gt;  &lt;span id='libraryImport' /&gt;  &lt;/html&gt;|
|&gt;|Page tags&lt;br&gt;&lt;&lt;input text tags 74&gt;&gt;&lt;br&gt;-type tags separated by spaces or apply special tags:&lt;br&gt;&lt;script label=&quot;hidden&quot; title=&quot;Hide from SiteMap&quot;&gt;config.PageProperties.addTag('hidden')&lt;/script&gt; - &lt;script label=&quot;library&quot; title=&quot;Make content available via Tiddler library 'local'&quot;&gt;config.PageProperties.addTag('library')&lt;/script&gt; - &lt;script label=&quot;template&quot; title=&quot;Make page available as a template&quot;&gt;config.PageProperties.addTag('template')&lt;/script&gt; ( + &lt;script label=&quot;version&quot; title=&quot;See help: Template above&quot;&gt;config.PageProperties.addTag('version')&lt;/script&gt;, &lt;script label=&quot;include&quot; title=&quot;See help: Template above&quot;&gt;config.PageProperties.addTag('include')&lt;/script&gt;)|Read-only options&lt;br&gt;&lt;&lt;input checkbox viewprior true&gt;&gt;Prior versions&lt;br&gt;&lt;&lt;input checkbox viewbutton true&gt;&gt;&quot;view&quot; button|
|&gt;|&gt;|Predefined tiddler tags&lt;br&gt;&lt;&lt;input text tiddlertags 95&gt;&gt;|
&lt;&lt;submitButton forms.PageProperties.updateaccess 'Save' 'Save your changes' config.PageProperties.save() explanation 'Only the owner can alter page properties'&gt;&gt; | &lt;&lt;submitButton config.PageProperties.DeleteAccess() 'Delete page' 'Delete this page and its contents' config.PageProperties.promptToDeletePage()&gt;&gt;
&lt;script&gt;return config.PageProperties.activated();&lt;/script&gt;
	</pre>
</tiddler>
<tiddler title="PagePropertiesScript" viewTemplate="ViewTemplate" tags="systemConfig excludeLists excludeSearch">
<pre>//{{{
config.PageProperties = {
	init: function () {
		config.accessTypes = &quot;admin|all|edit|add|comment|view|none|&quot;;
		if (!forms.PageProperties)
			forms.PageProperties = http.pageProperties();
		forms.PageProperties.template_changed = function(f,id,val) {
			if (f)
				f[id] = val;
			var btn = document.getElementById('ExamineTemplate');
			if (btn)
				btn.setAttribute('href','/_templates/' + encodeURIComponent(val));
		};
		if (config.isLoggedIn()) {
			if (typeof forms.PageProperties.scripts === &quot;string&quot;)
				forms.PageProperties.scripts = forms.PageProperties.scripts.split('|');
			var scripts = forms.PageProperties.scripts;
			for (var i = 0; i &lt; scripts.length; i++)
				forms.PageProperties[scripts[i]] = true;
		}
		else {
			forms.PageProperties.scripts = [];
			return &quot;''[As you are not logged in, this dialog is not functional]''&quot;;
		}
	},
	isTemplate: function() {
		return window.location.pathname.startsWith('/_templates/');
	},
	DeleteAccess: function() {
		return window.location.pathname.length &gt; 1 &amp;&amp; forms.PageProperties.updateaccess;
	},
	listScripts: function(place) {
		var tg = place;
		var scrlr = http.listScripts();
		var desHandler = function(e) {
			var ev = e || window.event;
			var cbc = resolveTarget(ev);
			var text = cbc.nextSibling.nodeValue;
			forms.PageProperties[text] = cbc.checked;
		};
		var selHandler = function(e) {
			var ev = e || window.event;
			var text = resolveTarget(ev).firstChild.nodeValue;
			var bre = document.createElement('br');
			insertAfter(tg,bre);
			var cb = document.createElement(&quot;input&quot;);
			cb.setAttribute(&quot;type&quot;, &quot;checkbox&quot;);
			cb.checked = true;
			cb.onclick = desHandler;
			insertAfter(bre,cb);
			insertAfter(cb,document.createTextNode(text));
			forms.PageProperties.scripts.push(text);
			forms.PageProperties[text] = true;
		};
		if (scrlr.success) {
			var popup = Popup.create(tg);
			var values = scrlr.list.split('|');
			for (var i = 0; i &lt; values.length; i++)
				createTiddlyButton(createTiddlyElement(popup, &quot;li&quot;), values[i], null, selHandler);
			Popup.show();
		}
	},
	usedScripts: function() {
		var scripts = forms.PageProperties.scripts;
		var arr = [];
		for (var i = 0; i &lt; scripts.length; i++)
			if (scripts[i])
				arr.push( '&lt;&lt;input checkbox ' + scripts[i] + ' true&gt;&gt;' + scripts[i]);
		return arr.length &gt; 0 ? arr.join('&lt;br&gt;') : &quot;(none)&quot;;
	},
	tryingUpgrade: function() {
		return window.location.search == &quot;?upgradeTemplate=try&quot;;
	},
	activated: function () {
		if (!config.isLoggedIn()) {
			forms.PageProperties.controls['title'].setAttribute(&quot;readOnly&quot;, &quot;readOnly&quot;);
			forms.PageProperties.controls['subtitle'].setAttribute(&quot;readOnly&quot;, &quot;readOnly&quot;);
		}
		forms.PageProperties.template_changed(null,null,forms.PageProperties.template);
		if (forms.PageProperties.message)
			displayMessage(forms.PageProperties.message);
		if (!forms.PageProperties || !forms.PageProperties.owner)
			return;
		forms.PageProperties.controls['title'].focus();
		if (!forms.PageProperties.template_info.current &amp;&amp; config.PageProperties.tryingUpgrade()) {
			displayMessage(&quot;Save PageProperties to switch this version of the template&quot;);
			forms.PageProperties.upgradeTemplate = true;
		}
	},
	addTag: function (tag) {
		var tl = forms.PageProperties.tags.readBracketedList();
		if (tl.indexOf(tag) &lt; 0)
			tl.push(tag)
		else if (tag == 'template') {
			if (window.confirm(&quot;Update template?&quot;)) {
				if (http.updateTemplate({ 'tags': forms.PageProperties.tags }).Success)
					displayMessage(&quot;Template updated&quot;);
			}
			return;
		}
		setFormFieldValue(forms.PageProperties, 'tags', tl.join(' '))
	}
};
//}}}
</pre>
</tiddler>
<tiddler title="PagePropertiesScript2" viewTemplate="ViewTemplate" tags="systemConfig excludeLists excludeSearch">
<pre>//{{{
	
config.PageProperties.save = function () {
		if (!forms.PageProperties || !forms.PageProperties.owner)
			return displayMessage(&quot;You are not logged in&quot;);
		if (!forms.PageProperties.title)
			return displayMessage(&quot;You need to set the Title&quot;);
		var scripts = forms.PageProperties.scripts;
		var news = [];
		for (var i = 0; i &lt; scripts.length; i++)
			if (forms.PageProperties[scripts[i]])
				news.push(scripts[i]);
		forms.PageProperties.scripts = news.join('|');

		var resp = http.pageProperties(forms.PageProperties);
		if (resp.Success &amp;&amp; config.macros.importTiddlers.importSelected(null, story.getTiddler('PageProperties'))) {
			if (config.PageProperties.tryingUpgrade())
				window.location.search = &quot;&quot;;
			else
				window.location.reload();
		}
	};

config.PageProperties.listLibrary = function (url, lines) {
		var liblistId = 'libList' + url;
		var ee = document.getElementById(liblistId);
		if (ee)
			ee.parentNode.removeChild(ee);
		
		var output = [['Library: &lt;html&gt;&lt;span id=&quot;', liblistId, '&quot;&gt;', url, '&lt;/span&gt;&lt;/html&gt; has:'].join('')];
		var urlParts = url.split('/');
		var qry = urlParts[urlParts.length-1];
		if (!qry.startsWith('?'))
			qry = '';
		for (var al = lines.shift(); al; al = lines.shift()) {
			if (urlParts.length &gt; 1) {
				var ups = urlParts.slice(0, 3).join('/') + al + qry;
				al = al.split('/').pop();
			}
			else
				var ups = al;
			output.push(['&lt;script label=&quot;', al, '&quot;&gt;importFromDialog(&quot;', url, '&quot;,&quot;', ups, '&quot;);&lt;/script&gt;'].join(''));
		}
		if (output.length == 1)
			output.push('(none)');
		var delc = document.getElementById('libraryCatalog');
		if (delc.firstChild &amp;&amp; delc.firstChild.nodeValue)
			createTiddlyElement(delc, 'br');
		wikify(output.join('&lt;br&gt; '), delc);
	};
	
config.PageProperties.openLibrary = function (url) {
		if (url == 'other') {
			var opts = config.options.txtExternalLibrary;
			if (!opts)
				config.PageProperties.externalLibrary = opts = window.prompt(&quot;URL of tiddlers to use&quot;, config.PageProperties.externalLibrary);
			if (!opts)
				return;
			var urls = opts.split(' ');
			this.listLibrary(url, urls);
		}
		else {
			var ld = http.openLibrary({ library: url });
			if (ld) {
				if (ld.text != null)
					this.listLibrary(url, ld.text.split('\n'));
				else
					this.listLibrary(url, ld.pages);
			}
		}
	};
	
config.PageProperties.promptForUpload = function() {
		var delc = document.getElementById('libraryCatalog');
		createUploadFrame(delc,'tiddlers','upoadTiddlerFrame', 28, '/static/UploadDialog.htm');
	};
	
config.PageProperties.promptToDeletePage = function() {
		if (!confirm(&quot;Do you really want to delete this page?&quot;)) return;
		if (http.deletePage(window.location.href).Success) {
			story.closeAllTiddlers();
			story.displayTiddler(null, &quot;SiteMap&quot;);
			displayMessage(&quot;This page has now been deleted&quot;);
		}
	};
	
config.PageProperties.TemplateUpgrade = function() {
		var ti = forms.PageProperties.template_info;
		return ti ? (forms.PageProperties.template_info.page &amp;&amp; !forms.PageProperties.template_info.current) : false;
	};
	
config.PageProperties.UpgradeTemplate = function() {
		if (window.confirm(&quot;This requires reloading the page (you will lose unsaved changes) - proceed?&quot;)) {
			window.location.hash = &quot;PageSetup&quot;;
			window.location.search = &quot;upgradeTemplate=try&quot;;
		}
	};
	
config.PageProperties.MakeFolder = function() {
		var f = forms[formName(place)];
		av = f.address;
		if(typeof av === 'string' &amp;&amp; !av.endsWith('/'))
			setFormFieldValue(f,'address', av + '/');
	};

//}}}
</pre>
</tiddler>
</tiddlers>