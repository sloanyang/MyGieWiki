<tiddlers>
<div title="'Pagewise' list all Tiddlers (10 Tiddlers per page, with page up/down buttons)" modifier="UdoBorkowski" modified="200710211000" created="200710100704" tags="ForEachTiddlerMacro beginEndNoneExample contextVariableExample countVariableExample indexVariableExample scriptClauseExample writeActionExample">
<pre>With a little scripting you can use the ForEachTiddlerPlugin to display the result &quot;by pages&quot;. I.e. you don't display the full result list, but (e.g.) 10 at a time. 

Using a &quot;pagewise&quot; display may be useful when the result may get very large. This way you avoid scrolling the window to see the result. It also speeds up things since less items need to be display at a time.

''Example:''

&lt;&lt;forEachTiddler
    script '
        window.fetItemsPerPage = 10;

        function getHeader(context,count) {
            if (!window.fetStartIndex || window.fetStartIndex &lt; 0) 
                window.fetStartIndex = 0;

            // ensure not to page behind the last page
            if (window.fetStartIndex &gt;= count)
                window.fetStartIndex = Math.min(Math.max(window.fetStartIndex-window.fetItemsPerPage,0),count-1);

            createTiddlyButton(context.place,&quot;&lt;&quot;,null,
                    function(e) {
                        window.fetStartIndex -= window.fetItemsPerPage;
                        story.refreshTiddler(context.viewerTiddler.title,null,true);
                    });
            createTiddlyButton(context.place,&quot;&gt;&quot;,null,
                    function(e) {
                        window.fetStartIndex += window.fetItemsPerPage;
                        story.refreshTiddler(context.viewerTiddler.title,null,true);
                    });

            var startNo = window.fetStartIndex+1;
            var endNo = Math.min(count,window.fetStartIndex+window.fetItemsPerPage);

            return &quot;(&quot;+startNo+&quot; - &quot;+endNo+ &quot; of &quot;+ count + &quot; items)\n&quot;;
        }
    '

    write
            '(index &gt;= window.fetStartIndex) &amp;&amp; (index &lt; window.fetStartIndex + 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'

        begin
            'getHeader(context,count)'
&gt;&gt;
''Code''
{{{
&lt;&lt;forEachTiddler
    script '
        window.fetItemsPerPage = 10;

        function getHeader(context,count) {
            if (!window.fetStartIndex || window.fetStartIndex &lt; 0) 
                window.fetStartIndex = 0;

            // ensure not to page behind the last page
            if (window.fetStartIndex &gt;= count)
                window.fetStartIndex = Math.min(Math.max(window.fetStartIndex-window.fetItemsPerPage,0),count-1);

            createTiddlyButton(context.place,&quot;&lt;&quot;,null,
                    function(e) {
                        window.fetStartIndex -= window.fetItemsPerPage;
                        story.refreshTiddler(context.viewerTiddler.title,null,true);
                    });
            createTiddlyButton(context.place,&quot;&gt;&quot;,null,
                    function(e) {
                        window.fetStartIndex += window.fetItemsPerPage;
                        story.refreshTiddler(context.viewerTiddler.title,null,true);
                    });

            var startNo = window.fetStartIndex+1;
            var endNo = Math.min(count,window.fetStartIndex+window.fetItemsPerPage);

            return &quot;(&quot;+startNo+&quot; - &quot;+endNo+ &quot; of &quot;+ count + &quot; items)\n&quot;;
        }
    '

    write
            '(index &gt;= window.fetStartIndex) &amp;&amp; (index &lt; window.fetStartIndex + 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'

        begin
            'getHeader(context,count)'
&gt;&gt;
}}}
</pre>
</div>
<div title="2007-05-14" modifier="UdoBorkowski" created="200704271826" tags="schedule">
<pre>Mother's Day</pre>
</div>
<div title="2007-06-22" modifier="UdoBorkowski" created="200704271827" tags="schedule">
<pre>Midsummer eve</pre>
</div>
<div title="2007-09-20" modifier="UdoBorkowski" modified="200704271829" created="200704271822" tags="schedule">
<pre>Birthday TiddlyWiki (*2004)</pre>
</div>
<div title="2007-12-25" modifier="UdoBorkowski" modified="200704271827" created="200704271825" tags="schedule">
<pre>Christmas</pre>
</div>
<div title="2007-12-31" modifier="UdoBorkowski" created="200704271828" tags="schedule">
<pre>New Year's Eve</pre>
</div>
<div title="29 December 2009" modifier="YourName" modified="200912291436" created="200912291349" changecount="11">
<pre>&lt;&lt;tiddler DailyStatusReport&gt;&gt;
</pre>
</div>
<div title="About" modifier="UdoBorkowski" modified="200706150949" created="200512171503" tags="basic">
<pre>&lt;&lt;tiddler CurrentTasks&gt;&gt;This page serves as a platform to share TiddlyWiki macros, plugins and other extensions, written by UdoBorkowski from {{abegoLink{[[abego Software|http://www.abego-software.de]]}}}. 

If you enjoy the plugins, or find them useful then please consider a [[donation|Donations]].
&lt;&lt;tiddler [[Plugins]]&gt;&gt;
</pre>
</div>
<div title="Action Specification" modifier="UdoBorkowski" created="200511291106" tags="Documentation ForEachTiddlerMacro">
<pre>''Syntax:''
|[//action// [//actionParameters//]]|

The Action Specification in the [[ForEachTiddlerMacro]] specifies what should happen with the tiddlers. The specified action is applied to all tiddlers that are selected through the [[whereClause]], in the order specified by the [[sortClause]]. 

The following actions are supported:

&lt;&lt;tiddler AddToListAction&gt;&gt;
&lt;&lt;tiddler WriteAction&gt;&gt;
</pre>
</div>
<div title="AddToListAction" modifier="UdoBorkowski" created="200511291108" tags="Documentation ForEachTiddlerProject">
<pre>''//The {{{addToList}}} action//''

The {{{addToList}}} action of the ForEachTiddlerMacro adds every selected tiddler to a list and displays it at the location of the macro.

It is the default action, i.e when no action is given the addToList action is used.
</pre>
</div>
<div title="AddToListActionExamples" modifier="UdoBorkowski" created="200512092138" tags="Examples ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the addToList action (the default action) in the ForEachTiddlerMacro.
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;addToListActionExample&quot;)'
&gt;&gt;
See also ForEachTiddlerExamples.</pre>
</div>
<div title="Added &quot;Daily Status Report&quot; example (29 December 2009)" modifier="YourName" modified="200912291434" created="200912291351" tags="Task Documentation" changecount="6">
<pre>[ ... Here goes the detailed documentation for the tiddler ... ]</pre>
</div>
<div title="Added sample tiddlers for &quot;Daily Status Report&quot; example (29 December 2009)" modifier="YourName" modified="200912291435" created="200912291356" tags="Task Documentation" changecount="2">
<pre>[ ... Here goes the detailed documentation for the tiddler ... ]</pre>
</div>
<div title="AdvancedOptions" modifier="YourName" created="200907160830" changecount="2">
<pre>&lt;&lt;options&gt;&gt;
&lt;&lt;option chkUseInclude&gt;&gt; Include ~TiddlyWikis (IncludeList | IncludeState | [[help|http://tiddlywiki.abego-software.de/#%5B%5BIncludePlugin%20Documentation%5D%5D]])
^^(Reload this ~TiddlyWiki to make changes become effective)^^
''Private Settings: ''&lt;&lt;option chkUsePrivateSettings&gt;&gt; Use private settings.  &lt;&lt;option chkMakeSettingPrivateWhenChanged&gt;&gt; Make setting private when changed.&amp;#160;&amp;#160;&amp;#160;[[Show Settings]].
^^(Private settings are stored in this ~TiddlyWiki, shared settings are stored as cookies. For more information see the [[Settings documentation|SettingsPlugin Documentation]].)^^
&lt;&lt;option chkUseYourSearch&gt;&gt; Use 'Your Search' //([[more options|YourSearch Options]]) ([[help|YourSearch Help]])// 
&lt;&lt;option chkYourSearchSortByDate&gt;&gt; Sort 'Your Search' result by Date </pre>
</div>
<div title="AutoRefreshPlugin" modifier="YourName" modified="200806051157" created="200709011107" tags="systemConfig" changecount="1">
<pre>/***
|''Name:''|AutoRefreshPlugin|
|''Version:''|1.0.1 (2007-01-20)|
|''Type:''|plugin|
|''Source:''|http://tiddlywiki.abego-software.de/#AutoRefreshPlugin|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Documentation:''|[[AutoRefreshPlugin Documentation|http://tiddlywiki.abego-software.de/#%5B%5BAutoRefreshPlugin%20Documentation%5D%5D]]|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''~CoreVersion:''|2.1.3|
|''Browser:''|Firefox 1.5.0.9 or better; Internet Explorer 6.0|
A tiddler containing the {{{&lt;&lt;autoRefresh...&gt;&gt;}}} macro is automatically refreshed (re-painted) whenever a tiddler changes.
!Syntax
{{{
&lt;&lt;autoRefresh [observeTiddler: tiddler ...]&gt;&gt;
}}}
|{{{observeTiddler}}}|(optional) when specified the refresh will only happen when one of the tiddlers specified is changed.|
!Source Code
***/
//{{{

if (!window.abego) window.abego = {};

// autoRefresh Macro =============================================================
//
(function() {


var REFRESHER_NAME = &quot;abego_onEveryChange&quot;;

var tiddlersToRefresh = {}; // A set holding the names of tiddlers to be refreshed

var onEveryChangeRefresher = function(e,changeList) {
	
	var tiddlerElem = story.findContainingTiddler(e);
	if (!tiddlerElem) return false;

	var title = tiddlerElem.getAttribute(&quot;tiddler&quot;);
	if (!title) return false;

	// if &quot;observeTiddler&quot; are specified we only refresh if one of the given 
	// tiddlers has changed.
	var observedTiddlers = e.getAttribute(&quot;observedTiddlers&quot;);
	if (observedTiddlers) {
		var a = observedTiddlers.readBracketedList();
		if (!changeList || !a.containsAny(changeList))
			return;
	}

	// Refresh the tiddler asynchronously. 
	// This way we can avoid repeated refreshes (e.g. when a tiddler is renamed)
	tiddlersToRefresh[title] = true;
	setTimeout(function() {
		// Refresh all tiddlers in tiddlersToRefresh
		for(var title in tiddlersToRefresh)
			story.refreshTiddler(title,null,true);

		// We have refreshed all pending tiddlers. Clear the set.
		tiddlersToRefresh = {};
	}, 0);

	return true;
}

config.refreshers[REFRESHER_NAME] = onEveryChangeRefresher;


config.macros.autoRefresh = {};

config.macros.autoRefresh.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
    params = paramString.parseParams(&quot;observeTiddler&quot;,null,true,false,true); // allowEval, cascadeDefaults, names allowed

	var e = createTiddlyElement(place,&quot;span&quot;);
	e.setAttribute(&quot;refresh&quot;,REFRESHER_NAME);
	var observedTiddlers = params[0][&quot;observeTiddler&quot;];
	if (observedTiddlers &amp;&amp; observedTiddlers.length) {
		var s = &quot;[[&quot;+observedTiddlers.join(&quot;]] [[&quot;)+&quot;]]&quot;;
		e.setAttribute(&quot;observedTiddlers&quot;,s);
	}
};


})();

//}}}</pre>
</div>
<div title="AutoRefreshPlugin Documentation" modifier="UdoBorkowski" modified="200709011143" created="200709011124">
<pre>A tiddler containing the {{{&lt;&lt;autoRefresh...&gt;&gt;}}} macro is automatically refreshed (re-painted) whenever a tiddler changes.

!Syntax
{{{
&lt;&lt;autoRefresh [observeTiddler: tiddler ...]&gt;&gt;
}}}
|{{{observeTiddler}}}|(optional) &lt;&lt;br&gt;&gt;when specified the refresh will only happen when one of the tiddlers specified is changed.&lt;&lt;br&gt;&gt;When no &quot;observerTiddler&quot; is specified every tiddler change triggers a repaint/refresh|

!Usage
You may add this macro to a tiddler T when the content displayed by T depends on other tiddlers, e.g. when using the ForEachTiddlerPlugin or the PartTiddlerPlugin.

!!Example 1: Keep forEachTiddler List up-to-date'
{{{
&lt;&lt;forEachTiddler where 'tiddler.title.startsWith(&quot;function&quot;)'&gt;&gt;
&lt;&lt;autoRefresh&gt;&gt;
}}}
I.e. the tiddler lists all tiddlers that start with &quot;function&quot; using the ForEachTiddlerPlugin.
 
By adding the {{{&lt;&lt;autoRefresh&gt;&gt;}}} the list is automatically updated whenever a tiddler is changed (e.g. when a new &quot;function...&quot; tiddler is added or an existing one is deleted).

!!Example 2: Always display most recent part content
The tiddler &quot;Example 2&quot; has this content:
{{{
!Topics
&lt;&lt;tiddler Summary/Topics&gt;&gt;
!Authors
&lt;&lt;tiddler Summary/Authors&gt;&gt;
&lt;&lt;autoRefresh observeTiddler: Summary&gt;&gt;
}}}
I.e. &quot;Example 2&quot; displays the text of the two parts &quot;Topics&quot; and &quot;Authors&quot; of the tiddler &quot;Summary&quot; (see PartTiddlerPlugin). 

To ensure always the latest content of these parts are displayed (even when the tiddler &quot;Summary&quot; is changed after tiddler &quot;Example 2&quot; is displayed) add {{{&lt;&lt;autoRefresh observeTiddler: Summary&gt;&gt;}}} to the tiddler. Now the tiddler &quot;Example 2&quot; is automatically repainted whenever the (observed) tiddler &quot;Summary&quot; changes.</pre>
</div>
<div title="Automatically create tabs from a set of Tiddlers" modifier="UdoBorkowski" modified="200712060827" created="200710010825" tags="ForEachTiddlerMacro beginEndNoneExample sortClauseExample whereClauseExample writeActionExample" changecount="1">
<pre>Create a tabbed view with one tab for every tiddler containing the tag &quot;glossar&quot; (using the {{{&lt;&lt;tabs...&gt;&gt;}}} macro).
{{{
&lt;&lt;forEachTiddler
    where
       'tiddler.tags.contains(&quot;glossar&quot;)'

    sortBy
       'tiddler.title.toUpperCase()'

    write '&quot; [[&quot;+tiddler.title+&quot; ]] \&quot;view [&quot;+tiddler.title+&quot;]\&quot; [[&quot;+tiddler.title+&quot;]] &quot;'

        begin '&quot;&lt;&lt;tabs txtMyAutoTab &quot;'

        end '&quot;&gt;&quot;+&quot;&gt;&quot;'

        none '&quot;//No tiddler tagged with \&quot;glossar\&quot;//&quot;'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
    where
       'tiddler.tags.contains(&quot;glossar&quot;)'

    sortBy
       'tiddler.title.toUpperCase()'

    write '&quot; [[&quot;+tiddler.title+&quot; ]] \&quot;view [&quot;+tiddler.title+&quot;]\&quot; [[&quot;+tiddler.title+&quot;]] &quot;'

        begin '&quot;&lt;&lt;tabs txtMyAutoTab &quot;'

        end '&quot;&gt;&quot;+&quot;&gt;&quot;'

        none '&quot;//No tiddler tagged with \&quot;glossar\&quot;//&quot;'
&gt;&gt;

//If you wonder about the trailing space in the tab titles read [[this article|http://twhelp.tiddlyspot.com/#tabs]] (Thanks to Morris Gray for this hint).//
</pre>
</div>
<div title="BSD open source license" modifier="UdoBorkowski" modified="200604030110" created="200511161512" tags="basic">
<pre>Copyright (c) abego Software ~GmbH, 2005-2006 ([[www.abego-software.de|http://www.abego-software.de]])

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of abego Software nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

</pre>
</div>
<div title="BSD open source license (abego Software)" modifier="UdoBorkowski" modified="200604030018" created="200604030110">
<pre>&lt;&lt;tiddler [[BSD open source license]]&gt;&gt;</pre>
</div>
<div title="BiggerForm (Card 1)" modifier="UdoBorkowski" created="200512140254" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler BiggerFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;Jerry Wall&quot;,&quot;isVIP&quot;:true,&quot;password&quot;:&quot;1234&quot;,&quot;level&quot;:&quot;Guru&quot;,&quot;browser&quot;:&quot;Firefox&quot;,&quot;music&quot;:[&quot;New Age&quot;],&quot;notes&quot;:&quot;You can enter Text\nacross multiple\nlines...&quot;,&quot;attachment&quot;:&quot;E:\\_Library_\\MiscUB-Vol2005-06 (open)\\Opera 8.51\\ow32enen851.exe&quot;}&lt;/data&gt;</pre>
</div>
<div title="BiggerForm (Card 2)" modifier="UdoBorkowski" created="200512140255" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler BiggerFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;Will Snyder&quot;,&quot;password&quot;:&quot;ggggggg&quot;,&quot;level&quot;:&quot;Expert&quot;,&quot;music&quot;:[&quot;Jazz&quot;,&quot;Blues&quot;],&quot;notes&quot;:&quot;Having Fun with TiddlyWiki and the FormTiddlerPlugin.\n\n(BTW: notice the multi selection in the 'Music Prefernces' list box)&quot;}&lt;/data&gt;</pre>
</div>
<div title="BiggerForm (Card 3)" modifier="UdoBorkowski" created="200512220057" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler BiggerFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;Jack Brown&quot;,&quot;password&quot;:&quot;asdasd&quot;,&quot;level&quot;:&quot;Beginner&quot;,&quot;browser&quot;:&quot;Internet Explorer&quot;,&quot;notes&quot;:&quot;New here...&quot;}&lt;/data&gt;</pre>
</div>
<div title="BiggerFormTemplate" modifier="UdoBorkowski" created="200512220217" tags="FormTiddlerProject formTemplate">
<pre>!An Example Form, showing many features of the FormTiddlerPlugin
&lt;html&gt;
&lt;sub&gt;&lt;b&gt;Name:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;input name=userName type=text/&gt;&lt;input name=isVIP type=checkbox /&gt;is VIP&lt;br/&gt;
&lt;sub&gt;&lt;b&gt;Password:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;input name=password type=password /&gt;&lt;br/&gt;
&lt;sub&gt;&lt;b&gt;Attachment:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;input name=attachment type=file /&gt;&lt;br/&gt;

&lt;sub&gt;&lt;b&gt;Level:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;&lt;input name=level type=radio value=&quot;Beginner&quot; /&gt;Beginner
&lt;input name=level type=radio value=&quot;Expert&quot; /&gt;Expert
&lt;input name=level type=radio value=&quot;Guru&quot; /&gt;Guru&lt;br/&gt;

&lt;sub&gt;&lt;b&gt;Browser:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;select name=browser &gt;
 &lt;option&gt;Firefox
 &lt;option&gt;Internet Explorer
 &lt;option&gt;Opera
 &lt;option&gt;Other
&lt;/select &gt;
&lt;br/&gt;
&lt;sub&gt;&lt;b&gt;Music Preferences:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;select name=music MULTIPLE &gt;
 &lt;option&gt; R&amp;B
 &lt;option&gt; Jazz
 &lt;option&gt; Blues
 &lt;option&gt; New Age
&lt;/select &gt;
&lt;br/&gt;

&lt;sub&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
&lt;TEXTAREA name=notes rows=4 cols=80 &gt;&lt;/TEXTAREA&gt;
&lt;p/&gt;
&lt;input name=hiddenValue type=hidden value=&quot;This is a hidden value&quot; /&gt;

&lt;input name=btn type=button value=&quot;Just a button&quot; /&gt;
&lt;input name=btnSubmit type=submit /&gt;
&lt;input name=btnReset type=reset /&gt;
&lt;br/&gt;
&lt;/div&gt;
&lt;/html&gt;
[[Card 1|BiggerForm (Card 1)]] - [[Card 2|BiggerForm (Card 2)]] - [[Card 3|BiggerForm (Card 3)]]

~~(This is an example form, using the form template BiggerFormTemplate and the FormTiddlerPlugin.)~~</pre>
</div>
<div title="BlogTemplate" modifier="UdoBorkowski" created="200512170853" tags="FormTiddlerProject">
<pre>&lt;html&gt;
&lt;style&gt;
.rolodex table {
border: 0px solid;
background-color:#FFFF99;
}

.rolodex tr, .rolodex td {
border: 0px solid;
}
&lt;/style&gt;
&lt;span class=&quot;rolodex&quot;&gt;
 &lt;table&gt;
 &lt;tr&gt;
 &lt;td colspan=&quot;6&quot;&gt;&lt;sub&gt;&lt;b&gt;Content:&lt;/b&gt;&lt;/sub&gt;&lt;br&gt;
 &lt;textarea name=contentrows=&quot;8&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td colspan=&quot;6&quot;&gt;&lt;sub&gt;&lt;b&gt;Comments:&lt;/b&gt;&lt;/sub&gt;&lt;br&gt;
 &lt;textarea name=comments rows=&quot;6&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/span&gt;
&lt;/html&gt;</pre>
</div>
<div title="Bug: A script following a data section is deleted when data is changed" modifier="UdoBorkowski" created="200512140304" tags="BugReport">
<pre>&lt;&lt;formTiddler BugReportTemplate&gt;&gt;
&lt;data&gt;{&quot;project&quot;:&quot;DataTiddlerProject&quot;,&quot;reportedBy&quot;:&quot; GeoffS&quot;,&quot;reportDate&quot;:&quot;2005-12-13&quot;,&quot;description&quot;:&quot;Add a tiddler \&quot;theData\&quot; with the following text:\n==========\n&lt;data &gt;{\&quot;isVIP\&quot;:true,\&quot;user\&quot;:\&quot;John Brown\&quot;,\&quot;age\&quot;:\&quot;90\&quot;}&lt;/data &gt;\n&lt;script&gt;\nDataTiddler.setData(\&quot;theData\&quot;,\&quot;age\&quot;,\&quot;50\&quot;);\n&lt;/script&gt;\n==========\nWhen reopening the tiddler the age is changed (to \&quot;50\&quot;), but the script is gone.&quot;,&quot;cause&quot;:&quot;The regular expression matching the data section was buggy.&quot;,&quot;state&quot;:&quot;closed&quot;,&quot;fixedIn&quot;:&quot;DataTiddlerPlugin 1.0.1&quot;}&lt;/data&gt;</pre>
</div>
<div title="Bug: ForEachTiddler 1.0.1 has broken support on win32 Opera 8.51" modifier="UdoBorkowski" created="200512140304" tags="BugReport">
<pre>&lt;&lt;formTiddler BugReportTemplate&gt;&gt;
&lt;data&gt;{&quot;description&quot;:&quot;ForEachTiddler 1.0.1 has broken support on win32 Opera 8.51&quot;,&quot;project&quot;:&quot;ForEachTiddlerProject&quot;,&quot;reportedBy&quot;:&quot;BrunoSabin&quot;,&quot;reportDate&quot;:&quot;2005-12-09&quot;,&quot;cause&quot;:&quot;A trailing \&quot;,\&quot; in the field initialization of object instantiations is not allowed in Opera (Firefox accepts/ignores this extra comma)\n\n(see function createContext.)&quot;,&quot;fixedIn&quot;:&quot;ForEachTiddlerPlugin 1.0.2&quot;,&quot;state&quot;:&quot;closed&quot;}&lt;/data&gt;</pre>
</div>
<div title="BugReportTemplate" modifier="UdoBorkowski" created="200512140300" tags="FormTiddlerProject formTemplate">
<pre>&lt;html&gt;
&lt;style&gt;
.rolodex table {
border: 0px solid;
background-color:#FFFF99;
}

.rolodex tr, .rolodex td {
border: 0px solid;
}
&lt;/style&gt;
&lt;span class=&quot;rolodex&quot;&gt;
 &lt;table&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Project:&lt;/b&gt;&lt;/td&gt;
 &lt;td &gt;&lt;select name=project &gt;&lt;option&gt;&lt;option&gt;DataTiddlerProject&lt;option&gt;ForEachTiddlerProject&lt;option&gt;FormTiddlerProject&lt;/select &gt;&lt;/td&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Reported By:&lt;/b&gt;&lt;/td&gt;
 &lt;td &gt;&lt;input name=reportedBy type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Date:&lt;/b&gt;&lt;/td&gt;
 &lt;td &gt;&lt;input name=reportDate type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td colspan=&quot;6&quot;&gt;&lt;sub&gt;&lt;b&gt;Description:&lt;/b&gt;&lt;/sub&gt;&lt;br&gt;
 &lt;textarea name=description rows=&quot;8&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td colspan=&quot;6&quot;&gt;&lt;sub&gt;&lt;b&gt;Cause:&lt;/b&gt;&lt;/sub&gt;&lt;br&gt;
 &lt;textarea name=cause rows=&quot;6&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;State:&lt;/b&gt;&lt;/td&gt;
 &lt;td &gt;&lt;select name=state &gt;&lt;option&gt;new&lt;option&gt;in progress&lt;option&gt;info pending&lt;option&gt;fixed&lt;option&gt;closed&lt;/select &gt;&lt;/td&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Fixed in:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan = &quot;4&quot;&gt;&lt;input name=fixedIn type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/span&gt;
&lt;/html&gt;</pre>
</div>
<div title="Bugreports" modifier="UdoBorkowski" created="200512140303" tags="FormTiddlerProject">
<pre>&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;BugReport&quot;)'
 sortBy
 'tiddler.data(&quot;project&quot;)+tiddler.data(&quot;state&quot;)'
 script
 'function writeBugReportLine(tiddler, index) {var result =&quot;&quot;; if (index ==0) {result +=&quot;|!Project|!Title|!State|\n&quot;;} result +=&quot;|&quot;+tiddler.data(&quot;project&quot;)+&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.data(&quot;state&quot;)+&quot;|\n&quot;; return result;}'
 write
 'writeBugReportLine(tiddler,index)'
&gt;&gt;</pre>
</div>
<div title="Configuration" modifier="UdoBorkowski" modified="200609152135" created="200511252222" tags="basic">
<pre>[[PageTemplate]]
|&gt;|&gt;|[[SiteTitle]] - [[SiteSubtitle]]|
|[[MainMenu]]|[[DefaultTiddlers]] &lt;html&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/html&gt;[[ViewTemplate]] &lt;html&gt;&lt;br&gt;&lt;br&gt;&lt;/html&gt; [[EditTemplate]]|[[SideBarOptions]]|
|~|~|[[OptionsPanel]]|
|~|~|[[AdvancedOptions]]|
|~|~|&lt;&lt;tiddler Configuration.SideBarTabs&gt;&gt;|

''StyleSheet:'' [[StyleSheetColors]] - [[StyleSheetLayout]] - [[StyleSheetPrint]]

[[SiteUrl]]</pre>
</div>
<div title="Configuration.SideBarTabs" modifier="UdoBorkowski" modified="200601060216" created="200601060206">
<pre>[[SideBarTabs]]
|[[TabTimeline]]|[[TabAll]]|[[TabTags]]|&lt;&lt;tiddler Configuration.TabMore&gt;&gt;|</pre>
</div>
<div title="Configuration.TabMore" modifier="UdoBorkowski" modified="200601060219" created="200601060202">
<pre>|&gt;|[[TabMore]]|
|TabMoreMissing|TabMoreOrphans|</pre>
</div>
<div title="Contact" modifier="UdoBorkowski" modified="200609152204" created="200511161512" tags="basic">
<pre>''//Discussion Groups//''
The TiddlyWiki community actively discusses in the following Google groups:
* A TiddlyWiki group for general discussion, bug reports and announcements at http://groups-beta.google.com/group/TiddlyWiki
* A TiddlyWikiDev group for discussion about TiddlyWiki development at http://groups-beta.google.com/group/TiddlyWikiDev

Please also use these discussion groups for technical questions regarding plugins provided by this site.


Email: contact@abego-software.de
</pre>
</div>
<div title="Contacts" modifier="UdoBorkowski" created="200512140303" tags="FormTiddlerProject">
<pre>Contacts:
[[JoeBlock]]
</pre>
</div>
<div title="ContactsFormTemplate" modifier="UdoBorkowski" created="200512140256" tags="FormTiddlerProject formTemplate">
<pre>&lt;html&gt;
&lt;style&gt;
.rolodex table {
border: 0px solid;
background-color:#FFFF99;
}

.rolodex tr, .rolodex td {
border: 0px solid;
}
&lt;/style&gt;
&lt;span class=&quot;rolodex&quot;&gt;
 &lt;table&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Firstname:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=firstname type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Lastname:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=lastname type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Email:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=email type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Phone:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=phone type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;b&gt;Address:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;textarea name=address rows=&quot;2&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;City:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=city type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;State/Province:&lt;/b&gt;&lt;/td&gt;
 &lt;td&gt;&lt;input name=state type=text size=&quot;5&quot; /&gt;&lt;/td&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b style=&quot;width:100%&quot; &gt;ZIP/Postal Code:&lt;/b&gt;&lt;/td&gt;
 &lt;td&gt;&lt;input name=zip type=text size=&quot;5&quot; style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Country:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=country type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td align=&quot;right&quot;&gt;&lt;b&gt;Webpage:&lt;/b&gt;&lt;/td&gt;
 &lt;td colspan=&quot;3&quot;&gt;&lt;input name=webpage type=text style=&quot;width:100%&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;
 &lt;td colspan=&quot;4&quot;&gt;&lt;sub&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;/sub&gt;&lt;br&gt;
 &lt;textarea name=notes rows=&quot;4&quot; cols=&quot;40&quot; style=&quot;width:100%&quot; &gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/span&gt;
&lt;/html&gt;</pre>
</div>
<div title="Copyright" modifier="UdoBorkowski" modified="200604030014" created="200511161512" tags="basic">
<pre>© [[abego Software GmbH|http://www.abego-software.de]] 2005-2006

''Open Source Licence''

This page (and the TiddlyWiki it is building on) is published under a [[BSD open source license]]. This gives you the freedom to use it pretty much however you want, including for commercial purposes, as long as you keep the copyright notice. If you do use stuff from this page a link back to http://tiddlywiki.abego-software/ and to http://www.tiddlywiki.com/ is appreciated.
</pre>
</div>
<div title="Create File with list of all tiddlers" modifier="UdoBorkowski" created="200512081518" tags="ForEachTiddlerMacro toFileExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
 write 
 'tiddler.title+&quot;\n&quot;' 

 toFile 'file:///c:/MyTiddlerList.txt' withLineSeparator '\r\n'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
 write 
 'tiddler.title+&quot;\n&quot;' 

 toFile 'file:///c:/MyTiddlerList.txt' withLineSeparator '\r\n'
&gt;&gt;

</pre>
</div>
<div title="DailyStatusReport" modifier="YourName" modified="200912291436" created="200912291400" changecount="8">
<pre>!Daily Status Report
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(context.viewerTiddler.title) &amp;&amp; tiddler.title != context.viewerTiddler.title' 
 sortBy 
 'tiddler.title' 
write '&quot;!![[&quot;+tiddler.title+&quot;]]\n//&quot;+tiddler.tags+&quot;//\n&quot;+tiddler.text+&quot;\n&quot;'
&gt;&gt;</pre>
</div>
<div title="DataTiddlerExamples" modifier="UdoBorkowski" created="200512121727" tags="DataTiddlerProject Examples">
<pre>Here are some examples that show the usage of tiddler data, as provided by the DataTiddlerPlugin.
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;DataTiddlerExample&quot;)'
&gt;&gt;
</pre>
</div>
<div title="DataTiddlerPlugin" modifier="UdoBorkowski" modified="200608260625" created="200512220305" tags="DataTiddlerProject Plugin UdoBorkowski systemConfig">
<pre>/***
|''Name:''|DataTiddlerPlugin|
|''Version:''|1.0.6 (2006-08-26)|
|''Source:''|http://tiddlywiki.abego-software.de/#DataTiddlerPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license]]|
|''TiddlyWiki:''|1.2.38+, 2.0|
|''Browser:''|Firefox 1.0.4+; InternetExplorer 6.0|
!Description
Enhance your tiddlers with structured data (such as strings, booleans, numbers, or even arrays and compound objects) that can be easily accessed and modified through named fields (in JavaScript code).

Such tiddler data can be used in various applications. E.g. you may create tables that collect data from various tiddlers. 

''//Example: &quot;Table with all December Expenses&quot;//''
{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;expense&quot;) &amp;&amp; tiddler.data(&quot;month&quot;) == &quot;Dec&quot;'
    write
        '&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.data(&quot;descr&quot;)+&quot;| &quot;+tiddler.data(&quot;amount&quot;)+&quot;|\n&quot;'
&gt;&gt;
}}}
//(This assumes that expenses are stored in tiddlers tagged with &quot;expense&quot;.)//
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;expense&quot;) &amp;&amp; tiddler.data(&quot;month&quot;) == &quot;Dec&quot;'
    write
        '&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.data(&quot;descr&quot;)+&quot;| &quot;+tiddler.data(&quot;amount&quot;)+&quot;|\n&quot;'
&gt;&gt;
For other examples see DataTiddlerExamples.




''Access and Modify Tiddler Data''

You can &quot;attach&quot; data to every tiddler by assigning a JavaScript value (such as a string, boolean, number, or even arrays and compound objects) to named fields. 

These values can be accessed and modified through the following Tiddler methods:
|!Method|!Example|!Description|
|{{{data(field)}}}|{{{t.data(&quot;age&quot;)}}}|Returns the value of the given data field of the tiddler. When no such field is defined or its value is undefined {{{undefined}}} is returned.|
|{{{data(field,defaultValue)}}}|{{{t.data(&quot;isVIP&quot;,false)}}}|Returns the value of the given data field of the tiddler. When no such field is defined or its value is undefined the defaultValue is returned.|
|{{{data()}}}|{{{t.data()}}}|Returns the data object of the tiddler, with a property for every field. The properties of the returned data object may only be read and not be modified. To modify the data use DataTiddler.setData(...) or the corresponding Tiddler method.|
|{{{setData(field,value)}}}|{{{t.setData(&quot;age&quot;,42)}}}|Sets the value of the given data field of the tiddler to the value. When the value is {{{undefined}}} the field is removed.|
|{{{setData(field,value,defaultValue)}}}|{{{t.setData(&quot;isVIP&quot;,flag,false)}}}|Sets the value of the given data field of the tiddler to the value. When the value is equal to the defaultValue no value is set (and the field is removed).|

Alternatively you may use the following functions to access and modify the data. In this case the tiddler argument is either a tiddler or the name of a tiddler.
|!Method|!Description|
|{{{DataTiddler.getData(tiddler,field)}}}|Returns the value of the given data field of the tiddler. When no such field is defined or its value is undefined {{{undefined}}} is returned.|
|{{{DataTiddler.getData(tiddler,field,defaultValue)}}}|Returns the value of the given data field of the tiddler. When no such field is defined or its value is undefined the defaultValue is returned.|
|{{{DataTiddler.getDataObject(tiddler)}}}|Returns the data object of the tiddler, with a property for every field. The properties of the returned data object may only be read and not be modified. To modify the data use DataTiddler.setData(...) or the corresponding Tiddler method.|
|{{{DataTiddler.setData(tiddler,field,value)}}}|Sets the value of the given data field of the tiddler to the value. When the value is {{{undefined}}} the field is removed.|
|{{{DataTiddler.setData(tiddler,field,value,defaultValue)}}}|Sets the value of the given data field of the tiddler to the value. When the value is equal to the defaultValue no value is set (and the field is removed).|
//(For details on the various functions see the detailed comments in the source code.)//


''Data Representation in a Tiddler''

The data of a tiddler is stored as plain text in the tiddler's content/text, inside a &quot;data&quot; section that is framed by a {{{&lt;data&gt;...&lt;/data&gt;}}} block. Inside the data section the information is stored in the [[JSON format|http://www.crockford.com/JSON/index.html]]. 

//''Data Section Example:''//
{{{
&lt;data&gt;{&quot;isVIP&quot;:true,&quot;user&quot;:&quot;John Brown&quot;,&quot;age&quot;:34}&lt;/data&gt;
}}}

The data section is not displayed when viewing the tiddler (see also &quot;The showData Macro&quot;).

Beside the data section a tiddler may have all kind of other content.

Typically you will not access the data section text directly but use the methods given above. Nevertheless you may retrieve the text of the data section's content through the {{{DataTiddler.getDataText(tiddler)}}} function.


''Saving Changes''

The &quot;setData&quot; methods respect the &quot;ForceMinorUpdate&quot; and &quot;AutoSave&quot; configuration values. I.e. when &quot;ForceMinorUpdate&quot; is true changing a value using setData will not affect the &quot;modifier&quot; and &quot;modified&quot; attributes. With &quot;AutoSave&quot; set to true every setData will directly save the changes after a setData.


''Notifications''

No notifications are sent when a tiddler's data value is changed through the &quot;setData&quot; methods. 

''Escape Data Section''
In case that you want to use the text {{{&lt;data&gt;}}} or {{{&lt;/data&gt;}}} in a tiddler text you must prefix the text with a tilde ('~'). Otherwise it may be wrongly considered as the data section. The tiddler text {{{~&lt;data&gt;}}} is displayed as {{{&lt;data&gt;}}}.


''The showData Macro''

By default the data of a tiddler (that is stored in the {{{&lt;data&gt;...&lt;/data&gt;}}} section of the tiddler) is not displayed. If you want to display this data you may used the {{{&lt;&lt;showData ...&gt;&gt;}}} macro:

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''showData '' [''JSON''] [//tiddlerName//] {{{&gt;&gt;}}}|
|''JSON''|By default the data is rendered as a table with a &quot;Name&quot; and &quot;Value&quot; column. When defining ''JSON'' the data is rendered in JSON format|
|//tiddlerName//|Defines the tiddler holding the data to be displayed. When no tiddler is given the tiddler containing the showData macro is used. When the tiddler name contains spaces you must quote the name (or use the {{{[[...]]}}} syntax.)|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|


!Revision history
* v1.0.6 (2006-08-26) 
** Removed misleading comment
* v1.0.5 (2006-02-27) (Internal Release Only)
** Internal
*** Make &quot;JSLint&quot; conform
* v1.0.4 (2006-02-05)
** Bugfix: showData fails in TiddlyWiki 2.0
* v1.0.3 (2006-01-06)
** Support TiddlyWiki 2.0
* v1.0.2 (2005-12-22)
** Enhancements:
*** Handle texts &quot;&lt;data&gt;&quot; or &quot;&lt;/data&gt;&quot; more robust when used in a tiddler text or as a field value.
*** Improved (JSON) error messages.
** Bugs fixed: 
*** References are not updated when using the DataTiddler.
*** Changes to compound objects are not always saved.
*** &quot;~&lt;/data&gt;&quot; is not rendered correctly (expected &quot;&lt;/data&gt;&quot;)
* v1.0.1 (2005-12-13)
** Features: 
*** The showData macro supports an optional &quot;tiddlername&quot; argument to specify the tiddler containing the data to be displayed
** Bugs fixed: 
*** A script immediately following a data section is deleted when the data is changed. (Thanks to GeoffS for reporting.)
* v1.0.0 (2005-12-12)
** initial version

!Code
***/
//{{{
//============================================================================
//============================================================================
//                           DataTiddlerPlugin
//============================================================================
//============================================================================

// Ensure that the DataTiddler Plugin is only installed once.
//
if (!version.extensions.DataTiddlerPlugin) {



version.extensions.DataTiddlerPlugin = {
    major: 1, minor: 0, revision: 6,
    date: new Date(2006, 7, 26), 
    type: 'plugin',
    source: &quot;http://tiddlywiki.abego-software.de/#DataTiddlerPlugin&quot;
};

// For backward compatibility with v1.2.x
//
if (!window.story) window.story=window; 
if (!TiddlyWiki.prototype.getTiddler) {
	TiddlyWiki.prototype.getTiddler = function(title) { 
		var t = this.tiddlers[title]; 
		return (t !== undefined &amp;&amp; t instanceof Tiddler) ? t : null; 
	};
}

//============================================================================
// DataTiddler Class
//============================================================================

// ---------------------------------------------------------------------------
// Configurations and constants 
// ---------------------------------------------------------------------------

function DataTiddler() {
}

DataTiddler = {
    // Function to stringify a JavaScript value, producing the text for the data section content.
    // (Must match the implementation of DataTiddler.parse.)
    //
    stringify : null,
    

    // Function to parse the text for the data section content, producing a JavaScript value.
    // (Must match the implementation of DataTiddler.stringify.)
    //
    parse : null
};

// Ensure access for IE
window.DataTiddler = DataTiddler;

// ---------------------------------------------------------------------------
// Data Accessor and Mutator
// ---------------------------------------------------------------------------


// Returns the value of the given data field of the tiddler.
// When no such field is defined or its value is undefined
// the defaultValue is returned.
// 
// @param tiddler either a tiddler name or a tiddler
//
DataTiddler.getData = function(tiddler, field, defaultValue) {
    var t = (typeof tiddler == &quot;string&quot;) ? store.getTiddler(tiddler) : tiddler;
    if (!(t instanceof Tiddler)) {
        throw &quot;Tiddler expected. Got &quot;+tiddler;
    }

    return DataTiddler.getTiddlerDataValue(t, field, defaultValue);
};


// Sets the value of the given data field of the tiddler to
// the value. When the value is equal to the defaultValue
// no value is set (and the field is removed)
//
// Changing data of a tiddler will not trigger notifications.
// 
// @param tiddler either a tiddler name or a tiddler
//
DataTiddler.setData = function(tiddler, field, value, defaultValue) {
    var t = (typeof tiddler == &quot;string&quot;) ? store.getTiddler(tiddler) : tiddler;
    if (!(t instanceof Tiddler)) {
        throw &quot;Tiddler expected. Got &quot;+tiddler+ &quot;(&quot;+t+&quot;)&quot;;
    }

    DataTiddler.setTiddlerDataValue(t, field, value, defaultValue);
};


// Returns the data object of the tiddler, with a property for every field.
//
// The properties of the returned data object may only be read and
// not be modified. To modify the data use DataTiddler.setData(...) 
// or the corresponding Tiddler method.
//
// If no data section is defined a new (empty) object is returned.
//
// @param tiddler either a tiddler name or a Tiddler
//
DataTiddler.getDataObject = function(tiddler) {
    var t = (typeof tiddler == &quot;string&quot;) ? store.getTiddler(tiddler) : tiddler;
    if (!(t instanceof Tiddler)) {
        throw &quot;Tiddler expected. Got &quot;+tiddler;
    }

    return DataTiddler.getTiddlerDataObject(t);
};

// Returns the text of the content of the data section of the tiddler.
//
// When no data section is defined for the tiddler null is returned 
//
// @param tiddler either a tiddler name or a Tiddler
// @return [may be null]
//
DataTiddler.getDataText = function(tiddler) {
    var t = (typeof tiddler == &quot;string&quot;) ? store.getTiddler(tiddler) : tiddler;
    if (!(t instanceof Tiddler)) {
        throw &quot;Tiddler expected. Got &quot;+tiddler;
    }

    return DataTiddler.readDataSectionText(t);
};


// ---------------------------------------------------------------------------
// Internal helper methods (must not be used by code from outside this plugin)
// ---------------------------------------------------------------------------

// Internal.
//
// The original JSONError is not very user friendly, 
// especially it does not define a toString() method
// Therefore we extend it here.
//
DataTiddler.extendJSONError = function(ex) {
	if (ex.name == 'JSONError') {
        ex.toString = function() {
			return ex.name + &quot;: &quot;+ex.message+&quot; (&quot;+ex.text+&quot;)&quot;;
		};
	}
	return ex;
};

// Internal.
//
// @param t a Tiddler
//
DataTiddler.getTiddlerDataObject = function(t) {
    if (t.dataObject === undefined) {
        var data = DataTiddler.readData(t);
        t.dataObject = (data) ? data : {};
    }
    
    return t.dataObject;
};


// Internal.
//
// @param tiddler a Tiddler
//
DataTiddler.getTiddlerDataValue = function(tiddler, field, defaultValue) {
    var value = DataTiddler.getTiddlerDataObject(tiddler)[field];
    return (value === undefined) ? defaultValue : value;
};


// Internal.
//
// @param tiddler a Tiddler
//
DataTiddler.setTiddlerDataValue = function(tiddler, field, value, defaultValue) {
    var data = DataTiddler.getTiddlerDataObject(tiddler);
    var oldValue = data[field];
	
    if (value == defaultValue) {
        if (oldValue !== undefined) {
            delete data[field];
            DataTiddler.save(tiddler);
        }
        return;
    }
    data[field] = value;
    DataTiddler.save(tiddler);
};

// Internal.
//
// Reads the data section from the tiddler's content and returns its text
// (as a String).
//
// Returns null when no data is defined.
//
// @param tiddler a Tiddler
// @return [may be null]
//
DataTiddler.readDataSectionText = function(tiddler) {
    var matches = DataTiddler.getDataTiddlerMatches(tiddler);
    if (matches === null || !matches[2]) {
        return null;
    }
    return matches[2];
};

// Internal.
//
// Reads the data section from the tiddler's content and returns it
// (as an internalized object).
//
// Returns null when no data is defined.
//
// @param tiddler a Tiddler
// @return [may be null]
//
DataTiddler.readData = function(tiddler) {
    var text = DataTiddler.readDataSectionText(tiddler);
	try {
	    return text ? DataTiddler.parse(text) : null;
	} catch(ex) {
		throw DataTiddler.extendJSONError(ex);
	}
};

// Internal.
// 
// Returns the serialized text of the data of the given tiddler, as it
// should be stored in the data section.
//
// @param tiddler a Tiddler
//
DataTiddler.getDataTextOfTiddler = function(tiddler) {
    var data = DataTiddler.getTiddlerDataObject(tiddler);
    return DataTiddler.stringify(data);
};


// Internal.
// 
DataTiddler.indexOfNonEscapedText = function(s, subString, startIndex) {
	var index = s.indexOf(subString, startIndex);
	while ((index &gt; 0) &amp;&amp; (s[index-1] == '~')) { 
		index = s.indexOf(subString, index+1);
	}
	return index;
};

// Internal.
//
DataTiddler.getDataSectionInfo = function(text) {
	// Special care must be taken to handle &quot;&lt;data&gt;&quot; and &quot;&lt;/data&gt;&quot; texts inside
	// a data section. 
	// Also take care not to use an escaped &lt;data&gt; (i.e. &quot;~&lt;data&gt;&quot;) as the start 
	// of a data section. (Same for &lt;/data&gt;)

    // NOTE: we are explicitly searching for a data section that contains a JSON
    // string, i.e. framed with braces. This way we are little bit more robust in
    // case the tiddler contains unescaped texts &quot;&lt;data&gt;&quot; or &quot;&lt;/data&gt;&quot;. This must
    // be changed when using a different stringifier.

	var startTagText = &quot;&lt;data&gt;{&quot;;
	var endTagText = &quot;}&lt;/data&gt;&quot;;

	var startPos = 0;

	// Find the first not escaped &quot;&lt;data&gt;&quot;.
	var startDataTagIndex = DataTiddler.indexOfNonEscapedText(text, startTagText, 0);
	if (startDataTagIndex &lt; 0) {
		return null;
	}

	// Find the *last* not escaped &quot;&lt;/data&gt;&quot;.
	var endDataTagIndex = text.indexOf(endTagText, startDataTagIndex);
	if (endDataTagIndex &lt; 0) {
		return null;
	}
	var nextEndDataTagIndex;
	while ((nextEndDataTagIndex = text.indexOf(endTagText, endDataTagIndex+1)) &gt;= 0) {
		endDataTagIndex = nextEndDataTagIndex;
	}

	return {
		prefixEnd: startDataTagIndex, 
		dataStart: startDataTagIndex+(startTagText.length)-1, 
		dataEnd: endDataTagIndex, 
		suffixStart: endDataTagIndex+(endTagText.length)
	};
};

// Internal.
// 
// Returns the &quot;matches&quot; of a content of a DataTiddler on the
// &quot;data&quot; regular expression. Return null when no data is defined
// in the tiddler content.
//
// Group 1: text before data section (prefix)
// Group 2: content of data section
// Group 3: text behind data section (suffix)
//
// @param tiddler a Tiddler
// @return [may be null] null when the tiddler contains no data section, otherwise see above.
//
DataTiddler.getDataTiddlerMatches = function(tiddler) {
	var text = tiddler.text;
	var info = DataTiddler.getDataSectionInfo(text);
	if (!info) {
		return null;
	}

	var prefix = text.substr(0,info.prefixEnd);
	var data = text.substr(info.dataStart, info.dataEnd-info.dataStart+1);
	var suffix = text.substr(info.suffixStart);
	
	return [text, prefix, data, suffix];
};


// Internal.
//
// Saves the data in a &lt;data&gt; block of the given tiddler (as a minor change). 
//
// The &quot;chkAutoSave&quot; and &quot;chkForceMinorUpdate&quot; options are respected. 
// I.e. the TiddlyWiki *file* is only saved when AutoSave is on.
//
// Notifications are not send. 
//
// This method should only be called when the data really has changed. 
//
// @param tiddler
//             the tiddler to be saved.
//
DataTiddler.save = function(tiddler) {

    var matches = DataTiddler.getDataTiddlerMatches(tiddler);

    var prefix;
    var suffix;
    if (matches === null) {
        prefix = tiddler.text;
        suffix = &quot;&quot;;
    } else {
        prefix = matches[1];
        suffix = matches[3];
    }

    var dataText = DataTiddler.getDataTextOfTiddler(tiddler);
    var newText = 
            (dataText !== null) 
                ? prefix + &quot;&lt;data&gt;&quot; + dataText + &quot;&lt;/data&gt;&quot; + suffix
                : prefix + suffix;
    if (newText != tiddler.text) {
        // make the change in the tiddlers text
        
        // ... see DataTiddler.MyTiddlerChangedFunction
        tiddler.isDataTiddlerChange = true;
        
        // ... do the action change
        tiddler.set(
                tiddler.title,
                newText,
                config.options.txtUserName, 
                config.options.chkForceMinorUpdate? undefined : new Date(),
                tiddler.tags);

        // ... see DataTiddler.MyTiddlerChangedFunction
        delete tiddler.isDataTiddlerChange;

        // Mark the store as dirty.
        store.dirty = true;
 
        // AutoSave if option is selected
        if(config.options.chkAutoSave) {
           saveChanges();
        }
    }
};

// Internal.
//
DataTiddler.MyTiddlerChangedFunction = function() {
    // Remove the data object from the tiddler when the tiddler is changed
    // by code other than DataTiddler code. 
    //
    // This is necessary since the data object is just a &quot;cached version&quot; 
    // of the data defined in the data section of the tiddler and the 
    // &quot;external&quot; change may have changed the content of the data section.
    // Thus we are not sure if the data object reflects the data section 
    // contents. 
    // 
    // By deleting the data object we ensure that the data object is 
    // reconstructed the next time it is needed, with the data defined by
    // the data section in the tiddler's text.
    
    // To indicate that a change is a &quot;DataTiddler change&quot; a temporary
    // property &quot;isDataTiddlerChange&quot; is added to the tiddler.
    if (this.dataObject &amp;&amp; !this.isDataTiddlerChange) {
        delete this.dataObject;
    }
    
    // call the original code.
	DataTiddler.originalTiddlerChangedFunction.apply(this, arguments);
};


//============================================================================
// Formatters
//============================================================================

// This formatter ensures that &quot;~&lt;data&gt;&quot; is rendered as &quot;&lt;data&gt;&quot;. This is used to 
// escape the &quot;&lt;data&gt;&quot; of a data section, just in case someone really wants to use
// &quot;&lt;data&gt;&quot; as a text in a tiddler and not start a data section.
//
// Same for &lt;/data&gt;.
//
config.formatters.push( {
    name: &quot;data-escape&quot;,
    match: &quot;~&lt;\\/?data&gt;&quot;,

    handler: function(w) {
            w.outputText(w.output,w.matchStart + 1,w.nextMatch);
    }
} );


// This formatter ensures that &lt;data&gt;...&lt;/data&gt; sections are not rendered.
//
config.formatters.push( {
    name: &quot;data&quot;,
    match: &quot;&lt;data&gt;&quot;,

    handler: function(w) {
		var info = DataTiddler.getDataSectionInfo(w.source);
		if (info &amp;&amp; info.prefixEnd == w.matchStart) {
            w.nextMatch = info.suffixStart;
		} else {
			w.outputText(w.output,w.matchStart,w.nextMatch);
		}
    }
} );


//============================================================================
// Tiddler Class Extension
//============================================================================

// &quot;Hijack&quot; the changed method ---------------------------------------------------

DataTiddler.originalTiddlerChangedFunction = Tiddler.prototype.changed;
Tiddler.prototype.changed = DataTiddler.MyTiddlerChangedFunction;

// Define accessor methods -------------------------------------------------------

// Returns the value of the given data field of the tiddler. When no such field 
// is defined or its value is undefined the defaultValue is returned.
//
// When field is undefined (or null) the data object is returned. (See 
// DataTiddler.getDataObject.)
//
// @param field [may be null, undefined]
// @param defaultValue [may be null, undefined]
// @return [may be null, undefined]
//
Tiddler.prototype.data = function(field, defaultValue) {
    return (field) 
         ? DataTiddler.getTiddlerDataValue(this, field, defaultValue)
         : DataTiddler.getTiddlerDataObject(this);
};

// Sets the value of the given data field of the tiddler to the value. When the 
// value is equal to the defaultValue no value is set (and the field is removed).
//
// @param value [may be null, undefined]
// @param defaultValue [may be null, undefined]
//
Tiddler.prototype.setData = function(field, value, defaultValue) {
    DataTiddler.setTiddlerDataValue(this, field, value, defaultValue);
};


//============================================================================
// showData Macro
//============================================================================

config.macros.showData = {
     // Standard Properties
     label: &quot;showData&quot;,
     prompt: &quot;Display the values stored in the data section of the tiddler&quot;
};

config.macros.showData.handler = function(place,macroName,params) {
    // --- Parsing ------------------------------------------

    var i = 0; // index running over the params
    // Parse the optional &quot;JSON&quot;
    var showInJSONFormat = false;
    if ((i &lt; params.length) &amp;&amp; params[i] == &quot;JSON&quot;) {
        i++;
        showInJSONFormat = true;
    }
    
    var tiddlerName = story.findContainingTiddler(place).id.substr(7);
    if (i &lt; params.length) {
        tiddlerName = params[i];
        i++;
    }

    // --- Processing ------------------------------------------
    try {
        if (showInJSONFormat) {
            this.renderDataInJSONFormat(place, tiddlerName);
        } else {
            this.renderDataAsTable(place, tiddlerName);
        }
    } catch (e) {
        this.createErrorElement(place, e);
    }
};

config.macros.showData.renderDataInJSONFormat = function(place,tiddlerName) {
    var text = DataTiddler.getDataText(tiddlerName);
    if (text) {
        createTiddlyElement(place,&quot;pre&quot;,null,null,text);
    }
};

config.macros.showData.renderDataAsTable = function(place,tiddlerName) {
    var text = &quot;|!Name|!Value|\n&quot;;
    var data = DataTiddler.getDataObject(tiddlerName);
    if (data) {
        for (var i in data) {
            var value = data[i];
            text += &quot;|&quot;+i+&quot;|&quot;+DataTiddler.stringify(value)+&quot;|\n&quot;;
        }
    }
    
    wikify(text, place);
};


// Internal.
//
// Creates an element that holds an error message
// 
config.macros.showData.createErrorElement = function(place, exception) {
    var message = (exception.description) ? exception.description : exception.toString();
    return createTiddlyElement(place,&quot;span&quot;,null,&quot;showDataError&quot;,&quot;&lt;&lt;showData ...&gt;&gt;: &quot;+message);
};

// ---------------------------------------------------------------------------
// Stylesheet Extensions (may be overridden by local StyleSheet)
// ---------------------------------------------------------------------------
//
setStylesheet(
    &quot;.showDataError{color: #ffffff;background-color: #880000;}&quot;,
    &quot;showData&quot;);


} // of &quot;install only once&quot;
// Used Globals (for JSLint) ==============

// ... TiddlyWiki Core
/*global 	createTiddlyElement, saveChanges, store, story, wikify */
// ... DataTiddler
/*global 	DataTiddler */
// ... JSON
/*global 	JSON */
			

/***
!JSON Code, used to serialize the data
***/
/*
Copyright (c) 2005 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
    The global object JSON contains two methods.

    JSON.stringify(value) takes a JavaScript value and produces a JSON text.
    The value must not be cyclical.

    JSON.parse(text) takes a JSON text and produces a JavaScript value. It will
    throw a 'JSONError' exception if there is an error.
*/
var JSON = {
    copyright: '(c)2005 JSON.org',
    license: 'http://www.crockford.com/JSON/license.html',
/*
    Stringify a JavaScript value, producing a JSON text.
*/
    stringify: function (v) {
        var a = [];

/*
    Emit a string.
*/
        function e(s) {
            a[a.length] = s;
        }

/*
    Convert a value.
*/
        function g(x) {
            var c, i, l, v;

            switch (typeof x) {
            case 'object':
                if (x) {
                    if (x instanceof Array) {
                        e('[');
                        l = a.length;
                        for (i = 0; i &lt; x.length; i += 1) {
                            v = x[i];
                            if (typeof v != 'undefined' &amp;&amp;
                                    typeof v != 'function') {
                                if (l &lt; a.length) {
                                    e(',');
                                }
                                g(v);
                            }
                        }
                        e(']');
                        return;
                    } else if (typeof x.toString != 'undefined') {
                        e('{');
                        l = a.length;
                        for (i in x) {
                            v = x[i];
                            if (x.hasOwnProperty(i) &amp;&amp;
                                    typeof v != 'undefined' &amp;&amp;
                                    typeof v != 'function') {
                                if (l &lt; a.length) {
                                    e(',');
                                }
                                g(i);
                                e(':');
                                g(v);
                            }
                        }
                        return e('}');
                    }
                }
                e('null');
                return;
            case 'number':
                e(isFinite(x) ? +x : 'null');
                return;
            case 'string':
                l = x.length;
                e('&quot;');
                for (i = 0; i &lt; l; i += 1) {
                    c = x.charAt(i);
                    if (c &gt;= ' ') {
                        if (c == '\\' || c == '&quot;') {
                            e('\\');
                        }
                        e(c);
                    } else {
                        switch (c) {
                            case '\b':
                                e('\\b');
                                break;
                            case '\f':
                                e('\\f');
                                break;
                            case '\n':
                                e('\\n');
                                break;
                            case '\r':
                                e('\\r');
                                break;
                            case '\t':
                                e('\\t');
                                break;
                            default:
                                c = c.charCodeAt();
                                e('\\u00' + Math.floor(c / 16).toString(16) +
                                    (c % 16).toString(16));
                        }
                    }
                }
                e('&quot;');
                return;
            case 'boolean':
                e(String(x));
                return;
            default:
                e('null');
                return;
            }
        }
        g(v);
        return a.join('');
    },
/*
    Parse a JSON text, producing a JavaScript value.
*/
    parse: function (text) {
        var p = /^\s*(([,:{}\[\]])|&quot;(\\.|[^\x00-\x1f&quot;\\])*&quot;|-?\d+(\.\d*)?([eE][+-]?\d+)?|true|false|null)\s*/,
            token,
            operator;

        function error(m, t) {
            throw {
                name: 'JSONError',
                message: m,
                text: t || operator || token
            };
        }

        function next(b) {
            if (b &amp;&amp; b != operator) {
                error(&quot;Expected '&quot; + b + &quot;'&quot;);
            }
            if (text) {
                var t = p.exec(text);
                if (t) {
                    if (t[2]) {
                        token = null;
                        operator = t[2];
                    } else {
                        operator = null;
                        try {
                            token = eval(t[1]);
                        } catch (e) {
                            error(&quot;Bad token&quot;, t[1]);
                        }
                    }
                    text = text.substring(t[0].length);
                } else {
                    error(&quot;Unrecognized token&quot;, text);
                }
            } else {
                token = operator = undefined;
            }
        }


        function val() {
            var k, o;
            switch (operator) {
            case '{':
                next('{');
                o = {};
                if (operator != '}') {
                    for (;;) {
                        if (operator || typeof token != 'string') {
                            error(&quot;Missing key&quot;);
                        }
                        k = token;
                        next();
                        next(':');
                        o[k] = val();
                        if (operator != ',') {
                            break;
                        }
                        next(',');
                    }
                }
                next('}');
                return o;
            case '[':
                next('[');
                o = [];
                if (operator != ']') {
                    for (;;) {
                        o.push(val());
                        if (operator != ',') {
                            break;
                        }
                        next(',');
                    }
                }
                next(']');
                return o;
            default:
                if (operator !== null) {
                    error(&quot;Missing value&quot;);
                }
                k = token;
                next();
                return k;
            }
        }
        next();
        return val();
    }
};

/***
!Setup the data serialization
***/

DataTiddler.format = &quot;JSON&quot;;
DataTiddler.stringify = JSON.stringify;
DataTiddler.parse = JSON.parse;

//}}}

</pre>
</div>
<div title="December Expenses (with sum)" modifier="UdoBorkowski" modified="200709280926" created="200512121746" tags="DataTiddlerExample DataTiddlerProject contextVariableExample indexVariableExample scriptClauseExample whereClauseExample writeActionExample">
<pre>This example shows how one can create a &quot;summary&quot; table from data stored in multiple tiddlers.

For this &quot;Expense Report&quot; we access tiddlers tagged with &quot;expense&quot; that contain data with the fields &quot;descr&quot;, &quot;month&quot; and &quot;amount&quot; and put all &quot;December&quot; items into our table. The example also shows how the &quot;context&quot; object of the ForEachTiddlerMacro can be used to store temporary data between different tiddler writes.

Here the resulting table:
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;expense&quot;) &amp;&amp; tiddler.data(&quot;month&quot;) == &quot;Dec&quot;'
 script
 'function writeExpenseRow(index, tiddler, context) { var result = &quot;&quot;; if (index == 0) {context.sum = 0; result = &quot;|!Description|!Amount|!Sum|!Receipt|\n&quot;;} context.sum=context.sum+tiddler.data(&quot;amount&quot;); result += &quot;|&quot; + tiddler.data(&quot;descr&quot;) + &quot;|&quot; + tiddler.data(&quot;amount&quot;) + &quot;|&quot; + context.sum + &quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot;; return result;}'
 write
 'writeExpenseRow(index, tiddler, context)'
&gt;&gt;

The following ForEachTiddlerMacro call constructed the table:
{{{
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;expense&quot;) &amp;&amp; tiddler.data(&quot;month&quot;) == &quot;Dec&quot;'
 script
 'function writeExpenseRow(index, tiddler, context) { var result = &quot;&quot;; if (index == 0) {context.sum = 0; result = &quot;|!Description|!Amount|!Sum|!Receipt|\n&quot;;} context.sum=context.sum+tiddler.data(&quot;amount&quot;); result += &quot;|&quot; + tiddler.data(&quot;descr&quot;) + &quot;|&quot; + tiddler.data(&quot;amount&quot;) + &quot;|&quot; + context.sum + &quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot;; return result;}'
 write
 'writeExpenseRow(index, tiddler, context)'
&gt;&gt;
}}}
Notice the function {{{writeExpenseRow}}} in the script section is implemented in a single line to fit a string constant. In a more readable form the function looks like this:
{{{
function writeExpenseRow(index, tiddler, context) { 
 var result = &quot;&quot;; 
 if (index == 0) {
 context.sum = 0; 
 result = &quot;|!Description|!Amount|!Sum|!Receipt|\n&quot;;
 } 
 context.sum=context.sum+tiddler.data(&quot;amount&quot;); 
 result += &quot;|&quot; + tiddler.data(&quot;descr&quot;) + &quot;|&quot; + tiddler.data(&quot;amount&quot;) + 
 &quot;|&quot; + context.sum + &quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot;; 
 return result;
}
}}}

</pre>
</div>
<div title="DefaultTiddlers" modifier="UdoBorkowski" modified="200802211140" created="200512101242" tags="basic" changecount="3">
<pre>[[About]]</pre>
</div>
<div title="DeprecatedFunctionsPlugin" created="200710140259" tags="systemConfig excludeLists excludeSearch">
<pre>/***
|''Name:''|DeprecatedFunctionsPlugin|
|''Description:''|Support for deprecated functions removed from core|
***/
//{{{
if(!version.extensions.DeprecatedFunctionsPlugin) {
version.extensions.DeprecatedFunctionsPlugin = {installed:true};

//--
//-- Deprecated code
//--

// @Deprecated: Use createElementAndWikify and this.termRegExp instead
config.formatterHelpers.charFormatHelper = function(w)
{
	w.subWikify(createTiddlyElement(w.output,this.element),this.terminator);
};

// @Deprecated: Use enclosedTextHelper and this.lookaheadRegExp instead
config.formatterHelpers.monospacedByLineHelper = function(w)
{
	var lookaheadRegExp = new RegExp(this.lookahead,&quot;mg&quot;);
	lookaheadRegExp.lastIndex = w.matchStart;
	var lookaheadMatch = lookaheadRegExp.exec(w.source);
	if(lookaheadMatch &amp;&amp; lookaheadMatch.index == w.matchStart) {
		var text = lookaheadMatch[1];
		if(config.browser.isIE)
			text = text.replace(/\n/g,&quot;\r&quot;);
		createTiddlyElement(w.output,&quot;pre&quot;,null,null,text);
		w.nextMatch = lookaheadRegExp.lastIndex;
	}
};

// @Deprecated: Use &lt;br&gt; or &lt;br /&gt; instead of &lt;&lt;br&gt;&gt;
config.macros.br = {};
config.macros.br.handler = function(place)
{
	createTiddlyElement(place,&quot;br&quot;);
};

// Find an entry in an array. Returns the array index or null
// @Deprecated: Use indexOf instead
Array.prototype.find = function(item)
{
	var i = this.indexOf(item);
	return i == -1 ? null : i;
};

// Load a tiddler from an HTML DIV. The caller should make sure to later call Tiddler.changed()
// @Deprecated: Use store.getLoader().internalizeTiddler instead
Tiddler.prototype.loadFromDiv = function(divRef,title)
{
	return store.getLoader().internalizeTiddler(store,this,title,divRef);
};

// Format the text for storage in an HTML DIV
// @Deprecated Use store.getSaver().externalizeTiddler instead.
Tiddler.prototype.saveToDiv = function()
{
	return store.getSaver().externalizeTiddler(store,this);
};

// @Deprecated: Use store.allTiddlersAsHtml() instead
function allTiddlersAsHtml()
{
	return store.allTiddlersAsHtml();
}

// @Deprecated: Use refreshPageTemplate instead
function applyPageTemplate(title)
{
	refreshPageTemplate(title);
}

// @Deprecated: Use story.displayTiddlers instead
function displayTiddlers(srcElement,titles,template,unused1,unused2,animate,unused3)
{
	story.displayTiddlers(srcElement,titles,template,animate);
}

// @Deprecated: Use story.displayTiddler instead
function displayTiddler(srcElement,title,template,unused1,unused2,animate,unused3)
{
	story.displayTiddler(srcElement,title,template,animate);
}

// @Deprecated: Use functions on right hand side directly instead
var createTiddlerPopup = Popup.create;
var scrollToTiddlerPopup = Popup.show;
var hideTiddlerPopup = Popup.remove;

// @Deprecated: Use right hand side directly instead
var regexpBackSlashEn = new RegExp(&quot;\\\\n&quot;,&quot;mg&quot;);
var regexpBackSlash = new RegExp(&quot;\\\\&quot;,&quot;mg&quot;);
var regexpBackSlashEss = new RegExp(&quot;\\\\s&quot;,&quot;mg&quot;);
var regexpNewLine = new RegExp(&quot;\n&quot;,&quot;mg&quot;);
var regexpCarriageReturn = new RegExp(&quot;\r&quot;,&quot;mg&quot;);

}
//}}}</pre>
</div>
<div title="Display the number of tiddlers that have the tag 'basic'" modifier="UdoBorkowski" modified="200710021338" created="200710021331" tags="ForEachTiddlerMacro beginEndNoneExample countVariableExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basic&quot;)'
    write
        '&quot;&quot;'
        end 'count+&quot; Tiddlers found\n&quot;'
        none '&quot;No Tiddlers found\n&quot;'
&gt;&gt;
}}}
The macro writes an empty string for every tiddler tagged &quot;basic&quot;, i.e. it writes nothing. 

Just at the end it writes the number of found tiddlers (using the ''end'' feature of the ForEachTiddler macro) or &quot;No Tiddler found&quot; if no tiddler is tagged with &quot;basic&quot;  (using the ''none'' parameter) .

''//Result://''
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basic&quot;)'
    write
        '&quot;&quot;'
        end 'count+&quot; Tiddlers found\n&quot;'
        none '&quot;No Tiddlers found\n&quot;'
&gt;&gt;
</pre>
</div>
<div title="Donations" modifier="UdoBorkowski" modified="200706151009" created="200706150926">
<pre>If you find the [[Plugins]] useful then please consider a donation. A donation will encourage me to continue developing new features, plugins and improvements for TiddlyWiki. Click the below to donate using PayPal.

&lt;html&gt;
&lt;style&gt;
.donate {
	border-spacing:2em;
}

.donate td {
	text-align:center;
	font-size:90%;
	padding:1em;
	background:#f8f8f8;
	margin: 5em;
	font-size:105%;
	-moz-border-radius: 0.8em;
	border:2px solid #eee;

}
&lt;/style&gt;
&lt;table class=&quot;donate&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;form action=&quot;https://www.paypal.com/cgi-bin/webscr&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_xclick&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;business&quot; value=&quot;udo.borkowski@gmx.de&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;item_name&quot; value=&quot;Donation&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;no_shipping&quot; value=&quot;1&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;return&quot; value=&quot;http://www.abego-software.de&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;cn&quot; value=&quot;Your Note&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;currency_code&quot; value=&quot;EUR&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;tax&quot; value=&quot;0&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;bn&quot; value=&quot;PP-DonationsBF&quot;&gt;
      &lt;b&gt;Currency:&lt;/b&gt;&lt;select name=&quot;currency_code&quot;&gt;
      	&lt;option value=&quot;AUD&quot;&gt;Australian Dollars&lt;/option&gt;
      	&lt;option value=&quot;CAD&quot;&gt;Canadian Dollars&lt;/option&gt;
      	&lt;option value=&quot;EUR&quot;&gt;Euros&lt;/option&gt;
      	&lt;option value=&quot;GBP&quot;&gt;Pounds Sterling&lt;/option&gt;
      	&lt;option selected=&quot;selected&quot; value=&quot;USD&quot;&gt;US Dollars&lt;/option&gt;
      	&lt;option value=&quot;JPY&quot;&gt;Yen&lt;/option&gt;
      &lt;/select&gt;
&lt;input type=&quot;image&quot; src=&quot;https://www.paypal.com/en_US/i/btn/x-click-but21.gif&quot; border=&quot;0&quot; name=&quot;submit&quot; alt=&quot;Donate using PayPal - it's fast, free and secure!&quot;&gt;
&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://www.paypal.com/en_US/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
&lt;/form&gt;
&lt;/html&gt;
Thank you — your support is much appreciated,

Udo Borkowski</pre>
</div>
<div title="Download" modifier="UdoBorkowski" modified="200609161217" created="200511161512" tags="basic">
<pre>* [[Plugins]]
* [[Installing Plugins]]
* [[Download TiddlyWiki]]
</pre>
</div>
<div title="Download TiddlyWiki" modifier="UdoBorkowski" modified="200602251034" created="200511161512" tags="basic">
<pre>Because a TiddlyWiki is a single HTML file, you've actually already downloaded the entire software just by viewing this site. If you want to be able to save your changes, you can save this TiddlyWiki to your local drive by right clicking on [[this link|index.html]] and selecting 'Save link as...' or 'Save target as...'. You can choose where to save the file, and what to call it (but keep the .HTML extension).

Do ''not'' use the File/Save command in your browser to save this page.

See also [[Installing Plugins]].</pre>
</div>
<div title="Export My Tiddlers As Text" modifier="UdoBorkowski" created="200512110203" tags="ForEachTiddlerMacro scriptClauseExample toFileExample writeActionExample">
<pre>The following macro call exports all tiddlers to a text file &quot;c:/MyTiddlyWikiExport.txt&quot;, using a customized format.
{{{
&lt;&lt;forEachTiddler
 script 'function getSortedTagsText(tiddler) {var tags = tiddler.tags; if (!tags) return &quot;&quot;; tags.sort(); var result = &quot;&quot;; for (var i = 0; i &lt; tags.length;i++) {result += tags[i]+ &quot; &quot;;} return result;} function writeTiddler(tiddler) {return &quot;==== &quot;+tiddler.title+&quot;=========================\nTags: &quot;+ getSortedTagsText(tiddler)+&quot;\nModified: &quot;+tiddler.modified.convertToYYYYMMDDHHMM()+&quot;\nModifier: &quot;+tiddler.modifier+&quot;\n--------------------------------------------------\n&quot;+tiddler.text+&quot;\n--------------------------------------------------\n(End of &quot;+tiddler.title+&quot;)\n\n\n\n&quot;}'
 write 
 'writeTiddler(tiddler)' 
 toFile 'file:///c:/MyTiddlyWikiExport.txt' withLineSeparator '\r\n'
&gt;&gt;
}}}
For better readablility here the script text in a nicer layout:
{{{
function getSortedTagsText(tiddler) {
 var tags = tiddler.tags; 
 if (!tags) 
 return &quot;&quot;; 
 tags.sort(); 
 var result = &quot;&quot;; 
 for (var i = 0; i &lt; tags.length;i++) {
 result += tags[i]+ &quot; &quot;;
 } 
 return result;
} 

function writeTiddler(tiddler) {
 return &quot;==== &quot;+tiddler.title+&quot;=========================\n&quot;+
 &quot;Tags: &quot;+ getSortedTagsText(tiddler)+&quot;\n&quot;+
 &quot;Modified: &quot;+tiddler.modified.convertToYYYYMMDDHHMM()+&quot;\n&quot;+
 &quot;Modifier: &quot;+tiddler.modifier+&quot;\n&quot;+
 &quot;--------------------------------------------------\n&quot;+
 tiddler.text+&quot;\n&quot;+
 &quot;--------------------------------------------------\n&quot;
 &quot;(End of &quot;+tiddler.title+&quot;)\n\n\n\n&quot;
}
}}}

&lt;&lt;forEachTiddler
 script 'function getSortedTagsText(tiddler) {var tags = tiddler.tags; if (!tags) return &quot;&quot;; tags.sort(); var result = &quot;&quot;; for (var i = 0; i &lt; tags.length;i++) {result += tags[i]+ &quot; &quot;;} return result;} function writeTiddler(tiddler) {return &quot;==== &quot;+tiddler.title+&quot;=========================\nTags: &quot;+ getSortedTagsText(tiddler)+&quot;\nModified: &quot;+tiddler.modified.convertToYYYYMMDDHHMM()+&quot;\nModifier: &quot;+tiddler.modifier+&quot;\n--------------------------------------------------\n&quot;+tiddler.text+&quot;\n--------------------------------------------------\n(End of &quot;+tiddler.title+&quot;)\n\n\n\n&quot;}'
 write 
 'writeTiddler(tiddler)' 
 toFile 'file:///c:/MyTiddlyWikiExport.txt' withLineSeparator '\r\n'
&gt;&gt;

</pre>
</div>
<div title="ForEachTiddlerExamples" modifier="UdoBorkowski" created="200512081503" tags="Documentation ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the write action in the ForEachTiddlerMacro.

//''Select and Sort Examples''//
* InClauseExamples
* WhereClauseExamples
* SortClauseExamples
* ScriptClauseExamples
//''Action Examples''//
* AddToListActionExamples
* WriteActionExamples


Of cause you may also combine the examples, e.g. taking the whereClause of one example, the sortClause of a second and the action of a third.</pre>
</div>
<div title="ForEachTiddlerMacro" modifier="YourName" modified="200707300922" created="200512081501" tags="Documentation ForEachTiddlerMacro Macro">
<pre>//~~(Part of the [[ForEachTiddlerPlugin]])~~//

Create customizable lists, tables etc. for your selections of tiddlers. Specify the tiddlers to include and their order through a powerful language.

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''forEachTiddler'' [''in'' //tiddlyWikiPath//] [''where'' //whereCondition//] [''sortBy'' //sortExpression// [''ascending'' //or// ''descending'']] [''script'' //scriptText//] [//action// [//actionParameters//]]{{{&gt;&gt;}}}|
|//tiddlyWikiPath//|The filepath to the TiddlyWiki the macro should work on. When missing the current TiddlyWiki is used.|
|//whereCondition//|(quoted) JavaScript boolean expression. May refer to the build-in variables {{{tiddler}}} and {{{context}}}.|
|//sortExpression//|(quoted) JavaScript expression returning &quot;comparable&quot; objects (using '{{{&lt;}}}','{{{&gt;}}}','{{{==}}}'. May refer to the build-in variables {{{tiddler}}} and {{{context}}}.|
|//scriptText//|(quoted) JavaScript text. Typically defines JavaScript functions that are called by the various JavaScript expressions (whereClause, sortClause, action arguments,...)|
|//action//|The action that should be performed on every selected tiddler, in the given order. By default the actions [[addToList|AddToListAction]] and [[write|WriteAction]] are supported. When no action is specified [[addToList|AddToListAction]] is used.|
|//actionParameters//|(action specific) parameters the action may refer while processing the tiddlers (see action descriptions for details). &lt;&lt;tiddler [[JavaScript in actionParameters]]&gt;&gt;|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|


''Using JavaScript''

To give you a lot of flexibility the [[ForEachTiddlerMacro]] uses JavaScript in its arguments. Even if you are not that familiar with JavaScript you may find forEachTiddler useful. Just have a look at the various ready-to-use [[ForEachTiddlerExamples]] and adapt them to your needs.

''The Elements of the Macro''

The arguments of the ForEachTiddlerMacro consist of multiple parts, each of them being optional.

&lt;&lt;slider chkFETInClause [[inClause]] &quot;inClause&quot; &quot;inClause&quot;&gt;&gt;
&lt;&lt;slider chkFETWhereClause [[whereClause]] &quot;whereClause&quot; &quot;whereClause&quot;&gt;&gt;
&lt;&lt;slider chkFETSortClause [[sortClause]] &quot;sortClause&quot; &quot;sortClause&quot;&gt;&gt;
&lt;&lt;slider chkFETScriptClause [[scriptClause]] &quot;scriptClause&quot; &quot;scriptClause&quot;&gt;&gt;
&lt;&lt;slider chkFETActions [[Action Specification]] &quot;Action Specification&quot; &quot;Action Specification&quot;&gt;&gt;

''Using Macros and &quot;&gt;&quot; inside the forEachTiddler Macro''

You may use other macro calls into the expression, especially in the actionParameters. To avoid that the {{{&gt;&gt;}}} of such a macro call is misinterpreted as the end of the {{{&lt;&lt;forEachTiddler...&gt;&gt;}}} macro you must escape the {{{&gt;&gt;}}} of the inner macro with {{{$))}}} E.g. if you want to use {{{&lt;&lt;tiddler ...&gt;&gt;}}} inside the {{{forEachTiddler}}} macro you have to write {{{&lt;&lt;tiddler ...$))}}}.

In addition it is necessary to escape single {{{&gt;}}} with the text {{{$)}}}.

''Using {{{&lt;&lt;tiddler ... with: ...&gt;&gt;}}} to re-use ForEachTiddler definitions''

Sometimes you may want to use a certain ForEachTiddler definition in slight variations. E.g. you may want to list either the tiddlers tagged with &quot;ToDo&quot; and in the other case with &quot;Done&quot;. To do so you may use &quot;Tiddler parameters&quot;. Here an example:

Replace the variable part of the ForEachTiddler definition with $1 ($2,... $9 are supported). E.g. you may create the tiddler &quot;ListTaggedTiddlers&quot; like this
{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.contains(&quot;$1&quot;)'
&gt;&gt;
}}}

Now you can use the ListTaggedTiddlers for various specific tags, using the {{{&lt;&lt;tiddler ...&gt;&gt;}}} macro:
{{{
&lt;&lt;tiddler ListTaggedTiddlers with: &quot;systemConfig&quot;&gt;&gt;
}}}
{{{
&lt;&lt;tiddler ListTaggedTiddlers with: &quot;Plugin&quot;&gt;&gt;
}}}


See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="ForEachTiddlerPlugin" modifier="UdoBorkowski" modified="200704122022" created="200512281150" tags="ForEachTiddlerMacro ForEachTiddlerProject Plugin UdoBorkowski systemConfig">
<pre>/***
|''Name:''|ForEachTiddlerPlugin|
|''Version:''|1.0.8 (2007-04-12)|
|''Source:''|http://tiddlywiki.abego-software.de/#ForEachTiddlerPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''Copyright:''|&amp;copy; 2005-2007 [[abego Software|http://www.abego-software.de]]|
|''TiddlyWiki:''|1.2.38+, 2.0|
|''Browser:''|Firefox 1.0.4+; Firefox 1.5; InternetExplorer 6.0|
!Description

Create customizable lists, tables etc. for your selections of tiddlers. Specify the tiddlers to include and their order through a powerful language.

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''forEachTiddler'' [''in'' //tiddlyWikiPath//] [''where'' //whereCondition//] [''sortBy'' //sortExpression// [''ascending'' //or// ''descending'']] [''script'' //scriptText//] [//action// [//actionParameters//]]{{{&gt;&gt;}}}|
|//tiddlyWikiPath//|The filepath to the TiddlyWiki the macro should work on. When missing the current TiddlyWiki is used.|
|//whereCondition//|(quoted) JavaScript boolean expression. May refer to the build-in variables {{{tiddler}}} and  {{{context}}}.|
|//sortExpression//|(quoted) JavaScript expression returning &quot;comparable&quot; objects (using '{{{&lt;}}}','{{{&gt;}}}','{{{==}}}'. May refer to the build-in variables {{{tiddler}}} and  {{{context}}}.|
|//scriptText//|(quoted) JavaScript text. Typically defines JavaScript functions that are called by the various JavaScript expressions (whereClause, sortClause, action arguments,...)|
|//action//|The action that should be performed on every selected tiddler, in the given order. By default the actions [[addToList|AddToListAction]] and [[write|WriteAction]] are supported. When no action is specified [[addToList|AddToListAction]]  is used.|
|//actionParameters//|(action specific) parameters the action may refer while processing the tiddlers (see action descriptions for details). &lt;&lt;tiddler [[JavaScript in actionParameters]]&gt;&gt;|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|

See details see [[ForEachTiddlerMacro]] and [[ForEachTiddlerExamples]].

!Revision history
* v1.0.8 (2007-04-12)
** Adapted to latest TiddlyWiki 2.2 Beta importTiddlyWiki API (introduced with changeset 2004). TiddlyWiki 2.2 Beta builds prior to changeset 2004 are no longer supported (but TiddlyWiki 2.1 and earlier, of cause)
* v1.0.7 (2007-03-28)
** Also support &quot;pre&quot; formatted TiddlyWikis (introduced with TW 2.2) (when using &quot;in&quot; clause to work on external tiddlers)
* v1.0.6 (2006-09-16)
** Context provides &quot;viewerTiddler&quot;, i.e. the tiddler used to view the macro. Most times this is equal to the &quot;inTiddler&quot;, but when using the &quot;tiddler&quot; macro both may be different.
** Support &quot;begin&quot;, &quot;end&quot; and &quot;none&quot; expressions in &quot;write&quot; action
* v1.0.5 (2006-02-05)
** Pass tiddler containing the macro with wikify, context object also holds reference to tiddler containing the macro (&quot;inTiddler&quot;). Thanks to SimonBaird.
** Support Firefox 1.5.0.1
** Internal
*** Make &quot;JSLint&quot; conform
*** &quot;Only install once&quot;
* v1.0.4 (2006-01-06)
** Support TiddlyWiki 2.0
* v1.0.3 (2005-12-22)
** Features: 
*** Write output to a file supports multi-byte environments (Thanks to Bram Chen) 
*** Provide API to access the forEachTiddler functionality directly through JavaScript (see getTiddlers and performMacro)
** Enhancements:
*** Improved error messages on InternetExplorer.
* v1.0.2 (2005-12-10)
** Features: 
*** context object also holds reference to store (TiddlyWiki)
** Fixed Bugs: 
*** ForEachTiddler 1.0.1 has broken support on win32 Opera 8.51 (Thanks to BrunoSabin for reporting)
* v1.0.1 (2005-12-08)
** Features: 
*** Access tiddlers stored in separated TiddlyWikis through the &quot;in&quot; option. I.e. you are no longer limited to only work on the &quot;current TiddlyWiki&quot;.
*** Write output to an external file using the &quot;toFile&quot; option of the &quot;write&quot; action. With this option you may write your customized tiddler exports.
*** Use the &quot;script&quot; section to define &quot;helper&quot; JavaScript functions etc. to be used in the various JavaScript expressions (whereClause, sortClause, action arguments,...).
*** Access and store context information for the current forEachTiddler invocation (through the build-in &quot;context&quot; object) .
*** Improved script evaluation (for where/sort clause and write scripts).
* v1.0.0 (2005-11-20)
** initial version

!Code
***/
//{{{

	
//============================================================================
//============================================================================
//		   ForEachTiddlerPlugin
//============================================================================
//============================================================================

// Only install once
if (!version.extensions.ForEachTiddlerPlugin) {

if (!window.abego) window.abego = {};

version.extensions.ForEachTiddlerPlugin = {
	major: 1, minor: 0, revision: 8, 
	date: new Date(2007,3,12), 
	source: &quot;http://tiddlywiki.abego-software.de/#ForEachTiddlerPlugin&quot;,
	licence: &quot;[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]&quot;,
	copyright: &quot;Copyright (c) abego Software GmbH, 2005-2007 (www.abego-software.de)&quot;
};

// For backward compatibility with TW 1.2.x
//
if (!TiddlyWiki.prototype.forEachTiddler) {
	TiddlyWiki.prototype.forEachTiddler = function(callback) {
		for(var t in this.tiddlers) {
			callback.call(this,t,this.tiddlers[t]);
		}
	};
}

//============================================================================
// forEachTiddler Macro
//============================================================================

version.extensions.forEachTiddler = {
	major: 1, minor: 0, revision: 8, date: new Date(2007,3,12), provider: &quot;http://tiddlywiki.abego-software.de&quot;};

// ---------------------------------------------------------------------------
// Configurations and constants 
// ---------------------------------------------------------------------------

config.macros.forEachTiddler = {
	 // Standard Properties
	 label: &quot;forEachTiddler&quot;,
	 prompt: &quot;Perform actions on a (sorted) selection of tiddlers&quot;,

	 // actions
	 actions: {
		 addToList: {},
		 write: {}
	 }
};

// ---------------------------------------------------------------------------
//  The forEachTiddler Macro Handler 
// ---------------------------------------------------------------------------

config.macros.forEachTiddler.getContainingTiddler = function(e) {
	while(e &amp;&amp; !hasClass(e,&quot;tiddler&quot;))
		e = e.parentNode;
	var title = e ? e.getAttribute(&quot;tiddler&quot;) : null; 
	return title ? store.getTiddler(title) : null;
};

config.macros.forEachTiddler.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
	// config.macros.forEachTiddler.traceMacroCall(place,macroName,params,wikifier,paramString,tiddler);

	if (!tiddler) tiddler = config.macros.forEachTiddler.getContainingTiddler(place);
	// --- Parsing ------------------------------------------

	var i = 0; // index running over the params
	// Parse the &quot;in&quot; clause
	var tiddlyWikiPath = undefined;
	if ((i &lt; params.length) &amp;&amp; params[i] == &quot;in&quot;) {
		i++;
		if (i &gt;= params.length) {
			this.handleError(place, &quot;TiddlyWiki path expected behind 'in'.&quot;);
			return;
		}
		tiddlyWikiPath = this.paramEncode((i &lt; params.length) ? params[i] : &quot;&quot;);
		i++;
	}

	// Parse the where clause
	var whereClause =&quot;true&quot;;
	if ((i &lt; params.length) &amp;&amp; params[i] == &quot;where&quot;) {
		i++;
		whereClause = this.paramEncode((i &lt; params.length) ? params[i] : &quot;&quot;);
		i++;
	}

	// Parse the sort stuff
	var sortClause = null;
	var sortAscending = true; 
	if ((i &lt; params.length) &amp;&amp; params[i] == &quot;sortBy&quot;) {
		i++;
		if (i &gt;= params.length) {
			this.handleError(place, &quot;sortClause missing behind 'sortBy'.&quot;);
			return;
		}
		sortClause = this.paramEncode(params[i]);
		i++;

		if ((i &lt; params.length) &amp;&amp; (params[i] == &quot;ascending&quot; || params[i] == &quot;descending&quot;)) {
			 sortAscending = params[i] == &quot;ascending&quot;;
			 i++;
		}
	}

	// Parse the script
	var scriptText = null;
	if ((i &lt; params.length) &amp;&amp; params[i] == &quot;script&quot;) {
		i++;
		scriptText = this.paramEncode((i &lt; params.length) ? params[i] : &quot;&quot;);
		i++;
	}

	// Parse the action. 
	// When we are already at the end use the default action
	var actionName = &quot;addToList&quot;;
	if (i &lt; params.length) {
	   if (!config.macros.forEachTiddler.actions[params[i]]) {
			this.handleError(place, &quot;Unknown action '&quot;+params[i]+&quot;'.&quot;);
			return;
		} else {
			actionName = params[i]; 
			i++;
		}
	} 
	
	// Get the action parameter
	// (the parsing is done inside the individual action implementation.)
	var actionParameter = params.slice(i);


	// --- Processing ------------------------------------------
	try {
		this.performMacro({
				place: place, 
				inTiddler: tiddler,
				whereClause: whereClause, 
				sortClause: sortClause, 
				sortAscending: sortAscending, 
				actionName: actionName, 
				actionParameter: actionParameter, 
				scriptText: scriptText, 
				tiddlyWikiPath: tiddlyWikiPath});

	} catch (e) {
		this.handleError(place, e);
	}
};

// Returns an object with properties &quot;tiddlers&quot; and &quot;context&quot;.
// tiddlers holds the (sorted) tiddlers selected by the parameter,
// context the context of the execution of the macro.
//
// The action is not yet performed.
//
// @parameter see performMacro
//
config.macros.forEachTiddler.getTiddlersAndContext = function(parameter) {

	var context = config.macros.forEachTiddler.createContext(parameter.place, parameter.whereClause, parameter.sortClause, parameter.sortAscending, parameter.actionName, parameter.actionParameter, parameter.scriptText, parameter.tiddlyWikiPath, parameter.inTiddler);

	var tiddlyWiki = parameter.tiddlyWikiPath ? this.loadTiddlyWiki(parameter.tiddlyWikiPath) : store;
	context[&quot;tiddlyWiki&quot;] = tiddlyWiki;
	
	// Get the tiddlers, as defined by the whereClause
	var tiddlers = this.findTiddlers(parameter.whereClause, context, tiddlyWiki);
	context[&quot;tiddlers&quot;] = tiddlers;

	// Sort the tiddlers, when sorting is required.
	if (parameter.sortClause) {
		this.sortTiddlers(tiddlers, parameter.sortClause, parameter.sortAscending, context);
	}

	return {tiddlers: tiddlers, context: context};
};

// Returns the (sorted) tiddlers selected by the parameter.
//
// The action is not yet performed.
//
// @parameter see performMacro
//
config.macros.forEachTiddler.getTiddlers = function(parameter) {
	return this.getTiddlersAndContext(parameter).tiddlers;
};

// Performs the macros with the given parameter.
//
// @param parameter holds the parameter of the macro as separate properties.
//				  The following properties are supported:
//
//						place
//						whereClause
//						sortClause
//						sortAscending
//						actionName
//						actionParameter
//						scriptText
//						tiddlyWikiPath
//
//					All properties are optional. 
//					For most actions the place property must be defined.
//
config.macros.forEachTiddler.performMacro = function(parameter) {
	var tiddlersAndContext = this.getTiddlersAndContext(parameter);

	// Perform the action
	var actionName = parameter.actionName ? parameter.actionName : &quot;addToList&quot;;
	var action = config.macros.forEachTiddler.actions[actionName];
	if (!action) {
		this.handleError(parameter.place, &quot;Unknown action '&quot;+actionName+&quot;'.&quot;);
		return;
	}

	var actionHandler = action.handler;
	actionHandler(parameter.place, tiddlersAndContext.tiddlers, parameter.actionParameter, tiddlersAndContext.context);
};

// ---------------------------------------------------------------------------
//  The actions 
// ---------------------------------------------------------------------------

// Internal.
//
// --- The addToList Action -----------------------------------------------
//
config.macros.forEachTiddler.actions.addToList.handler = function(place, tiddlers, parameter, context) {
	// Parse the parameter
	var p = 0;

	// Check for extra parameters
	if (parameter.length &gt; p) {
		config.macros.forEachTiddler.createExtraParameterErrorElement(place, &quot;addToList&quot;, parameter, p);
		return;
	}

	// Perform the action.
	var list = document.createElement(&quot;ul&quot;);
	place.appendChild(list);
	for (var i = 0; i &lt; tiddlers.length; i++) {
		var tiddler = tiddlers[i];
		var listItem = document.createElement(&quot;li&quot;);
		list.appendChild(listItem);
		createTiddlyLink(listItem, tiddler.title, true);
	}
};

abego.parseNamedParameter = function(name, parameter, i) {
	var beginExpression = null;
	if ((i &lt; parameter.length) &amp;&amp; parameter[i] == name) {
		i++;
		if (i &gt;= parameter.length) {
			throw &quot;Missing text behind '%0'&quot;.format([name]);
		}
		
		return config.macros.forEachTiddler.paramEncode(parameter[i]);
	}
	return null;
}

// Internal.
//
// --- The write Action ---------------------------------------------------
//
config.macros.forEachTiddler.actions.write.handler = function(place, tiddlers, parameter, context) {
	// Parse the parameter
	var p = 0;
	if (p &gt;= parameter.length) {
		this.handleError(place, &quot;Missing expression behind 'write'.&quot;);
		return;
	}

	var textExpression = config.macros.forEachTiddler.paramEncode(parameter[p]);
	p++;

	// Parse the &quot;begin&quot; option
	var beginExpression = abego.parseNamedParameter(&quot;begin&quot;, parameter, p);
	if (beginExpression !== null) 
		p += 2;
	var endExpression = abego.parseNamedParameter(&quot;end&quot;, parameter, p);
	if (endExpression !== null) 
		p += 2;
	var noneExpression = abego.parseNamedParameter(&quot;none&quot;, parameter, p);
	if (noneExpression !== null) 
		p += 2;

	// Parse the &quot;toFile&quot; option
	var filename = null;
	var lineSeparator = undefined;
	if ((p &lt; parameter.length) &amp;&amp; parameter[p] == &quot;toFile&quot;) {
		p++;
		if (p &gt;= parameter.length) {
			this.handleError(place, &quot;Filename expected behind 'toFile' of 'write' action.&quot;);
			return;
		}
		
		filename = config.macros.forEachTiddler.getLocalPath(config.macros.forEachTiddler.paramEncode(parameter[p]));
		p++;
		if ((p &lt; parameter.length) &amp;&amp; parameter[p] == &quot;withLineSeparator&quot;) {
			p++;
			if (p &gt;= parameter.length) {
				this.handleError(place, &quot;Line separator text expected behind 'withLineSeparator' of 'write' action.&quot;);
				return;
			}
			lineSeparator = config.macros.forEachTiddler.paramEncode(parameter[p]);
			p++;
		}
	}
	
	// Check for extra parameters
	if (parameter.length &gt; p) {
		config.macros.forEachTiddler.createExtraParameterErrorElement(place, &quot;write&quot;, parameter, p);
		return;
	}

	// Perform the action.
	var func = config.macros.forEachTiddler.getEvalTiddlerFunction(textExpression, context);
	var count = tiddlers.length;
	var text = &quot;&quot;;
	if (count &gt; 0 &amp;&amp; beginExpression)
		text += config.macros.forEachTiddler.getEvalTiddlerFunction(beginExpression, context)(undefined, context, count, undefined);
	
	for (var i = 0; i &lt; count; i++) {
		var tiddler = tiddlers[i];
		text += func(tiddler, context, count, i);
	}
	
	if (count &gt; 0 &amp;&amp; endExpression)
		text += config.macros.forEachTiddler.getEvalTiddlerFunction(endExpression, context)(undefined, context, count, undefined);

	if (count == 0 &amp;&amp; noneExpression) 
		text += config.macros.forEachTiddler.getEvalTiddlerFunction(noneExpression, context)(undefined, context, count, undefined);
		

	if (filename) {
		if (lineSeparator !== undefined) {
			lineSeparator = lineSeparator.replace(/\\n/mg, &quot;\n&quot;).replace(/\\r/mg, &quot;\r&quot;);
			text = text.replace(/\n/mg,lineSeparator);
		}
		saveFile(filename, convertUnicodeToUTF8(text));
	} else {
		var wrapper = createTiddlyElement(place, &quot;span&quot;);
		wikify(text, wrapper, null/* highlightRegExp */, context.inTiddler);
	}
};


// ---------------------------------------------------------------------------
//  Helpers
// ---------------------------------------------------------------------------

// Internal.
//
config.macros.forEachTiddler.createContext = function(placeParam, whereClauseParam, sortClauseParam, sortAscendingParam, actionNameParam, actionParameterParam, scriptText, tiddlyWikiPathParam, inTiddlerParam) {
	return {
		place : placeParam, 
		whereClause : whereClauseParam, 
		sortClause : sortClauseParam, 
		sortAscending : sortAscendingParam, 
		script : scriptText,
		actionName : actionNameParam, 
		actionParameter : actionParameterParam,
		tiddlyWikiPath : tiddlyWikiPathParam,
		inTiddler : inTiddlerParam, // the tiddler containing the &lt;&lt;forEachTiddler ...&gt;&gt; macro call.
		viewerTiddler : config.macros.forEachTiddler.getContainingTiddler(placeParam) // the tiddler showing the forEachTiddler result
	};
};

// Internal.
//
// Returns a TiddlyWiki with the tiddlers loaded from the TiddlyWiki of 
// the given path.
//
config.macros.forEachTiddler.loadTiddlyWiki = function(path, idPrefix) {
	if (!idPrefix) {
		idPrefix = &quot;store&quot;;
	}
	var lenPrefix = idPrefix.length;
	
	// Read the content of the given file
	var content = loadFile(this.getLocalPath(path));
	if(content === null) {
		throw &quot;TiddlyWiki '&quot;+path+&quot;' not found.&quot;;
	}
	
	var tiddlyWiki = new TiddlyWiki();

	// Starting with TW 2.2 there is a helper function to import the tiddlers
	if (tiddlyWiki.importTiddlyWiki) {
		if (!tiddlyWiki.importTiddlyWiki(content))
			throw &quot;File '&quot;+path+&quot;' is not a TiddlyWiki.&quot;;
		tiddlyWiki.dirty = false;
		return tiddlyWiki;
	}
	
	// The legacy code, for TW &lt; 2.2
	
	// Locate the storeArea div's
	var posOpeningDiv = content.indexOf(startSaveArea);
	var posClosingDiv = content.lastIndexOf(endSaveArea);
	if((posOpeningDiv == -1) || (posClosingDiv == -1)) {
		throw &quot;File '&quot;+path+&quot;' is not a TiddlyWiki.&quot;;
	}
	var storageText = content.substr(posOpeningDiv + startSaveArea.length, posClosingDiv);
	
	// Create a &quot;div&quot; element that contains the storage text
	var myStorageDiv = document.createElement(&quot;div&quot;);
	myStorageDiv.innerHTML = storageText;
	myStorageDiv.normalize();
	
	// Create all tiddlers in a new TiddlyWiki
	// (following code is modified copy of TiddlyWiki.prototype.loadFromDiv)
	var store = myStorageDiv.childNodes;
	for(var t = 0; t &lt; store.length; t++) {
		var e = store[t];
		var title = null;
		if(e.getAttribute)
			title = e.getAttribute(&quot;tiddler&quot;);
		if(!title &amp;&amp; e.id &amp;&amp; e.id.substr(0,lenPrefix) == idPrefix)
			title = e.id.substr(lenPrefix);
		if(title &amp;&amp; title !== &quot;&quot;) {
			var tiddler = tiddlyWiki.createTiddler(title);
			tiddler.loadFromDiv(e,title);
		}
	}
	tiddlyWiki.dirty = false;

	return tiddlyWiki;
};


	
// Internal.
//
// Returns a function that has a function body returning the given javaScriptExpression.
// The function has the parameters:
// 
//	 (tiddler, context, count, index)
//
config.macros.forEachTiddler.getEvalTiddlerFunction = function (javaScriptExpression, context) {
	var script = context[&quot;script&quot;];
	var functionText = &quot;var theFunction = function(tiddler, context, count, index) { return &quot;+javaScriptExpression+&quot;}&quot;;
	var fullText = (script ? script+&quot;;&quot; : &quot;&quot;)+functionText+&quot;;theFunction;&quot;;
	return eval(fullText);
};

// Internal.
//
config.macros.forEachTiddler.findTiddlers = function(whereClause, context, tiddlyWiki) {
	var result = [];
	var func = config.macros.forEachTiddler.getEvalTiddlerFunction(whereClause, context);
	tiddlyWiki.forEachTiddler(function(title,tiddler) {
		if (func(tiddler, context, undefined, undefined)) {
			result.push(tiddler);
		}
	});
	return result;
};

// Internal.
//
config.macros.forEachTiddler.createExtraParameterErrorElement = function(place, actionName, parameter, firstUnusedIndex) {
	var message = &quot;Extra parameter behind '&quot;+actionName+&quot;':&quot;;
	for (var i = firstUnusedIndex; i &lt; parameter.length; i++) {
		message += &quot; &quot;+parameter[i];
	}
	this.handleError(place, message);
};

// Internal.
//
config.macros.forEachTiddler.sortAscending = function(tiddlerA, tiddlerB) {
	var result = 
		(tiddlerA.forEachTiddlerSortValue == tiddlerB.forEachTiddlerSortValue) 
			? 0
			: (tiddlerA.forEachTiddlerSortValue &lt; tiddlerB.forEachTiddlerSortValue)
			   ? -1 
			   : +1; 
	return result;
};

// Internal.
//
config.macros.forEachTiddler.sortDescending = function(tiddlerA, tiddlerB) {
	var result = 
		(tiddlerA.forEachTiddlerSortValue == tiddlerB.forEachTiddlerSortValue) 
			? 0
			: (tiddlerA.forEachTiddlerSortValue &lt; tiddlerB.forEachTiddlerSortValue)
			   ? +1 
			   : -1; 
	return result;
};

// Internal.
//
config.macros.forEachTiddler.sortTiddlers = function(tiddlers, sortClause, ascending, context) {
	// To avoid evaluating the sortClause whenever two items are compared 
	// we pre-calculate the sortValue for every item in the array and store it in a 
	// temporary property (&quot;forEachTiddlerSortValue&quot;) of the tiddlers.
	var func = config.macros.forEachTiddler.getEvalTiddlerFunction(sortClause, context);
	var count = tiddlers.length;
	var i;
	for (i = 0; i &lt; count; i++) {
		var tiddler = tiddlers[i];
		tiddler.forEachTiddlerSortValue = func(tiddler,context, undefined, undefined);
	}

	// Do the sorting
	tiddlers.sort(ascending ? this.sortAscending : this.sortDescending);

	// Delete the temporary property that holds the sortValue.	
	for (i = 0; i &lt; tiddlers.length; i++) {
		delete tiddlers[i].forEachTiddlerSortValue;
	}
};


// Internal.
//
config.macros.forEachTiddler.trace = function(message) {
	displayMessage(message);
};

// Internal.
//
config.macros.forEachTiddler.traceMacroCall = function(place,macroName,params) {
	var message =&quot;&lt;&lt;&quot;+macroName;
	for (var i = 0; i &lt; params.length; i++) {
		message += &quot; &quot;+params[i];
	}
	message += &quot;&gt;&gt;&quot;;
	displayMessage(message);
};


// Internal.
//
// Creates an element that holds an error message
// 
config.macros.forEachTiddler.createErrorElement = function(place, exception) {
	var message = (exception.description) ? exception.description : exception.toString();
	return createTiddlyElement(place,&quot;span&quot;,null,&quot;forEachTiddlerError&quot;,&quot;&lt;&lt;forEachTiddler ...&gt;&gt;: &quot;+message);
};

// Internal.
//
// @param place [may be null]
//
config.macros.forEachTiddler.handleError = function(place, exception) {
	if (place) {
		this.createErrorElement(place, exception);
	} else {
		throw exception;
	}
};

// Internal.
//
// Encodes the given string.
//
// Replaces 
//	 &quot;$))&quot; to &quot;&gt;&gt;&quot;
//	 &quot;$)&quot; to &quot;&gt;&quot;
//
config.macros.forEachTiddler.paramEncode = function(s) {
	var reGTGT = new RegExp(&quot;\\$\\)\\)&quot;,&quot;mg&quot;);
	var reGT = new RegExp(&quot;\\$\\)&quot;,&quot;mg&quot;);
	return s.replace(reGTGT, &quot;&gt;&gt;&quot;).replace(reGT, &quot;&gt;&quot;);
};

// Internal.
//
// Returns the given original path (that is a file path, starting with &quot;file:&quot;)
// as a path to a local file, in the systems native file format.
//
// Location information in the originalPath (i.e. the &quot;#&quot; and stuff following)
// is stripped.
// 
config.macros.forEachTiddler.getLocalPath = function(originalPath) {
	// Remove any location part of the URL
	var hashPos = originalPath.indexOf(&quot;#&quot;);
	if(hashPos != -1)
		originalPath = originalPath.substr(0,hashPos);
	// Convert to a native file format assuming
	// &quot;file:///x:/path/path/path...&quot; - pc local file --&gt; &quot;x:\path\path\path...&quot;
	// &quot;file://///server/share/path/path/path...&quot; - FireFox pc network file --&gt; &quot;\\server\share\path\path\path...&quot;
	// &quot;file:///path/path/path...&quot; - mac/unix local file --&gt; &quot;/path/path/path...&quot;
	// &quot;file://server/share/path/path/path...&quot; - pc network file --&gt; &quot;\\server\share\path\path\path...&quot;
	var localPath;
	if(originalPath.charAt(9) == &quot;:&quot;) // pc local file
		localPath = unescape(originalPath.substr(8)).replace(new RegExp(&quot;/&quot;,&quot;g&quot;),&quot;\\&quot;);
	else if(originalPath.indexOf(&quot;file://///&quot;) === 0) // FireFox pc network file
		localPath = &quot;\\\\&quot; + unescape(originalPath.substr(10)).replace(new RegExp(&quot;/&quot;,&quot;g&quot;),&quot;\\&quot;);
	else if(originalPath.indexOf(&quot;file:///&quot;) === 0) // mac/unix local file
		localPath = unescape(originalPath.substr(7));
	else if(originalPath.indexOf(&quot;file:/&quot;) === 0) // mac/unix local file
		localPath = unescape(originalPath.substr(5));
	else // pc network file
		localPath = &quot;\\\\&quot; + unescape(originalPath.substr(7)).replace(new RegExp(&quot;/&quot;,&quot;g&quot;),&quot;\\&quot;);	
	return localPath;
};

// ---------------------------------------------------------------------------
// Stylesheet Extensions (may be overridden by local StyleSheet)
// ---------------------------------------------------------------------------
//
setStylesheet(
	&quot;.forEachTiddlerError{color: #ffffff;background-color: #880000;}&quot;,
	&quot;forEachTiddler&quot;);

//============================================================================
// End of forEachTiddler Macro
//============================================================================


//============================================================================
// String.startsWith Function
//============================================================================
//
// Returns true if the string starts with the given prefix, false otherwise.
//
version.extensions[&quot;String.startsWith&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
String.prototype.startsWith = function(prefix) {
	var n =  prefix.length;
	return (this.length &gt;= n) &amp;&amp; (this.slice(0, n) == prefix);
};



//============================================================================
// String.endsWith Function
//============================================================================
//
// Returns true if the string ends with the given suffix, false otherwise.
//
version.extensions[&quot;String.endsWith&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
String.prototype.endsWith = function(suffix) {
	var n = suffix.length;
	return (this.length &gt;= n) &amp;&amp; (this.right(n) == suffix);
};


//============================================================================
// String.contains Function
//============================================================================
//
// Returns true when the string contains the given substring, false otherwise.
//
version.extensions[&quot;String.contains&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
String.prototype.contains = function(substring) {
	return this.indexOf(substring) &gt;= 0;
};

//============================================================================
// Array.indexOf Function
//============================================================================
//
// Returns the index of the first occurance of the given item in the array or 
// -1 when no such item exists.
//
// @param item [may be null]
//
version.extensions[&quot;Array.indexOf&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
Array.prototype.indexOf = function(item) {
	for (var i = 0; i &lt; this.length; i++) {
		if (this[i] == item) {
			return i;
		}
	}
	return -1;
};

//============================================================================
// Array.contains Function
//============================================================================
//
// Returns true when the array contains the given item, otherwise false. 
//
// @param item [may be null]
//
version.extensions[&quot;Array.contains&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
Array.prototype.contains = function(item) {
	return (this.indexOf(item) &gt;= 0);
};

//============================================================================
// Array.containsAny Function
//============================================================================
//
// Returns true when the array contains at least one of the elements 
// of the item. Otherwise (or when items contains no elements) false is returned.
//
version.extensions[&quot;Array.containsAny&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
Array.prototype.containsAny = function(items) {
	for(var i = 0; i &lt; items.length; i++) {
		if (this.contains(items[i])) {
			return true;
		}
	}
	return false;
};


//============================================================================
// Array.containsAll Function
//============================================================================
//
// Returns true when the array contains all the items, otherwise false.
// 
// When items is null false is returned (even if the array contains a null).
//
// @param items [may be null] 
//
version.extensions[&quot;Array.containsAll&quot;] = {major: 1, minor: 0, revision: 0, date: new Date(2005,11,20), provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
Array.prototype.containsAll = function(items) {
	for(var i = 0; i &lt; items.length; i++) {
		if (!this.contains(items[i])) {
			return false;
		}
	}
	return true;
};


} // of &quot;install only once&quot;

// Used Globals (for JSLint) ==============
// ... DOM
/*global 	document */
// ... TiddlyWiki Core
/*global 	convertUnicodeToUTF8, createTiddlyElement, createTiddlyLink, 
			displayMessage, endSaveArea, hasClass, loadFile, saveFile, 
			startSaveArea, store, wikify */
//}}}


/***
!Licence and Copyright
Copyright (c) abego Software ~GmbH, 2005 ([[www.abego-software.de|http://www.abego-software.de]])

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of abego Software nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
***/

</pre>
</div>
<div title="FormTemplate" modifier="UdoBorkowski" created="200512140256" tags="FormTiddlerProject">
<pre>A FormTemplate is used with the [[FormTiddlerPlugin]]. It is a tiddler that contains one or more HTML INPUT elements and defines the layout of a form. 

Other tiddlers can reference a FormTemplate through the [[FormTiddlerMacro]].

(See [[FormTiddler Introduction]])</pre>
</div>
<div title="FormTiddler Examples" modifier="UdoBorkowski" created="200512140948" tags="FormTiddlerProject">
<pre>|!Example|!Comment|
|[[SimpleForm|SimpleForm (Card 1)]]|Three forms, using a simple template with &quot;username&quot; and &quot;password&quot; fields|
|[[BiggerForm|BiggerForm (Card 1)]]|Three forms, using a template with all supported Form input elements|
|[[Bugreports]]|Use forms and filtered lists to maintain bug reports|
|[[Contacts|JoeBlock]]|Manage your contacts in forms|
</pre>
</div>
<div title="FormTiddler Introduction" modifier="YourName" modified="200812291058" created="200512170023" tags="FormTiddlerProject" changecount="1">
<pre>The [[FormTiddlerPlugin]] allows you to enter your data in a form and store the form's data in your tiddlers.

(For more information on tiddler data see the [[DataTiddlerPlugin]].)

//''Define ~FormTemplate''//

When you want to enter data in a form you first have to define a [[FormTemplate]] tiddler. A FormTemplate tiddler is a tiddler that contains named HTML INPUT elements (such as textfields, password fields, lists etc.) that define the stuff that should be edited in the form. E.g. you may have a FormTemplate that looks like this:

&lt;html&gt;
 &lt;b&gt;Name:&lt;/b&gt;&lt;br/&gt;
 &lt;input name=userName type=text /&gt;&lt;br/&gt;
 &lt;b&gt;Password:&lt;/b&gt;&lt;br/&gt;
 &lt;input name=pwd type=password /&gt;&lt;br/&gt;
&lt;/html&gt;

The correspond HTML text looks like this
{{{
&lt;html&gt;
 &lt;b&gt;Name:&lt;/b&gt;&lt;br/&gt;
 &lt;input name=userName type=text /&gt;&lt;br/&gt;
 &lt;b&gt;Password:&lt;/b&gt;&lt;br/&gt;
 &lt;input name=pwd type=password /&gt;&lt;br/&gt;
&lt;/html&gt;
}}}

The name of the INPUT element is also the name of the data field it is editing. E.g. a text field defined like this: 
{{{
&lt;input name=userName type=text /&gt;
}}}
will edit the data field &quot;userName&quot; of the tiddler.


You are free to layout the INPUT elements as you like, but don't add a &quot;form&quot; element around them and don't define 'onchange' handlers, since this will be done automatically by the {{{&lt;&lt;formTiddler ...&gt;&gt;}}} macro.


//''Use ~FormTemplates (through the {{{&lt;&lt;formTiddler ...&gt;&gt;}}} macro)''//

In a second step you add the {{{&lt;&lt;formTiddler ...&gt;&gt;}}} macro to tiddlers that should be edited. In the macro you are referencing the [[FormTemplate]] that should be used to edit the tiddler's data. You may refer to the same FormTemplate tiddler in as many tiddlers as you like. Every such tiddler displays the same INPUT elements as the FormTemplate, but with the &quot;data&quot; of each individual tiddler.

In addition you may have more than one {{{&lt;&lt;formTiddler...&gt;&gt;}}} macro call in one tiddler. Just make sure that the names of the elements in the referenced FormTemplate tiddlers do not collide. This feature may be useful if you want to construct a larger input form from a set of smaller FormTemplates.

You can easily create tiddlers with an embedded {{{&lt;&lt;formTiddler...&gt;&gt;}}} macro call using the [[&lt;&lt;newTiddlerWithForm...&gt;&gt;|NewTiddlerWithFormMacro]] macro. The macro shows a button similar to the &quot;new tiddler&quot; button and creates the requested tiddler, ready to enter data. For details see NewTiddlerWithFormMacro.


//''&quot;Structured&quot; and &quot;Free&quot; Data''//

Typically you will edit a tiddler that uses the {{{&lt;&lt;formTiddler...&gt;&gt;}}} macro through the form. But you are free to also edit the tiddler &quot;as usual&quot;, through the build-in edit feature. I.e. you may mix &quot;structured data&quot; (as entered through the form) with &quot;free data&quot;. I.e. on a &quot;Contact&quot; tiddler you may add an image to the tiddler, or add extra links to related persons. Or you add more tags. Just make sure that you don't modify the {{{&lt;data&gt;...&lt;/data&gt;}}} section of the tiddler, since this contains the data maintained by the form.

Also notice that since the data entered in the forms is stored in the tiddler's text (in the {{{&lt;data&gt;...&lt;/data&gt;}}} section) using the &quot;search&quot; feature will also find the texts you entered in the forms (even though it will not hilite the texts in the fields).


//''Applications''//

Using the [[FormTiddlerPlugin]] it is easy to manage things like:
* [[Contacts]]
* [[Bugreports]]
* ~ToDo Lists
* and many more.

Since a FormTemplate is typically used for many tiddlers of the same kind you may also consider using the ForEachTiddlerMacro to collect data across multiple tiddlers (e.g. to get a list of all contacts, a summary page for the bug reports etc.)

(See also [[FormTiddler Examples]])


//''HTML Elements''//

For those not that familiar with the HTML INPUT elements here a short overview with HTML snippets. 
|!Type|!HTML Example|!Comment|
|button|{{{&lt;input name=btn type=button value=&quot;Just a button&quot; /&gt;}}}|no data|
|checkbox|{{{&lt;input name=isVIP type=checkbox /&gt;is VIP}}}||
|file|{{{&lt;input name=attachment type=file /&gt;}}}|The &quot;file&quot; input element typically does not restore the path of the previously selected file. Nevertheless the path of the file is stored in the tiddler.|
|hidden|{{{&lt;input name=hiddenValue type=hidden value=&quot;This is a hidden value&quot; /&gt;}}}||
|password|{{{&lt;input name=pwd type=password /&gt;}}}|The data entered in a &quot;password&quot; field is stored as clear text in the tiddler.|
|radio|{{{&lt;input name=level type=radio value=&quot;Beginner&quot; /&gt;Beginner&lt;input name=level type=radio value=&quot;Expert&quot; /&gt;Expert&lt;input name=level type=radio value=&quot;Guru&quot; /&gt;Guru}}}||
|reset|{{{&lt;input name=btnReset type=reset /&gt;}}}|no data|
|select-one|{{{&lt;select name=browser &gt;&lt;option&gt;Firefox&lt;option&gt;Internet Explorer&lt;option&gt;Opera&lt;option&gt;Other&lt;/select &gt;}}}||
|select-multiple|{{{&lt;select name=music MULTIPLE &gt;&lt;option&gt; R&amp;B &lt;option&gt; Jazz &lt;option&gt; Blues &lt;option&gt; New Age&lt;/select &gt;}}}||
|submit|{{{&lt;input name=btnSubmit type=submit /&gt;}}}|no data|
|text|{{{&lt;input name=userName type=text/&gt;}}}||
|textarea|{{{&lt;TEXTAREA name=notes rows=4 cols=80 &gt;&lt;/TEXTAREA&gt;}}}||

For details consult the Web or a textbook on HTML editing.</pre>
</div>
<div title="FormTiddlerMacro" modifier="UdoBorkowski" created="200512140258" tags="FormTiddlerProject">
<pre>The {{{&lt;&lt;formTiddler ...&gt;&gt;}}} macro defined by the FormTiddlerPlugin. 

When a tiddler T1 references the (FormTemplate) tiddler T2 in the FormTiddlerMacro, the data of T1 can be edited through the INPUT elements defined by T2.</pre>
</div>
<div title="FormTiddlerPlugin" modifier="UdoBorkowski" modified="200706241541" created="200601050046" tags="FormTiddlerProject Plugin UdoBorkowski systemConfig">
<pre>/***
&lt;&lt;checkForDataTiddlerPlugin&gt;&gt;
|''Name:''|FormTiddlerPlugin|
|''Version:''|1.0.6 (2007-06-24)|
|''Source:''|http://tiddlywiki.abego-software.de/#FormTiddlerPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license]]|
|''Macros:''|formTiddler, checkForDataTiddlerPlugin, newTiddlerWithForm|
|''Requires:''|DataTiddlerPlugin|
|''TiddlyWiki:''|1.2.38+, 2.0|
|''Browser:''|Firefox 1.0.4+; InternetExplorer 6.0|
!Description
Use form-based tiddlers to enter your tiddler data using text fields, listboxes, checkboxes etc. (All standard HTML Form input elements supported).

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''formTiddler'' //tiddlerName//{{{&gt;&gt;}}}|
|//tiddlerName//|The name of the FormTemplate tiddler to be used to edit the data of the tiddler containing the macro.|

|&gt;|{{{&lt;&lt;}}}''newTiddlerWithForm'' //formTemplateName// //buttonLabel// [//titleExpression// [''askUser'']] {{{&gt;&gt;}}}|
|//formTemplateName//|The name of the tiddler that defines the form the new tiddler should use.|
|//buttonLabel//|The label of the button|
|//titleExpression//|A (quoted) JavaScript String expression that defines the title (/name) of the new tiddler.|
|''askUser''|Typically the user is not asked for the title when a title is specified (and not yet used). When ''askUser'' is given the user will be asked in any case. This may be used when the calculated title is just a suggestion that must be confirmed by the user|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|

For details and how to use the macros see the [[introduction|FormTiddler Introduction]] and the [[examples|FormTiddler Examples]].

!Revision history
* v1.0.6 (2007-06-24)
** Fixed problem when using SELECT component in Internet Explorer (thanks to MaikBoenig for reporting)
* v1.0.5 (2006-02-24)
** Removed &quot;debugger;&quot; instruction
* v1.0.4 (2006-02-07)
** Bug: On IE no data is written to data section when field values changed (thanks to KenGirard for reporting)
* v1.0.3 (2006-02-05)
** Bug: {{{&quot;No form template specified in &lt;&lt;formTiddler&gt;&gt;&quot;}}} when using formTiddler macro on InternetExplorer (thanks to KenGirard for reporting)
* v1.0.2 (2006-01-06)
** Support TiddlyWiki 2.0
* v1.0.1 (2005-12-22)
** Features: 
*** Support InternetExplorer
*** Added newTiddlerWithForm Macro
* v1.0.0 (2005-12-14)
** initial version

!Code
***/
//{{{

//============================================================================
//============================================================================
//						FormTiddlerPlugin
//============================================================================
//============================================================================

if (!window.abego) window.abego = {};

abego.getOptionsValue = function(element,i) {
	var v = element.options[i].value;
	if (!v &amp;&amp; element.options[i].text)
		v = element.options[i].text;
	return v;
};

version.extensions.FormTiddlerPlugin = {
	major: 1, minor: 0, revision: 5,
	date: new Date(2006, 2, 24), 
	type: 'plugin',
	source: &quot;http://tiddlywiki.abego-software.de/#FormTiddlerPlugin&quot;
};

// For backward compatibility with v1.2.x
//
if (!window.story) window.story=window; 
if (!TiddlyWiki.prototype.getTiddler) TiddlyWiki.prototype.getTiddler = function(title) { return t = this.tiddlers[title]; return (t != undefined &amp;&amp; t instanceof Tiddler) ? t : null; } 

//============================================================================
// formTiddler Macro
//============================================================================

// -------------------------------------------------------------------------------
// Configurations and constants 
// -------------------------------------------------------------------------------

config.macros.formTiddler = {
	// Standard Properties
	label: &quot;formTiddler&quot;,
	version: {major: 1, minor: 0, revision: 4, date: new Date(2006, 2, 7)},
	prompt: &quot;Edit tiddler data using forms&quot;,

	// Define the &quot;setters&quot; that set the values of INPUT elements of a given type
	// (must match the corresponding &quot;getter&quot;)
	setter: {  
		button:				function(e, value) {/*contains no data */ },
		checkbox:			function(e, value) {e.checked = value;},
		file:				function(e, value) {try {e.value = value;} catch(e) {/* ignore, possibly security error*/}},
		hidden:				function(e, value) {e.value = value;},
		password:			function(e, value) {e.value = value;},
		radio:				function(e, value) {e.checked = (e.value == value);},
		reset:				function(e, value) {/*contains no data */ },
		&quot;select-one&quot;:		function(e, value) {config.macros.formTiddler.setSelectOneValue(e,value);},
		&quot;select-multiple&quot;:	function(e, value) {config.macros.formTiddler.setSelectMultipleValue(e,value);},
		submit:				function(e, value) {/*contains no data */},
		text:				function(e, value) {e.value = value;},
		textarea:			function(e, value) {e.value = value;}
	},

	// Define the &quot;getters&quot; that return the value of INPUT elements of a given type
	// Return undefined to not store any data.
	getter: {  
		button:				function(e, value) {return undefined;},
		checkbox:			function(e, value) {return e.checked;},
		file:				function(e, value) {return e.value;},
		hidden:				function(e, value) {return e.value;},
		password:			function(e, value) {return e.value;},
		radio:				function(e, value) {return e.checked ? e.value : undefined;},
		reset:				function(e, value) {return undefined;},
		&quot;select-one&quot;:		function(e, value) {return config.macros.formTiddler.getSelectOneValue(e);},
		&quot;select-multiple&quot;:	function(e, value) {return config.macros.formTiddler.getSelectMultipleValue(e);},
		submit:				function(e, value) {return undefined;},
		text:				function(e, value) {return e.value;},
		textarea:			function(e, value) {return e.value;}
	}
};


// -------------------------------------------------------------------------------
// The formTiddler Macro Handler 
// -------------------------------------------------------------------------------

config.macros.formTiddler.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
	if (!config.macros.formTiddler.checkForExtensions(place, macroName)) {
		return;
	}
	// --- Parsing ------------------------------------------

	var i = 0; // index running over the params

	// get the name of the form template tiddler
	var formTemplateName = undefined;
	if (i &lt; params.length) {
		formTemplateName = params[i];
		i++;
	}

	if (!formTemplateName) {
		config.macros.formTiddler.createErrorElement(place, &quot;No form template specified in &lt;&lt;&quot; + macroName + &quot;&gt;&gt;.&quot;);
		return;
	}


	// --- Processing ------------------------------------------

	// Get the form template text. 
	// (This contains the INPUT elements for the form.)
	var formTemplateTiddler = store.getTiddler(formTemplateName);
	if (!formTemplateTiddler) {
		config.macros.formTiddler.createErrorElement(place, &quot;Form template '&quot; + formTemplateName + &quot;' not found.&quot;);
		return;
	}
	var templateText = formTemplateTiddler.text;
	if(!templateText) {
		// Shortcut: when template text is empty we do nothing.
		return;
	}

	// Get the name of the tiddler containing this &quot;formTiddler&quot; macro
	// (i.e. the tiddler, that will be edited and that contains the data)
	var tiddlerName = config.macros.formTiddler.getContainingTiddlerName(place);

	// Append a &quot;form&quot; element. 
	var formName = &quot;form&quot;+formTemplateName+&quot;__&quot;+tiddlerName;
	var e = document.createElement(&quot;form&quot;);
	e.setAttribute(&quot;name&quot;, formName);
	place.appendChild(e);

	// &quot;Embed&quot; the elements defined by the templateText (i.e. the INPUT elements) 
	// into the &quot;form&quot; element we just created
	wikify(templateText, e);

	// Initialize the INPUT elements.
	config.macros.formTiddler.initValuesAndHandlersInFormElements(formName, DataTiddler.getDataObject(tiddlerName));
}


// -------------------------------------------------------------------------------
// Form Data Access 
// -------------------------------------------------------------------------------

// Internal.
//
// Initialize the INPUT elements of the form with the values of their &quot;matching&quot;
// data fields in the tiddler. Also setup the onChange handler to ensure that
// changes in the INPUT elements are stored in the tiddler's data.
//
config.macros.formTiddler.initValuesAndHandlersInFormElements = function(formName, data) {
	// config.macros.formTiddler.trace(&quot;initValuesAndHandlersInFormElements(formName=&quot;+formName+&quot;, data=&quot;+data+&quot;)&quot;);

	// find the form
	var form = config.macros.formTiddler.findForm(formName);
	if (!form) {
		return;
	}

	try {
		var elems = form.elements;
		for (var i = 0; i &lt; elems.length; i++) {
			var c = elems[i];
		
			var setter = config.macros.formTiddler.setter[c.type];
			if (setter) {
				var value = data[c.name];
				if (value != null) {
					setter(c, value);
				}
				c.onchange = onFormTiddlerChange;
			} else {
				config.macros.formTiddler.displayFormTiddlerError(&quot;No setter defined for INPUT element of type '&quot;+c.type+&quot;'. (Element '&quot;+c.name+&quot;' in form '&quot;+formName+&quot;')&quot;);
			}
		}
	} catch(e) {
		config.macros.formTiddler.displayFormTiddlerError(&quot;Error when updating elements with new formData. &quot;+e);
	}
}


// Internal.
//
// @return [may be null]
//
config.macros.formTiddler.findForm = function(formName) {
	// We must manually iterate through the document's forms, since
	// IE does not support the &quot;document[formName]&quot; approach

	var forms = window.document.forms;
	for (var i = 0; i &lt; forms.length; i++) {
		var form = forms[i];
		if (form.name == formName) {
			return form;
		}
	}

	return null;
}


// Internal.
//
config.macros.formTiddler.setSelectOneValue = function(element,value) {
	var n = element.options.length;
	for (var i = 0; i &lt; n; i++) {
		element.options[i].selected = abego.getOptionsValue(element,i) == value;
	}
}

// Internal.
//
config.macros.formTiddler.setSelectMultipleValue = function(element,value) {
	var values = {};
	for (var i = 0; i &lt; value.length; i++) {
		values[value[i]] = true;
	}
	
	var n = element.length;
	for (var i = 0; i &lt; n; i++) {
		element.options[i].selected = !(!values[abego.getOptionsValue(element,i)]);
	}
}

// Internal.
//
config.macros.formTiddler.getSelectOneValue = function(element) {
	var i = element.selectedIndex;
	return (i &gt;= 0) ? abego.getOptionsValue(element,i) : null;
}

// Internal.
//
config.macros.formTiddler.getSelectMultipleValue = function(element) {
	var values = [];
	var n = element.length;
	for (var i = 0; i &lt; n; i++) {
		if (element.options[i].selected) {
			values.push(abego.getOptionsValue(element,i));
		}
	}
	return values;
}



// -------------------------------------------------------------------------------
// Helpers 
// -------------------------------------------------------------------------------

// Internal.
//
config.macros.formTiddler.checkForExtensions = function(place,macroName) {
	if (!version.extensions.DataTiddlerPlugin) {
		config.macros.formTiddler.createErrorElement(place, &quot;&lt;&lt;&quot; + macroName + &quot;&gt;&gt; requires the DataTiddlerPlugin. (You can get it from http://tiddlywiki.abego-software.de/#DataTiddlerPlugin)&quot;);
		return false;
	}
	return true;
}

// Internal.
//
// Displays a trace message in the &quot;TiddlyWiki&quot; message pane.
// (used for debugging)
//
config.macros.formTiddler.trace = function(s) {
	displayMessage(&quot;Trace: &quot;+s);
}

// Internal.
//
// Display some error message in the &quot;TiddlyWiki&quot; message pane.
//
config.macros.formTiddler.displayFormTiddlerError = function(s) {
	alert(&quot;FormTiddlerPlugin Error: &quot;+s);
}

// Internal.
//
// Creates an element that holds an error message
// 
config.macros.formTiddler.createErrorElement = function(place, message) {
	return createTiddlyElement(place,&quot;span&quot;,null,&quot;formTiddlerError&quot;,message);
}

// Internal.
//
// Returns the name of the tiddler containing the given element.
// 
config.macros.formTiddler.getContainingTiddlerName = function(element) {
	return story.findContainingTiddler(element).id.substr(7);
}

// -------------------------------------------------------------------------------
// Event Handlers 
// -------------------------------------------------------------------------------

// This function must be called by the INPUT elements whenever their
// data changes. Typically this is done through an &quot;onChange&quot; handler.
//
function onFormTiddlerChange (e) {
	// config.macros.formTiddler.trace(&quot;onFormTiddlerChange &quot;+e);

	if (!e) var e = window.event;

	var target = resolveTarget(e);
	var tiddlerName = config.macros.formTiddler.getContainingTiddlerName(target);
	var getter = config.macros.formTiddler.getter[target.type];
	if (getter) {
		var value = getter(target);
		DataTiddler.setData(tiddlerName, target.name, value);
	} else {
		config.macros.formTiddler.displayFormTiddlerError(&quot;No getter defined for INPUT element of type '&quot;+target.type+&quot;'. (Element '&quot;+target.name+&quot;' used in tiddler '&quot;+tiddlerName+&quot;')&quot;);
	}
}

// ensure that the function can be used in HTML event handler
window.onFormTiddlerChange = onFormTiddlerChange;


// -------------------------------------------------------------------------------
// Stylesheet Extensions (may be overridden by local StyleSheet)
// -------------------------------------------------------------------------------

setStylesheet(
	&quot;.formTiddlerError{color: #ffffff;background-color: #880000;}&quot;,
	&quot;formTiddler&quot;);


//============================================================================
// checkForDataTiddlerPlugin Macro
//============================================================================

config.macros.checkForDataTiddlerPlugin = {
	// Standard Properties
	label: &quot;checkForDataTiddlerPlugin&quot;,
	version: {major: 1, minor: 0, revision: 0, date: new Date(2005, 12, 14)},
	prompt: &quot;Check if the DataTiddlerPlugin exists&quot;
}

config.macros.checkForDataTiddlerPlugin.handler = function(place,macroName,params) {
	config.macros.formTiddler.checkForExtensions(place, config.macros.formTiddler.label);
}



//============================================================================
// newTiddlerWithForm Macro
//============================================================================

config.macros.newTiddlerWithForm = {
	// Standard Properties
	label: &quot;newTiddlerWithForm&quot;,
	version: {major: 1, minor: 0, revision: 1, date: new Date(2006, 1, 6)},
	prompt: &quot;Creates a new Tiddler with a &lt;&lt;formTiddler ...&gt;&gt; macro&quot;
}

config.macros.newTiddlerWithForm.handler = function(place,macroName,params) {
	// --- Parsing ------------------------------------------

	var i = 0; // index running over the params

	// get the name of the form template tiddler
	var formTemplateName = undefined;
	if (i &lt; params.length) {
		formTemplateName = params[i];
		i++;
	}

	if (!formTemplateName) {
		config.macros.formTiddler.createErrorElement(place, &quot;No form template specified in &lt;&lt;&quot; + macroName + &quot;&gt;&gt;.&quot;);
		return;
	}

	// get the button label
	var buttonLabel = undefined;
	if (i &lt; params.length) {
		buttonLabel = params[i];
		i++;
	}

	if (!buttonLabel) {
		config.macros.formTiddler.createErrorElement(place, &quot;No button label specified in &lt;&lt;&quot; + macroName + &quot;&gt;&gt;.&quot;);
		return;
	}

	// get the (optional) tiddlerName script and &quot;askUser&quot;
	var tiddlerNameScript = undefined;
	var askUser = false;
	if (i &lt; params.length) {
		tiddlerNameScript = params[i];
		i++;

		if (i &lt; params.length &amp;&amp; params[i] == &quot;askUser&quot;) {
			askUser = true;
			i++;
		}
	}

	// --- Processing ------------------------------------------

	if(!readOnly) {
		var onClick = function() {
			var tiddlerName;
			if (tiddlerNameScript) {
				try {
					tiddlerName = eval(tiddlerNameScript);
				} catch (ex) {
				}
			}
			if (!tiddlerName || askUser) {
				tiddlerName = prompt(&quot;Please specify a tiddler name.&quot;, askUser ? tiddlerName : &quot;&quot;);
			}
			while (tiddlerName &amp;&amp; store.getTiddler(tiddlerName)) {
				tiddlerName = prompt(&quot;A tiddler named '&quot;+tiddlerName+&quot;' already exists.\n\n&quot;+&quot;Please specify a tiddler name.&quot;, tiddlerName);
			}

			// tiddlerName is either null (user canceled) or a name that is not yet in the store.
			if (tiddlerName) {
				var body = &quot;&lt;&lt;formTiddler [[&quot;+formTemplateName+&quot;]]&gt;&gt;&quot;;
				var tags = [];
				store.saveTiddler(tiddlerName,tiddlerName,body,config.options.txtUserName,new Date(),tags);
				story.displayTiddler(null,tiddlerName,1);
			}
		}

		createTiddlyButton(place,buttonLabel,buttonLabel,onClick);
    }
}

//}}}


/***
!Licence and Copyright
Copyright (c) abego Software ~GmbH, 2005 ([[www.abego-software.de|http://www.abego-software.de]])

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of abego Software nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
***/
</pre>
</div>
<div title="Get a comma separated list of all systemConfig tiddlers" modifier="UdoBorkowski" created="200511211022" tags="ForEachTiddlerMacro indexVariableExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where
 'tiddler.tags.contains(&quot;systemConfig&quot;)'
 write
 '((index == 0) ? &quot;&quot; : &quot;, &quot;)+&quot;[[&quot;+tiddler.title+&quot;]]&quot;'
&gt;&gt;
}}}
''//Explaination//''
The initial idea to accomplish the task is use a write parameter list this: {{{&quot;[[&quot;+tiddler.name+&quot;]], &quot;}. But to avoid that a comma is appended after the final tiddler the write parameter is a little bit more complex and refers to the build-in variable {{index}}.

''//Result://''
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;systemConfig&quot;)'
 write
 '((index == 0) ? &quot;&quot; : &quot;, &quot;)+&quot;[[&quot;+tiddler.title+&quot;]]&quot;'
&gt;&gt;


See Also ForEachTiddlerExamples.</pre>
</div>
<div title="How Tiddlers are found" modifier="YourName" modified="200907150742" created="200702081013" tags="Documentation IncludePlugin" changecount="1">
<pre>When you specify a link to a tiddler a tiddler with that title is searched at the following locations:
* In the &quot;normal&quot; tiddlers of the main TiddlyWiki
* In the &quot;shadow&quot; tiddlers of the main TiddlyWiki
* In the &quot;normal&quot; tiddlers of all included TiddlyWikis, in the order of the include macros.&lt;&lt;br&gt;&gt;//(You may use [[The &quot;includeState&quot; Macro]] to check the order)//
The first tiddler found this way is used.

''Note:'' If two tiddlers in two TiddlyWikis have the same name, the one from the first TiddlyWiki is used, i.e. the other is &quot;hidden&quot;. The script &quot;[[List all hidden tiddlers of included TiddlyWikis]]&quot; can be used to detect hidden tiddlers.
</pre>
</div>
<div title="How to use the IncludePlugin" modifier="UdoBorkowski" modified="200710011048" created="200702081018" tags="Documentation IncludePlugin">
<pre>!Step 1: Get the Plugin
Import the IncludePlugin (from http://tiddlywiki.abego-software.de), e.g. using the ImportTiddlers, and make sure the &quot;systemConfig&quot; tag is defined. 
!Step 2: Include ~TiddlyWikis
To include TiddlyWikis add an „include“ macro into the tiddler „IncludeList“:
{{{
&lt;&lt;include &quot;shared/TiddlyWikiHelp.html&quot;&gt;&gt;
&lt;&lt;include &quot;journals/2007-01.html&quot;&gt;&gt;
}}}
For details see [[The &quot;include&quot; Macro]].

''Notes''
* You need to reload your TiddlyWiki after you added or changed any &quot;include&quot; macro in the &quot;IncludeList&quot; tiddler.
!Step 3: Access included Tiddlers
To access an included tiddler you just need to create a link to that tiddler (with the tiddler's title). If you click that link the included tiddler will be displayed. To &quot;find&quot; an included tiddler, just search for it with the standard search feature.

You only can edit included tiddlers in their &quot;original&quot; TiddlyWiki. Hence included Tiddlers are readonly in a &quot;main&quot; TiddlyWiki.


See also [[How Tiddlers are found]].

!Using the &quot;include&quot; macro without the &quot;IncludeList&quot; Tiddler
The {{{&lt;&lt;include ...&gt;&gt;}}} macro is typically used in the &quot;IncludeList&quot; (as described above). The TiddlyWikis listed in the &quot;IncludeList&quot; are included at TiddlyWiki startup.

But you may put the {{{&lt;&lt;include ...&gt;&gt;}}} macro in any tiddler. The include process starts when the tiddler containing the {{{&lt;&lt;include ...&gt;&gt;}}} macro is displayed (or after delayDuration milliseconds). This way you may include TiddlyWikis/Tiddlers &quot;on demand&quot;, i.e. the TiddlyWiki is only loaded when a certain tiddler is displayed.

When using the include macro in a tiddler different than the &quot;IncludeList&quot; you may want to use the &quot;hide: true&quot; parameter to avoid the include macro is displayed to the user.
</pre>
</div>
<div title="Imprint" modifier="UdoBorkowski" modified="200609152203" created="200609152159">
<pre>''abego Software ~GmbH''
Noppiusstr. 3
52062 Aachen
Germany

Phone: +49 241 966 14 96
Fax: +49 12120 259 077

Email: contact@abego-software.de
Web: http://www.abego-software.de

''Value added tax identification number:'' DE 238 253 950
''Trade Register:'' HRB Nr. 12672
''Registergericht:'' Amtsgericht Aachen

&quot;abego&quot; is a registered trademark of abego Software ~GmbH. The product names are used only to identify the products and may be registered brands of the relevant manufacturers.

''Copyright''
Copyright © 2004-2006 by abego Software ~GmbH
All rights reserved.

TiddlyWiki is Copyright © Osmosoft Limited 2004-2006
</pre>
</div>
<div title="InClauseExamples" modifier="UdoBorkowski" created="200512081449" tags="ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the inClause in the ForEachTiddlerMacro.

&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;inClauseExample&quot;)'
&gt;&gt;

See also ForEachTiddlerExamples.</pre>
</div>
<div title="IncludeList" modifier="UdoBorkowski" modified="200709280838" created="200709280818">
<pre>&lt;&lt;include &quot;Beta.html&quot;&gt;&gt;</pre>
</div>
<div title="IncludePlugin" modifier="UdoBorkowski" modified="200705010948" created="200702081145" tags="IncludePlugin systemConfig">
<pre>/***
|''Name:''|abego.IncludePlugin|
|''Version:''|1.0.1 (2007-04-30)|
|''Type:''|plugin|
|''Source:''|http://tiddlywiki.abego-software.de/#IncludePlugin|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Documentation:''|[[IncludePlugin Documentation|http://tiddlywiki.abego-software.de/#%5B%5BIncludePlugin%20Documentation%5D%5D]]|
|''Community:''|([[del.icio.us|http://del.icio.us/post?url=http://tiddlywiki.abego-software.de/index.html%23IncludePlugin]]) ([[Support|http://groups.google.com/group/TiddlyWiki]])|
|''Copyright:''|&amp;copy; 2007 [[abego Software|http://www.abego-software.de]]|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''~CoreVersion:''|2.1.3|
|''Browser:''|Firefox 1.5.0.9 or better; Internet Explorer 6.0|
***/
/***
This plugin's source code is compressed (and hidden). Use this [[link|http://tiddlywiki.abego-software.de/archive/IncludePlugin/Plugin-Include-src.1.0.0.js]] to get the readable source code.
***/
///%
if(!window.abego){window.abego={};}var invokeLater=function(_1,_2,_3){return abego.invokeLater?abego.invokeLater(_1,_2,_3):setTimeout(_1,_2);};abego.loadFile=function(_4,_5,_6){var _7=function(_8,_9,_a,_b,_c){return _8?_5(_a,_b,_9):_5(undefined,_b,_9,&quot;Error loading %0&quot;.format([_b]));};if(_4.search(/^((http(s)?)|(file)):/)!=0){if(_4.search(/^((.\:\\)|(\\\\)|(\/))/)==0){_4=&quot;file://&quot;+_4;}else{var _d=document.location.toString();var i=_d.lastIndexOf(&quot;/&quot;);_4=_d.substr(0,i+1)+_4;}_4=_4.replace(/\\/mg,&quot;/&quot;);}loadRemoteFile(_4,_7,_6);};abego.loadTiddlyWikiStore=function(_f,_10,_11,_12){var _13=function(_14,_15){if(_12){_12(_14,&quot;abego.loadTiddlyWikiStore&quot;,_15,_f,_11);}};var _16=function(_17,_18){var _19=_18.indexOf(startSaveArea);var _1a=_18.indexOf(&quot;&lt;!--POST-BODY-END--&quot;+&quot;&gt;&quot;);var _1b=_18.lastIndexOf(endSaveArea,_1a==-1?_18.length:_1a);if((_19==-1)||(_1b==-1)){return config.messages.invalidFileError.format([_f]);}var _1c=&quot;&lt;html&gt;&lt;body&gt;&quot;+_18.substring(_19,_1b+endSaveArea.length)+&quot;&lt;/body&gt;&lt;/html&gt;&quot;;var _1d=document.createElement(&quot;iframe&quot;);_1d.style.display=&quot;none&quot;;document.body.appendChild(_1d);var doc=_1d.document;if(_1d.contentDocument){doc=_1d.contentDocument;}else{if(_1d.contentWindow){doc=_1d.contentWindow.document;}}doc.open();doc.writeln(_1c);doc.close();var _1f=doc.getElementById(&quot;storeArea&quot;);_17.loadFromDiv(_1f,&quot;store&quot;);_1d.parentNode.removeChild(_1d);return null;};var _20=function(_21){_13(&quot;Error when loading %0&quot;.format([_f]),&quot;Failed&quot;);_10(undefined,_f,_11,_21);return _21;};var _22=function(_23){_13(&quot;Loaded %0&quot;.format([_f]),&quot;Done&quot;);_10(_23,_f,_11);return null;};var _24=function(_25,_26,_27,_28){if(_25===undefined){_20(_28);return;}_13(&quot;Processing %0&quot;.format([_f]),&quot;Processing&quot;);var _29=config.messages.invalidFileError;config.messages.invalidFileError=&quot;The file '%0' does not appear to be a valid TiddlyWiki file&quot;;try{var _2a=new TiddlyWiki();var _2b=_16(_2a,_25);if(_2b){_20(_2b);}else{_22(_2a);}}catch(ex){_20(exceptionText(ex));}finally{config.messages.invalidFileError=_29;}};_13(&quot;Start loading %0&quot;.format([_f]),&quot;Started&quot;);abego.loadFile(_f,_24,_11);};(function(){if(abego.TiddlyWikiIncluder){return;}var _2c=&quot;waiting&quot;;var _2d=&quot;loading&quot;;var _2e=1000;var _2f=-200;var _30=-100;var _31=-300;var _32;var _33=[];var _34={};var _35=[];var _36;var _37=[];var _38;var _39=function(){if(_32===undefined){_32=config.options.chkUseInclude===undefined||config.options.chkUseInclude;}return _32;};var _3a=function(url){return &quot;No include specified for %0&quot;.format([url]);};var _3c=function(){var _3d=_35;_35=[];if(_3d.length){for(var i=0;i&lt;_37.length;i++){_37[i](_3d);}}};var _3f;var _40=function(){if(_36!==undefined){clearInterval(_36);}_3f=0;var _41=function(){abego.TiddlyWikiIncluder.sendProgress(&quot;&quot;,&quot;&quot;,&quot;Done&quot;);};_36=setInterval(function(){_3f++;if(_3f&lt;=10){return;}clearInterval(_36);_36=undefined;abego.TiddlyWikiIncluder.sendProgress(&quot;Refreshing...&quot;,&quot;&quot;,&quot;&quot;);refreshDisplay();invokeLater(_41,0,_2f);},1);};var _42=function(_43){var _44;for(var i=0;i&lt;_33.length;i++){var _46=abego.TiddlyWikiIncluder.getStore(_33[i]);if(_46&amp;&amp;(_44=_43(_46,_33[i]))){return _44;}}};var _47=function(){if(!window.store){return invokeLater(_47,100);}var _48=store.fetchTiddler;store.fetchTiddler=function(_49){var t=_48.apply(this,arguments);if(t){return t;}if(config.shadowTiddlers[_49]!==undefined){return undefined;}if(_49==config.macros.newTiddler.title){return undefined;}return _42(function(_4b,url){var t=_4b.fetchTiddler(_49);if(t){t.includeURL=url;}return t;});};if(_33.length){_40();}};var _4e=function(){if(!window.store){return invokeLater(_4e,100);}var _4f=store.getTiddlerText(&quot;IncludeList&quot;);if(_4f){wikify(_4f,document.createElement(&quot;div&quot;));}};var _50=function(_51){var _52=function(){var _53=store.forEachTiddler;var _54=function(_55){var _56={};var _57;var _58=function(_59,_5a){if(_56[_59]){return;}_56[_59]=1;if(_57){_5a.includeURL=_57;}_55.apply(this,arguments);};_53.call(store,_58);for(var n in config.shadowTiddlers){_56[n]=1;}_56[config.macros.newTiddler.title]=1;_42(function(_5c,url){_57=url;_5c.forEachTiddler(_58);});};store.forEachTiddler=_54;try{return _51.apply(this,arguments);}finally{store.forEachTiddler=_53;}};return _52;};var _5e=function(_5f,_60){return _5f[_60]=_50(_5f[_60]);};abego.TiddlyWikiIncluder={};abego.TiddlyWikiIncluder.setProgressFunction=function(_61){_38=_61;};abego.TiddlyWikiIncluder.getProgressFunction=function(_62){return _38;};abego.TiddlyWikiIncluder.sendProgress=function(_63,_64,_65){if(_38){_38.apply(this,arguments);}};abego.TiddlyWikiIncluder.onError=function(url,_67){displayMessage(&quot;Error when including '%0':\n%1&quot;.format([url,_67]));};abego.TiddlyWikiIncluder.hasPendingIncludes=function(){for(var i=0;i&lt;_33.length;i++){var _69=abego.TiddlyWikiIncluder.getState(_33[i]);if(_69==_2c||_69==_2d){return true;}}return false;};abego.TiddlyWikiIncluder.getIncludes=function(){return _33.slice();};abego.TiddlyWikiIncluder.getState=function(url){var s=_34[url];if(!s){return _3a(url);}return typeof s==&quot;string&quot;?s:null;};abego.TiddlyWikiIncluder.getStore=function(url){var s=_34[url];if(!s){return _3a(url);}return s instanceof TiddlyWiki?s:null;};abego.TiddlyWikiIncluder.include=function(url,_6f){if(!_39()||_34[url]){return;}var _70=this;_33.push(url);_34[url]=_2c;var _71=function(_72,_73,_74,_75){if(_72===undefined){_34[url]=_75;_70.onError(url,_75);return;}_34[url]=_72;_35.push(url);invokeLater(_3c);};var _76=function(){_34[url]=_2d;abego.loadTiddlyWikiStore(url,_71,null,_38);};if(_6f){invokeLater(_76,_6f);}else{_76();}};abego.TiddlyWikiIncluder.forReallyEachTiddler=function(_77){var _78=function(){store.forEachTiddler(_77);};_50(_78).call(store);};abego.TiddlyWikiIncluder.getFunctionUsingForReallyEachTiddler=_50;abego.TiddlyWikiIncluder.useForReallyEachTiddler=_5e;abego.TiddlyWikiIncluder.addListener=function(_79){_37.push(_79);};abego.TiddlyWikiIncluder.addListener(_40);if(config.options.chkUseInclude===undefined){config.options.chkUseInclude=true;}config.shadowTiddlers.AdvancedOptions+=&quot;\n&lt;&lt;option chkUseInclude&gt;&gt; Include ~TiddlyWikis (IncludeList | IncludeState | [[help|http://tiddlywiki.abego-software.de/#%5B%5BIncludePlugin%20Documentation%5D%5D]])\n^^(Reload this ~TiddlyWiki to make changes become effective)^^&quot;;config.shadowTiddlers.IncludeState=&quot;&lt;&lt;includeState&gt;&gt;&quot;;var _7a=function(e,_7c,_7d){if(!anim||!abego.ShowAnimation){e.style.display=_7c?&quot;block&quot;:&quot;none&quot;;return;}anim.startAnimating(new abego.ShowAnimation(e,_7c,_7d));};abego.TiddlyWikiIncluder.getDefaultProgressFunction=function(){setStylesheet(&quot;.includeProgressState{\n&quot;+&quot;background-color:#FFCC00;\n&quot;+&quot;position:absolute;\n&quot;+&quot;right:0.2em;\n&quot;+&quot;top:0.2em;\n&quot;+&quot;width:7em;\n&quot;+&quot;padding-left:0.2em;\n&quot;+&quot;padding-right:0.2em\n&quot;+&quot;}\n&quot;,&quot;abegoInclude&quot;);var _7e=function(){var e=document.createElement(&quot;div&quot;);e.className=&quot;includeProgressState&quot;;e.style.display=&quot;none&quot;;document.body.appendChild(e);return e;};var _80=_7e();var _81=function(_82){removeChildren(_80);createTiddlyText(_80,_82);_7a(_80,true,0);};var _83=function(){invokeLater(function(){_7a(_80,false,_2e);},100,_30);};var _84=function(_85,_86,_87,url,_89){if(_87==&quot;Done&quot;||_87==&quot;Failed&quot;){_83();return;}if(_86==&quot;abego.loadTiddlyWikiStore&quot;){_3f=0;if(_87==&quot;Processing&quot;){_81(&quot;Including...&quot;);}}else{_81(_85);}};return _84;};abego.TiddlyWikiIncluder.setProgressFunction(abego.TiddlyWikiIncluder.getDefaultProgressFunction());config.macros.include={};config.macros.include.handler=function(_8a,_8b,_8c,_8d,_8e,_8f){_8c=_8e.parseParams(&quot;url&quot;,null,true,false,true);var _90=parseInt(getParam(_8c,&quot;delay&quot;,&quot;0&quot;));var _91=_8c[0][&quot;url&quot;];var _92=getFlag(_8c,&quot;hide&quot;,false);if(!_92){createTiddlyText(createTiddlyElement(_8a,&quot;code&quot;),_8d.source.substring(_8d.matchStart,_8d.nextMatch));}for(var i=0;_91&amp;&amp;i&lt;_91.length;i++){abego.TiddlyWikiIncluder.include(_91[i],_90);}};config.macros.includeState={};config.macros.includeState.handler=function(_94,_95,_96,_97,_98,_99){var _9a=function(){var s=&quot;&quot;;var _9c=abego.TiddlyWikiIncluder.getIncludes();if(!_9c.length){return &quot;{{noIncludes{\nNo includes or 'include' is disabled (see AdvancedOptions)\n}}}\n&quot;;}s+=&quot;|!Address|!State|\n&quot;;for(var i=0;i&lt;_9c.length;i++){var inc=_9c[i];s+=&quot;|{{{&quot;+inc+&quot;}}}|&quot;;var t=abego.TiddlyWikiIncluder.getState(inc);s+=t?&quot;{{{&quot;+t+&quot;}}}&quot;:&quot;included&quot;;s+=&quot;|\n&quot;;}s+=&quot;|includeState|k\n&quot;;return s;};var _a0=function(){removeChildren(div);wikify(_9a(),div);if(abego.TiddlyWikiIncluder.hasPendingIncludes()){invokeLater(_a0,500,_31);}};var div=createTiddlyElement(_94,&quot;div&quot;);invokeLater(_a0,0,_31);};var _a2=Tiddler.prototype.isReadOnly;Tiddler.prototype.isReadOnly=function(){return _a2.apply(this,arguments)||this.isIncluded();};Tiddler.prototype.isIncluded=function(){return this.includeURL!=undefined;};Tiddler.prototype.getIncludeURL=function(){return this.includeURL;};var _a3={getMissingLinks:1,getOrphans:1,getTags:1,reverseLookup:1,updateTiddlers:1};for(var n in _a3){_5e(TiddlyWiki.prototype,n);}var _a5=function(){if(abego.IntelliTagger){_5e(abego.IntelliTagger,&quot;assistTagging&quot;);}};var _a6=function(){if(config.macros.forEachTiddler){_5e(config.macros.forEachTiddler,&quot;findTiddlers&quot;);}};_47();invokeLater(_4e,100);invokeLater(_a5,100);invokeLater(_a6,100);})();
//%/
</pre>
</div>
<div title="IncludePlugin Documentation" modifier="UdoBorkowski" modified="200710061036" created="200702081122" tags="Documentation IncludePlugin">
<pre>!About the ~IncludePlugin
Include other ~TiddlyWikis in your (main) TiddlyWiki, link to included tiddlers, view them in your (main) TiddlyWiki, without opening another TiddlyWiki. Even „search“ looks for included tiddlers. 

A great way to share tiddlers, to speed up &quot;save changes&quot; and to keep your ~TiddlyWikis small.
!Smaller ~TiddlyWikis
Other than „imported“ tiddlers, included tiddlers are not copied into your main ~TiddlyWiki. This keeps your individual ~TiddlyWikis small. 

Since your TiddlyWikis will become smaller (if you reorganize your TiddlyWikis using the IncludePlugin) also &quot;save changes&quot; becomes faster. You may even consider switching on &quot;AutoSave&quot; or &quot;SaveBackups&quot; again.

See also: [[Including even smaller TiddlyWiki Files]]

!Sharing ~TiddlyWikis
You may include one ~TiddlyWiki in several other ~TiddlyWikis. Changes you make to this shared ~TiddlyWiki are automatically reflected the next time you open the other ~TiddlyWikis, without any extra „import“ step or so.

''Examples''
* you may want to have a single „~TiddlyWikiHelp“ ~TiddlyWiki that you include in all your ~TiddlyWikis. So you can quickly find help information without looking into other files, and without blowing up your ~TiddlyWikis.
* You &quot;archive&quot; your old journal tiddlers into an extra TiddlyWiki (e.g. one per month) and just include the archived journals in you &quot;current month diary/blog&quot;. This way you still have access to the old information (e.g. to reference historic information) but you avoid your diary/blog will get to large.
* ...

See also:
* [[How to use the IncludePlugin]]
* [[How Tiddlers are found]]
* [[IncludePlugin Options]]
* [[The &quot;include&quot; Macro]]
* [[The &quot;includeState&quot; Macro]]
* [[Programming with the IncludePlugin]]
* [[Troubleshooting the IncludePlugin]]</pre>
</div>
<div title="IncludePlugin Options" modifier="UdoBorkowski" modified="200702081203" created="200702081155" tags="Documentation IncludePlugin">
<pre>Using the AdvancedOptions page you have an easy way to configure the IncludePlugin options. 

You will find a section like this:
{{optionsBlock{
&lt;&lt;option chkUseInclude&gt;&gt; Include ~TiddlyWikis (IncludeList | IncludeState | [[help|http://tiddlywiki.abego-software.de/#%5B%5BIncludePlugin%20Documentation%5D%5D]])
^^(Reload this ~TiddlyWiki to make changes become effective)^^
}}}
* By default the IncludePlugin is enabled. If you uncheck the checkbox external TiddlyWikis are not included.
* The IncludeList is the preferred place for your {{{&lt;&lt;include ...&gt;&gt;}}} lines.
* The IncludeState page gives you can an overview what TiddlyWikis are included etc.
* The help directs you to the online documentation of the Include Plugin.
</pre>
</div>
<div title="Including even smaller TiddlyWiki Files" modifier="UdoBorkowski" created="200710061037" tags="Advanced Documentation IncludePlugin">
<pre>''Note for the advanced user:''

The IncludePlugin expects the file to be included to be in the &quot;TiddlyWiki format&quot;, so including every valid TiddlyWiki file is fine.

In addition you may &quot;strip down&quot; your TiddlyWiki file significantly, e.g. by removing the JavaScript code etc., and the IncludePlugin will still be able to include it. This &quot;minimal&quot; file format is called the &quot;TiddlyWiki Pure Store Format&quot;. 

See http://www.abego-software.de/references/TiddlyWikiPureStoreFormat.html for more details.
</pre>
</div>
<div title="InlineJavascriptPlugin" modifier="UdoBorkowski" modified="200703120725" created="200512281148" tags="Plugin basic systemConfig">
<pre>/***
|Name|InlineJavascriptPlugin|
|Source|http://www.TiddlyTools.com/#InlineJavascriptPlugin|
|Version|1.6.0|
|Author|Eric Shulman - ELS Design Studios|
|License|http://www.TiddlyTools.com/#LegalStatements &lt;&lt;br&gt;&gt;and [[Creative Commons Attribution-ShareAlike 2.5 License|http://creativecommons.org/licenses/by-sa/2.5/]]|
|~CoreVersion|2.1|
|Type|plugin|
|Requires||
|Overrides||
|Description|Insert Javascript executable code directly into your tiddler content.|

''Call directly into TW core utility routines, define new functions, calculate values, add dynamically-generated TiddlyWiki-formatted output'' into tiddler content, or perform any other programmatic actions each time the tiddler is rendered.
!!!!!Usage
&lt;&lt;&lt;
When installed, this plugin adds new wiki syntax for surrounding tiddler content with {{{&lt;script&gt;}}} and {{{&lt;/script&gt;}}} markers, so that it can be treated as embedded javascript and executed each time the tiddler is rendered.

''Deferred execution from an 'onClick' link''
By including a {{{label=&quot;...&quot;}}} parameter in the initial {{{&lt;script&gt;}}} marker, the plugin will create a link to an 'onclick' script that will only be executed when that specific link is clicked, rather than running the script each time the tiddler is rendered.  You may also include a {{{title=&quot;...&quot;}}} parameter to specify the 'tooltip' text that will appear whenever the mouse is moved over the onClick link text

''External script source files:''
You can also load javascript from an external source URL, by including a src=&quot;...&quot; parameter in the initial {{{&lt;script&gt;}}} marker (e.g., {{{&lt;script src=&quot;demo.js&quot;&gt;&lt;/script&gt;}}}).  This is particularly useful when incorporating third-party javascript libraries for use in custom extensions and plugins.  The 'foreign' javascript code remains isolated in a separate file that can be easily replaced whenever an updated library file becomes available.

''Display script source in tiddler output''
By including the keyword parameter &quot;show&quot;, in the initial {{{&lt;script&gt;}}} marker, the plugin will include the script source code in the output that it displays in the tiddler.

''Defining javascript functions and libraries:''
Although the external javascript file is loaded while the tiddler content is being rendered, any functions it defines will not be available for use until //after// the rendering has been completed.  Thus, you cannot load a library and //immediately// use it's functions within the same tiddler.  However, once that tiddler has been loaded, the library functions can be freely used in any tiddler (even the one in which it was initially loaded).

To ensure that your javascript functions are always available when needed, you should load the libraries from a tiddler that will be rendered as soon as your TiddlyWiki document is opened.  For example, you could put your {{{&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;}}} syntax into a tiddler called LoadScripts, and then add {{{&lt;&lt;tiddler LoadScripts&gt;&gt;}}} in your MainMenu tiddler.

Since the MainMenu is always rendered immediately upon opening your document, the library will always be loaded before any other tiddlers that rely upon the functions it defines.  Loading an external javascript library does not produce any direct output in the tiddler, so these definitions should have no impact on the appearance of your MainMenu.

''Creating dynamic tiddler content''
An important difference between this implementation of embedded scripting and conventional embedded javascript techniques for web pages is the method used to produce output that is dynamically inserted into the document:
* In a typical web document, you use the document.write() function to output text sequences (often containing HTML tags) that are then rendered when the entire document is first loaded into the browser window.
* However, in a ~TiddlyWiki document, tiddlers (and other DOM elements) are created, deleted, and rendered &quot;on-the-fly&quot;, so writing directly to the global 'document' object does not produce the results you want (i.e., replacing the embedded script within the tiddler content), and completely replaces the entire ~TiddlyWiki document in your browser window.
* To allow these scripts to work unmodified, the plugin automatically converts all occurences of document.write() so that the output is inserted into the tiddler content instead of replacing the entire ~TiddlyWiki document.

If your script does not use document.write() to create dynamically embedded content within a tiddler, your javascript can, as an alternative, explicitly return a text value that the plugin can then pass through the wikify() rendering engine to insert into the tiddler display.  For example, using {{{return &quot;thistext&quot;}}} will produce the same output as {{{document.write(&quot;thistext&quot;)}}}.

//Note: your script code is automatically 'wrapped' inside a function, {{{_out()}}}, so that any return value you provide can be correctly handled by the plugin and inserted into the tiddler.  To avoid unpredictable results (and possibly fatal execution errors), this function should never be redefined or called from ''within'' your script code.//

''Accessing the ~TiddlyWiki DOM''
The plugin provides one pre-defined variable, 'place', that is passed in to your javascript code so that it can have direct access to the containing DOM element into which the tiddler output is currently being rendered.

Access to this DOM element allows you to create scripts that can:
* vary their actions based upon the specific location in which they are embedded
* access 'tiddler-relative' information (use findContainingTiddler(place))
* perform direct DOM manipulations (when returning wikified text is not enough)
&lt;&lt;&lt;
!!!!!Examples
&lt;&lt;&lt;
an &quot;alert&quot; message box:
&gt;&lt;script show&gt;
	// uncomment this: alert('InlineJavascriptPlugin: this is a demonstration message');
&lt;/script&gt;
dynamic output:
&gt;&lt;script show&gt;
	return (new Date()).toString();
&lt;/script&gt;
wikified dynamic output:
&gt;&lt;script show&gt;
	return &quot;link to current user: [[&quot;+config.options.txtUserName+&quot;]]&quot;;
&lt;/script&gt;
dynamic output using 'place' to get size information for current tiddler:
&gt;&lt;script show&gt;
   if (!window.story) window.story=window;
   var title=story.findContainingTiddler(place).id.substr(7);
   return title+&quot; is using &quot;+store.getTiddlerText(title).length+&quot; bytes&quot;;
&lt;/script&gt;
creating an 'onclick' button/link that runs a script:
&gt;&lt;script label=&quot;click here&quot; title=&quot;clicking this link will show an 'alert' box&quot; show&gt;
   if (!window.story) window.story=window;
   alert(&quot;Hello World!\nlinktext='&quot;+place.firstChild.data+&quot;'\ntiddler='&quot;+story.findContainingTiddler(place).id.substr(7)+&quot;'&quot;);
&lt;/script&gt;
loading a script from a source url:
&gt;http://www.TiddlyTools.com/demo.js contains:
&gt;&gt;{{{function demo() { alert('this output is from demo(), defined in demo.js') } }}}
&gt;&gt;{{{alert('InlineJavascriptPlugin: demo.js has been loaded'); }}}
&gt;&lt;script src=&quot;demo.js&quot; show&gt;
	return &quot;loading demo.js...&quot;
&lt;/script&gt;
&gt;&lt;script label=&quot;click to execute demo() function&quot; show&gt;
	demo()
&lt;/script&gt;
&lt;&lt;&lt;
!!!!!Installation
&lt;&lt;&lt;
import (or copy/paste) the following tiddlers into your document:
''InlineJavascriptPlugin'' (tagged with &lt;&lt;tag systemConfig&gt;&gt;)
&lt;&lt;&lt;
!!!!!Revision History
&lt;&lt;&lt;
''2007.02.19 [1.6.0]'' added support for title=&quot;...&quot; to specify mouseover tooltip when using an onclick (label=&quot;...&quot;) script
''2006.10.16 [1.5.2]'' add newline before closing '}' in 'function out_' wrapper.  Fixes error caused when last line of script is a comment.
''2006.06.01 [1.5.1]'' when calling wikify() on script return value, pass hightlightRegExp and tiddler params so macros that rely on these values can render properly
''2006.04.19 [1.5.0]'' added 'show' parameter to force display of javascript source code in tiddler output
''2006.01.05 [1.4.0]'' added support 'onclick' scripts.  When label=&quot;...&quot; param is present, a button/link is created using the indicated label text, and the script is only executed when the button/link is clicked.  'place' value is set to match the clicked button/link element.
''2005.12.13 [1.3.1]'' when catching eval error in IE, e.description contains the error text, instead of e.toString().  Fixed error reporting so IE shows the correct response text.  Based on a suggestion by UdoBorkowski
''2005.11.09 [1.3.0]'' for 'inline' scripts (i.e., not scripts loaded with src=&quot;...&quot;), automatically replace calls to 'document.write()' with 'place.innerHTML+=' so script output is directed into tiddler content.  Based on a suggestion by BradleyMeck
''2005.11.08 [1.2.0]'' handle loading of javascript from an external URL via src=&quot;...&quot; syntax
''2005.11.08 [1.1.0]'' pass 'place' param into scripts to provide direct DOM access 
''2005.11.08 [1.0.0]'' initial release
&lt;&lt;&lt;
!!!!!Credits
&lt;&lt;&lt;
This feature was developed by EricShulman from [[ELS Design Studios|http:/www.elsdesign.com]]
&lt;&lt;&lt;
!!!!!Code
***/
//{{{
version.extensions.inlineJavascript= {major: 1, minor: 6, revision: 0, date: new Date(2007,2,19)};

config.formatters.push( {
	name: &quot;inlineJavascript&quot;,
	match: &quot;\\&lt;script&quot;,
	lookahead: &quot;\\&lt;script(?: src=\\\&quot;((?:.|\\n)*?)\\\&quot;)?(?: label=\\\&quot;((?:.|\\n)*?)\\\&quot;)?(?: title=\\\&quot;((?:.|\\n)*?)\\\&quot;)?( show)?\\&gt;((?:.|\\n)*?)\\&lt;/script\\&gt;&quot;,

	handler: function(w) {
		var lookaheadRegExp = new RegExp(this.lookahead,&quot;mg&quot;);
		lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = lookaheadRegExp.exec(w.source)
		if(lookaheadMatch &amp;&amp; lookaheadMatch.index == w.matchStart) {
			if (lookaheadMatch[1]) { // load a script library
				// make script tag, set src, add to body to execute, then remove for cleanup
				var script = document.createElement(&quot;script&quot;); script.src = lookaheadMatch[1];
				document.body.appendChild(script); document.body.removeChild(script);
			}
			if (lookaheadMatch[5]) { // there is script code
				if (lookaheadMatch[4]) // show inline script code in tiddler output
					wikify(&quot;{{{\n&quot;+lookaheadMatch[0]+&quot;\n}}}\n&quot;,w.output);
				if (lookaheadMatch[2]) { // create a link to an 'onclick' script
					// add a link, define click handler, save code in link (pass 'place'), set link attributes
					var link=createTiddlyElement(w.output,&quot;a&quot;,null,&quot;tiddlyLinkExisting&quot;,lookaheadMatch[2]);
					link.onclick=function(){try{return(eval(this.code))}catch(e){alert(e.description?e.description:e.toString())}}
					link.code=&quot;function _out(place){&quot;+lookaheadMatch[5]+&quot;\n};_out(this);&quot;
					link.setAttribute(&quot;title&quot;,lookaheadMatch[3]?lookaheadMatch[3]:&quot;&quot;);
					link.setAttribute(&quot;href&quot;,&quot;javascript:;&quot;);
					link.style.cursor=&quot;pointer&quot;;
				}
				else { // run inline script code
					var code=&quot;function _out(place){&quot;+lookaheadMatch[5]+&quot;\n};_out(w.output);&quot;
					code=code.replace(/document.write\(/gi,'place.innerHTML+=(');
					try { var out = eval(code); } catch(e) { out = e.description?e.description:e.toString(); }
					if (out &amp;&amp; out.length) wikify(out,w.output,w.highlightRegExp,w.tiddler);
				}
			}
			w.nextMatch = lookaheadMatch.index + lookaheadMatch[0].length;
		}
	}
} )
//}}}
</pre>
</div>
<div title="Installing Plugins" modifier="UdoBorkowski" modified="200610122134" created="200602251028">
<pre>[[Plugins|http://tiddlywiki.com/#Plugins]] are tiddlers that extend the standard functionality of TiddlyWiki, e.g. they may add new macros or formattings etc. A plugin tiddler contains JavaScript code and must be tagged with &lt;&lt;tag systemConfig&gt;&gt; to be activated .

''How to install a plugin'' 
* If you haven't already done so, follow the instructions in [[Download TiddlyWiki]] to get your own local copy of TiddlyWiki.
* Open the ImportTiddlers tiddler
* Enter the URL of the site containing the plugin (typically the plugin author's site) and press the &quot;fetch&quot; button.
** E.g. you may enter {{{http://danielbaird.com/tiddlywinks/}}} if you would like to get ~DanielBaird's Minesweeper plugin
* A table will appear with all tiddlers of the given site. In that table check the plugin tiddler you want to retrieve (e.g. the &quot;Minesweeper&quot; tiddler) and select &quot;Import these tiddlers&quot; from the field below the table.
* //(The plugin tiddler is now loaded into your TiddlyWiki.)//
* If the imported tiddler has not yet the &quot;systemConfig&quot; tag you should add it now. (Take care to use the exact spelling, with the capital &quot;C&quot;)
* Save your TiddyWiki by pressing the &quot;SaveChanges&quot; button.
* Reload your TiddlyWiki in the browser.
The plugin is now installed and available for use.

''Finding Plugins''

See [[Plugins|http://tiddlywiki.com/#Plugins]] for a list of some site providing plugins for TiddlyWiki, or have a look at the plugins listed at http://del.icio.us/TiddlyWikiPlugin.

BTW:  If you would like to writing your own plugins see [[TiddlyWiki/Dev|http://www.tiddlywiki.com/dev/]] for more information. 

</pre>
</div>
<div title="IntelliTaggerPlugin" modifier="UdoBorkowski" modified="200707251213" created="200604260721" tags="systemConfig">
<pre>/***
|''Name:''|IntelliTaggerPlugin|
|''Version:''|1.0.2 (2007-07-25)|
|''Type:''|plugin|
|''Source:''|http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Documentation:''|[[IntelliTaggerPlugin Documentation]]|
|''~SourceCode:''|[[IntelliTaggerPlugin SourceCode]]|
|''Licence:''|[[BSD open source license (abego Software)]]|
|''~CoreVersion:''|2.0.8|
|''Browser:''|Firefox 1.5.0.2 or better|
***/
/***
!Version History
* 1.0.2 (2007-07-25): 
** Feature: &quot;Return&quot; key may be used to accept first tag suggestion (beside &quot;Alt-1&quot;)
** Bugfix: Keyboard shortcuts (Alt+3 etc.) shifted
* 1.0.1 (2007-05-18): Improvement: Speedup when using TiddlyWikis with many tags
* 1.0.0 (2006-04-26): Initial release

***/
// /%
if(!version.extensions.IntelliTaggerPlugin){if(!window.abego){window.abego={};}if(!abego.internal){abego.internal={};}abego.alertAndThrow=function(s){alert(s);throw s;};if(version.major&lt;2){abego.alertAndThrow(&quot;Use TiddlyWiki 2.0.8 or better to run the IntelliTagger Plugin.&quot;);}version.extensions.IntelliTaggerPlugin={major:1,minor:0,revision:2,date:new Date(2007,6,25),type:&quot;plugin&quot;,source:&quot;http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin&quot;,documentation:&quot;[[IntelliTaggerPlugin Documentation]]&quot;,sourcecode:&quot;[[IntelliTaggerPlugin SourceCode]]&quot;,author:&quot;Udo Borkowski (ub [at] abego-software [dot] de)&quot;,licence:&quot;[[BSD open source license (abego Software)]]&quot;,tiddlywiki:&quot;Version 2.0.8 or better&quot;,browser:&quot;Firefox 1.5.0.2 or better&quot;};abego.createEllipsis=function(_2){var e=createTiddlyElement(_2,&quot;span&quot;);e.innerHTML=&quot;&amp;hellip;&quot;;};abego.isPopupOpen=function(_4){return _4&amp;&amp;_4.parentNode==document.body;};abego.openAsPopup=function(_5){if(_5.parentNode!=document.body){document.body.appendChild(_5);}};abego.closePopup=function(_6){if(abego.isPopupOpen(_6)){document.body.removeChild(_6);}};abego.getWindowRect=function(){return {left:findScrollX(),top:findScrollY(),height:findWindowHeight(),width:findWindowWidth()};};abego.moveElement=function(_7,_8,_9){_7.style.left=_8+&quot;px&quot;;_7.style.top=_9+&quot;px&quot;;};abego.centerOnWindow=function(_a){if(_a.style.position!=&quot;absolute&quot;){throw &quot;abego.centerOnWindow: element must have absolute position&quot;;}var _b=abego.getWindowRect();abego.moveElement(_a,_b.left+(_b.width-_a.offsetWidth)/2,_b.top+(_b.height-_a.offsetHeight)/2);};abego.isDescendantOrSelf=function(_c,e){while(e){if(_c==e){return true;}e=e.parentNode;}return false;};abego.toSet=function(_e){var _f={};for(var i=0;i&lt;_e.length;i++){_f[_e[i]]=true;}return _f;};abego.filterStrings=function(_11,_12,_13){var _14=[];for(var i=0;i&lt;_11.length&amp;&amp;(_13===undefined||_14.length&lt;_13);i++){var s=_11[i];if(s.match(_12)){_14.push(s);}}return _14;};abego.arraysAreEqual=function(a,b){if(!a){return !b;}if(!b){return false;}var n=a.length;if(n!=b.length){return false;}for(var i=0;i&lt;n;i++){if(a[i]!=b[i]){return false;}}return true;};abego.moveBelowAndClip=function(_1b,_1c){if(!_1c){return;}var _1d=findPosX(_1c);var _1e=findPosY(_1c);var _1f=_1c.offsetHeight;var _20=_1d;var _21=_1e+_1f;var _22=findWindowWidth();if(_22&lt;_1b.offsetWidth){_1b.style.width=(_22-100)+&quot;px&quot;;}var _23=_1b.offsetWidth;if(_20+_23&gt;_22){_20=_22-_23-30;}if(_20&lt;0){_20=0;}_1b.style.left=_20+&quot;px&quot;;_1b.style.top=_21+&quot;px&quot;;_1b.style.display=&quot;block&quot;;};abego.compareStrings=function(a,b){return (a==b)?0:(a&lt;b)?-1:1;};abego.sortIgnoreCase=function(arr){var _27=[];var n=arr.length;for(var i=0;i&lt;n;i++){var s=arr[i];_27.push([s.toString().toLowerCase(),s]);}_27.sort(function(a,b){return (a[0]==b[0])?0:(a[0]&lt;b[0])?-1:1;});for(i=0;i&lt;n;i++){arr[i]=_27[i][1];}};abego.getTiddlerField=function(_2d,_2e,_2f){var _30=document.getElementById(_2d.idPrefix+_2e);var e=null;if(_30!=null){var _32=_30.getElementsByTagName(&quot;*&quot;);for(var t=0;t&lt;_32.length;t++){var c=_32[t];if(c.tagName.toLowerCase()==&quot;input&quot;||c.tagName.toLowerCase()==&quot;textarea&quot;){if(!e){e=c;}if(c.getAttribute(&quot;edit&quot;)==_2f){e=c;}}}}return e;};abego.setRange=function(_35,_36,end){if(_35.setSelectionRange){_35.setSelectionRange(_36,end);var max=0+_35.scrollHeight;var len=_35.textLength;var top=max*_36/len,bot=max*end/len;_35.scrollTop=Math.min(top,(bot+top-_35.clientHeight)/2);}else{if(_35.createTextRange!=undefined){var _3b=_35.createTextRange();_3b.collapse();_3b.moveEnd(&quot;character&quot;,end);_3b.moveStart(&quot;character&quot;,_36);_3b.select();}else{_35.select();}}};abego.internal.TagManager=function(){var _3c=null;var _3d=function(){if(_3c){return;}_3c={};store.forEachTiddler(function(_3e,_3f){for(var i=0;i&lt;_3f.tags.length;i++){var tag=_3f.tags[i];var _42=_3c[tag];if(!_42){_42=_3c[tag]={count:0,tiddlers:{}};}_42.tiddlers[_3f.title]=true;_42.count+=1;}});};var _43=TiddlyWiki.prototype.saveTiddler;TiddlyWiki.prototype.saveTiddler=function(_44,_45,_46,_47,_48,_49){var _4a=this.fetchTiddler(_44);var _4b=_4a?_4a.tags:[];var _4c=(typeof _49==&quot;string&quot;)?_49.readBracketedList():_49;_43.apply(this,arguments);if(!abego.arraysAreEqual(_4b,_4c)){abego.internal.getTagManager().reset();}};var _4d=TiddlyWiki.prototype.removeTiddler;TiddlyWiki.prototype.removeTiddler=function(_4e){var _4f=this.fetchTiddler(_4e);var _50=_4f&amp;&amp;_4f.tags.length&gt;0;_4d.apply(this,arguments);if(_50){abego.internal.getTagManager().reset();}};this.reset=function(){_3c=null;};this.getTiddlersWithTag=function(tag){_3d();var _52=_3c[tag];return _52?_52.tiddlers:null;};this.getAllTags=function(_53){_3d();var _54=[];for(var i in _3c){_54.push(i);}for(i=0;_53&amp;&amp;i&lt;_53.length;i++){_54.pushUnique(_53[i],true);}abego.sortIgnoreCase(_54);return _54;};this.getTagInfos=function(){_3d();var _56=[];for(var _57 in _3c){_56.push([_57,_3c[_57]]);}return _56;};var _58=function(a,b){var a1=a[1];var b1=b[1];var d=b[1].count-a[1].count;return d!=0?d:abego.compareStrings(a[0].toLowerCase(),b[0].toLowerCase());};this.getSortedTagInfos=function(){_3d();var _5e=this.getTagInfos();_5e.sort(_58);return _5e;};this.getPartnerRankedTags=function(_5f){var _60={};for(var i=0;i&lt;_5f.length;i++){var _62=this.getTiddlersWithTag(_5f[i]);for(var _63 in _62){var _64=store.getTiddler(_63);if(!(_64 instanceof Tiddler)){continue;}for(var j=0;j&lt;_64.tags.length;j++){var tag=_64.tags[j];var c=_60[tag];_60[tag]=c?c+1:1;}}}var _68=abego.toSet(_5f);var _69=[];for(var n in _60){if(!_68[n]){_69.push(n);}}_69.sort(function(a,b){var d=_60[b]-_60[a];return d!=0?d:abego.compareStrings(a.toLowerCase(),b.toLowerCase());});return _69;};};abego.internal.getTagManager=function(){if(!abego.internal.gTagManager){abego.internal.gTagManager=new abego.internal.TagManager();}return abego.internal.gTagManager;};(function(){var _6e=2;var _6f=1;var _70=30;var _71;var _72;var _73;var _74;var _75;var _76;if(!abego.IntelliTagger){abego.IntelliTagger={};}var _77=function(){return _72;};var _78=function(tag){return _75[tag];};var _7a=function(s){var i=s.lastIndexOf(&quot; &quot;);return (i&gt;=0)?s.substr(0,i):&quot;&quot;;};var _7d=function(_7e){var s=_7e.value;var len=s.length;return (len&gt;0&amp;&amp;s[len-1]!=&quot; &quot;);};var _81=function(_82){var s=_82.value;var len=s.length;if(len&gt;0&amp;&amp;s[len-1]!=&quot; &quot;){_82.value+=&quot; &quot;;}};var _85=function(tag,_87,_88){if(_7d(_87)){_87.value=_7a(_87.value);}story.setTiddlerTag(_88.title,tag,0);_81(_87);abego.IntelliTagger.assistTagging(_87,_88);};var _89=function(n){if(_76&amp;&amp;_76.length&gt;n){return _76[n];}return (_74&amp;&amp;_74.length&gt;n)?_74[n]:null;};var _8b=function(n,_8d,_8e){var _8f=_89(n);if(_8f){_85(_8f,_8d,_8e);}};var _90=function(_91){var pos=_91.value.lastIndexOf(&quot; &quot;);var _93=(pos&gt;=0)?_91.value.substr(++pos,_91.value.length):_91.value;return new RegExp(_93.escapeRegExp(),&quot;i&quot;);};var _94=function(_95,_96){var _97=0;for(var i=0;i&lt;_95.length;i++){if(_96[_95[i]]){_97++;}}return _97;};var _99=function(_9a,_9b,_9c){var _9d=1;var c=_9a[_9b];for(var i=_9b+1;i&lt;_9a.length;i++){if(_9a[i][1].count==c){if(_9a[i][0].match(_9c)){_9d++;}}else{break;}}return _9d;};var _a0=function(_a1,_a2){var _a3=abego.internal.getTagManager().getSortedTagInfos();var _a4=[];var _a5=0;for(var i=0;i&lt;_a3.length;i++){var c=_a3[i][1].count;if(c!=_a5){if(_a2&amp;&amp;(_a4.length+_99(_a3,i,_a1)&gt;_a2)){break;}_a5=c;}if(c==1){break;}var s=_a3[i][0];if(s.match(_a1)){_a4.push(s);}}return _a4;};var _a9=function(_aa,_ab){return abego.filterStrings(abego.internal.getTagManager().getAllTags(_ab),_aa);};var _ac=function(){if(!_71){return;}var _ad=store.getTiddlerText(&quot;IntelliTaggerMainTemplate&quot;);if(!_ad){_ad=&quot;&lt;b&gt;Tiddler IntelliTaggerMainTemplate not found&lt;/b&gt;&quot;;}_71.innerHTML=_ad;applyHtmlMacros(_71,null);refreshElements(_71,null);};var _ae=function(e){if(!e){var e=window.event;}var tag=this.getAttribute(&quot;tag&quot;);if(_73){_73.call(this,tag,e);}return false;};var _b2=function(_b3){createTiddlyElement(_b3,&quot;span&quot;,null,&quot;tagSeparator&quot;,&quot; | &quot;);};var _b4=function(_b5,_b6,_b7,_b8,_b9){if(!_b6){return;}var _ba=_b8?abego.toSet(_b8):{};var n=_b6.length;var c=0;for(var i=0;i&lt;n;i++){var tag=_b6[i];if(_ba[tag]){continue;}if(c&gt;0){_b2(_b5);}if(_b9&amp;&amp;c&gt;=_b9){abego.createEllipsis(_b5);break;}c++;var _bf=&quot;&quot;;var _c0=_b5;if(_b7&lt;10){_c0=createTiddlyElement(_b5,&quot;span&quot;,null,&quot;numberedSuggestion&quot;);_b7++;var key=_b7&lt;10?&quot;&quot;+(_b7):&quot;0&quot;;createTiddlyElement(_c0,&quot;span&quot;,null,&quot;suggestionNumber&quot;,key+&quot;) &quot;);var _c2=_b7==1?&quot;Return or &quot;:&quot;&quot;;_bf=&quot; (Shortcut: %1Alt-%0)&quot;.format([key,_c2]);}var _c3=config.views.wikified.tag.tooltip.format([tag]);var _c4=(_78(tag)?&quot;Remove tag '%0'%1&quot;:&quot;Add tag '%0'%1&quot;).format([tag,_bf]);var _c5=&quot;%0; Shift-Click: %1&quot;.format([_c4,_c3]);var btn=createTiddlyButton(_c0,tag,_c5,_ae,_78(tag)?&quot;currentTag&quot;:null);btn.setAttribute(&quot;tag&quot;,tag);}};var _c7=function(){if(_71){window.scrollTo(0,ensureVisible(_71));}if(_77()){window.scrollTo(0,ensureVisible(_77()));}};var _c8=function(e){if(!e){var e=window.event;}if(!_71){return;}var _cb=resolveTarget(e);if(_cb==_77()){return;}if(abego.isDescendantOrSelf(_71,_cb)){return;}abego.IntelliTagger.close();};addEvent(document,&quot;click&quot;,_c8);var _cc=Story.prototype.gatherSaveFields;Story.prototype.gatherSaveFields=function(e,_ce){_cc.apply(this,arguments);var _cf=_ce.tags;if(_cf){_ce.tags=_cf.trim();}};var _d0=function(_d1){story.focusTiddler(_d1,&quot;tags&quot;);var _d2=abego.getTiddlerField(story,_d1,&quot;tags&quot;);if(_d2){var len=_d2.value.length;abego.setRange(_d2,len,len);window.scrollTo(0,ensureVisible(_d2));}};var _d4=config.macros.edit.handler;config.macros.edit.handler=function(_d5,_d6,_d7,_d8,_d9,_da){_d4.apply(this,arguments);var _db=_d7[0];if((_da instanceof Tiddler)&amp;&amp;_db==&quot;tags&quot;){var _dc=_d5.lastChild;_dc.onfocus=function(e){abego.IntelliTagger.assistTagging(_dc,_da);setTimeout(function(){_d0(_da.title);},100);};_dc.onkeyup=function(e){if(!e){var e=window.event;}if(e.altKey&amp;&amp;!e.ctrlKey&amp;&amp;!e.metaKey&amp;&amp;(e.keyCode&gt;=48&amp;&amp;e.keyCode&lt;=57)){_8b(e.keyCode==48?9:e.keyCode-49,_dc,_da);}else{if(e.ctrlKey&amp;&amp;e.keyCode==32){_8b(0,_dc,_da);}}if(!e.ctrlKey&amp;&amp;(e.keyCode==13||e.keyCode==10)){_8b(0,_dc,_da);}setTimeout(function(){abego.IntelliTagger.assistTagging(_dc,_da);},100);return false;};_81(_dc);}};var _e0=function(e){if(!e){var e=window.event;}var _e3=resolveTarget(e);var _e4=_e3.getAttribute(&quot;tiddler&quot;);if(_e4){story.displayTiddler(_e3,_e4,&quot;IntelliTaggerEditTagsTemplate&quot;,false);_d0(_e4);}return false;};var _e5=config.macros.tags.handler;config.macros.tags.handler=function(_e6,_e7,_e8,_e9,_ea,_eb){_e5.apply(this,arguments);abego.IntelliTagger.createEditTagsButton(_eb,createTiddlyElement(_e6.lastChild,&quot;li&quot;));};var _ec=function(){if(_71&amp;&amp;_72&amp;&amp;!abego.isDescendantOrSelf(document,_72)){abego.IntelliTagger.close();}};setInterval(_ec,100);abego.IntelliTagger.displayTagSuggestions=function(_ed,_ee,_ef,_f0,_f1){_74=_ed;_75=abego.toSet(_ee);_76=_ef;_72=_f0;_73=_f1;if(!_71){_71=createTiddlyElement(document.body,&quot;div&quot;,null,&quot;intelliTaggerSuggestions&quot;);_71.style.position=&quot;absolute&quot;;}_ac();abego.openAsPopup(_71);if(_77()){var w=_77().offsetWidth;if(_71.offsetWidth&lt;w){_71.style.width=(w-2*(_6e+_6f))+&quot;px&quot;;}abego.moveBelowAndClip(_71,_77());}else{abego.centerOnWindow(_71);}_c7();};abego.IntelliTagger.assistTagging=function(_f3,_f4){var _f5=_90(_f3);var s=_f3.value;if(_7d(_f3)){s=_7a(s);}var _f7=s.readBracketedList();var _f8=_f7.length&gt;0?abego.filterStrings(abego.internal.getTagManager().getPartnerRankedTags(_f7),_f5,_70):_a0(_f5,_70);abego.IntelliTagger.displayTagSuggestions(_a9(_f5,_f7),_f7,_f8,_f3,function(tag,e){if(e.shiftKey){onClickTag.call(this,e);}else{_85(tag,_f3,_f4);}});};abego.IntelliTagger.close=function(){abego.closePopup(_71);_71=null;return false;};abego.IntelliTagger.createEditTagsButton=function(_fb,_fc,_fd,_fe,_ff,id,_101){if(!_fd){_fd=&quot;[edit]&quot;;}if(!_fe){_fe=&quot;Edit the tags&quot;;}if(!_ff){_ff=&quot;editTags&quot;;}var _102=createTiddlyButton(_fc,_fd,_fe,_e0,_ff,id,_101);_102.setAttribute(&quot;tiddler&quot;,(_fb instanceof Tiddler)?_fb.title:String(_fb));return _102;};abego.IntelliTagger.getSuggestionTagsMaxCount=function(){return 100;};config.macros.intelliTagger={label:&quot;intelliTagger&quot;,handler:function(_103,_104,_105,_106,_107,_108){var _109=_107.parseParams(&quot;list&quot;,null,true);var _10a=_109[0][&quot;action&quot;];for(var i=0;_10a&amp;&amp;i&lt;_10a.length;i++){var _10c=_10a[i];var _10d=config.macros.intelliTagger.subhandlers[_10c];if(!_10d){abego.alertAndThrow(&quot;Unsupported action '%0'&quot;.format([_10c]));}_10d(_103,_104,_105,_106,_107,_108);}},subhandlers:{showTags:function(_10e,_10f,_110,_111,_112,_113){_b4(_10e,_74,_76?_76.length:0,_76,abego.IntelliTagger.getSuggestionTagsMaxCount());},showFavorites:function(_114,_115,_116,_117,_118,_119){_b4(_114,_76,0);},closeButton:function(_11a,_11b,_11c,_11d,_11e,_11f){var _120=createTiddlyButton(_11a,&quot;close&quot;,&quot;Close the suggestions&quot;,abego.IntelliTagger.close);},version:function(_121){var t=&quot;IntelliTagger %0.%1.%2&quot;.format([version.extensions.IntelliTaggerPlugin.major,version.extensions.IntelliTaggerPlugin.minor,version.extensions.IntelliTaggerPlugin.revision]);var e=createTiddlyElement(_121,&quot;a&quot;);e.setAttribute(&quot;href&quot;,&quot;http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin&quot;);e.innerHTML=&quot;&lt;font color=\&quot;black\&quot; face=\&quot;Arial, Helvetica, sans-serif\&quot;&gt;&quot;+t+&quot;&lt;font&gt;&quot;;},copyright:function(_124){var e=createTiddlyElement(_124,&quot;a&quot;);e.setAttribute(&quot;href&quot;,&quot;http://tiddlywiki.abego-software.de&quot;);e.innerHTML=&quot;&lt;font color=\&quot;black\&quot; face=\&quot;Arial, Helvetica, sans-serif\&quot;&gt;&amp;copy; 2006-2007 &lt;b&gt;&lt;font color=\&quot;red\&quot;&gt;abego&lt;/font&gt;&lt;/b&gt; Software&lt;font&gt;&quot;;}}};})();config.shadowTiddlers[&quot;IntelliTaggerStyleSheet&quot;]=&quot;/***\n&quot;+&quot;!~IntelliTagger Stylesheet\n&quot;+&quot;***/\n&quot;+&quot;/*{{{*/\n&quot;+&quot;.intelliTaggerSuggestions {\n&quot;+&quot;\tposition: absolute;\n&quot;+&quot;\twidth: 600px;\n&quot;+&quot;\n&quot;+&quot;\tpadding: 2px;\n&quot;+&quot;\tlist-style: none;\n&quot;+&quot;\tmargin: 0;\n&quot;+&quot;\n&quot;+&quot;\tbackground: #eeeeee;\n&quot;+&quot;\tborder: 1px solid DarkGray;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .currentTag   {\n&quot;+&quot;\tfont-weight: bold;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .suggestionNumber {\n&quot;+&quot;\tcolor: #808080;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .numberedSuggestion{\n&quot;+&quot;\twhite-space: nowrap;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .intelliTaggerFooter {\n&quot;+&quot;\tmargin-top: 4px;\n&quot;+&quot;\tborder-top-width: thin;\n&quot;+&quot;\tborder-top-style: solid;\n&quot;+&quot;\tborder-top-color: #999999;\n&quot;+&quot;}\n&quot;+&quot;.intelliTaggerSuggestions .favorites {\n&quot;+&quot;\tborder-bottom-width: thin;\n&quot;+&quot;\tborder-bottom-style: solid;\n&quot;+&quot;\tborder-bottom-color: #999999;\n&quot;+&quot;\tpadding-bottom: 2px;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .normalTags {\n&quot;+&quot;\tpadding-top: 2px;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;.intelliTaggerSuggestions .intelliTaggerFooter .button {\n&quot;+&quot;\tfont-size: 10px;\n&quot;+&quot;\n&quot;+&quot;\tpadding-left: 0.3em;\n&quot;+&quot;\tpadding-right: 0.3em;\n&quot;+&quot;}\n&quot;+&quot;\n&quot;+&quot;/*}}}*/\n&quot;;config.shadowTiddlers[&quot;IntelliTaggerMainTemplate&quot;]=&quot;&lt;!--\n&quot;+&quot;{{{\n&quot;+&quot;--&gt;\n&quot;+&quot;&lt;div class=\&quot;favorites\&quot; macro=\&quot;intelliTagger action: showFavorites\&quot;&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class=\&quot;normalTags\&quot; macro=\&quot;intelliTagger action: showTags\&quot;&gt;&lt;/div&gt;\n&quot;+&quot;&lt;!-- The Footer (with the Navigation) ============================================ --&gt;\n&quot;+&quot;&lt;table class=\&quot;intelliTaggerFooter\&quot; border=\&quot;0\&quot; width=\&quot;100%\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot;&gt;&lt;tbody&gt;\n&quot;+&quot;  &lt;tr&gt;\n&quot;+&quot;\t&lt;td align=\&quot;left\&quot;&gt;\n&quot;+&quot;\t\t&lt;span macro=\&quot;intelliTagger action: closeButton\&quot;&gt;&lt;/span&gt;\n&quot;+&quot;\t&lt;/td&gt;\n&quot;+&quot;\t&lt;td align=\&quot;right\&quot;&gt;\n&quot;+&quot;\t\t&lt;span macro=\&quot;intelliTagger action: version\&quot;&gt;&lt;/span&gt;, &lt;span macro=\&quot;intelliTagger action: copyright \&quot;&gt;&lt;/span&gt;\n&quot;+&quot;\t&lt;/td&gt;\n&quot;+&quot;  &lt;/tr&gt;\n&quot;+&quot;&lt;/tbody&gt;&lt;/table&gt;\n&quot;+&quot;&lt;!--\n&quot;+&quot;}}}\n&quot;+&quot;--&gt;\n&quot;;config.shadowTiddlers[&quot;IntelliTaggerEditTagsTemplate&quot;]=&quot;&lt;!--\n&quot;+&quot;{{{\n&quot;+&quot;--&gt;\n&quot;+&quot;&lt;div class='toolbar' macro='toolbar +saveTiddler -cancelTiddler'&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class='title' macro='view title'&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class='tagged' macro='tags'&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class='viewer' macro='view text wikified'&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class='toolbar' macro='toolbar +saveTiddler -cancelTiddler'&gt;&lt;/div&gt;\n&quot;+&quot;&lt;div class='editor' macro='edit tags'&gt;&lt;/div&gt;&lt;div class='editorFooter'&gt;&lt;span macro='message views.editor.tagPrompt'&gt;&lt;/span&gt;&lt;span macro='tagChooser'&gt;&lt;/span&gt;&lt;/div&gt;\n&quot;+&quot;&lt;!--\n&quot;+&quot;}}}\n&quot;+&quot;--&gt;\n&quot;;config.shadowTiddlers[&quot;BSD open source license (abego Software)&quot;]=&quot;See [[Licence|http://tiddlywiki.abego-software.de/#%5B%5BBSD%20open%20source%20license%5D%5D]].&quot;;config.shadowTiddlers[&quot;IntelliTaggerPlugin Documentation&quot;]=&quot;[[Documentation on abego Software website|http://tiddlywiki.abego-software.de/doc/IntelliTagger.pdf]].&quot;;config.shadowTiddlers[&quot;IntelliTaggerPlugin SourceCode&quot;]=&quot;[[Plugin source code on abego Software website|http://tiddlywiki.abego-software.de/archive/IntelliTaggerPlugin/Plugin-IntelliTagger-src.1.0.2.js]]\n&quot;;(function(){var _126=restart;restart=function(){setStylesheet(store.getTiddlerText(&quot;IntelliTaggerStyleSheet&quot;),&quot;IntelliTaggerStyleSheet&quot;);_126.apply(this,arguments);};})();}
// %/
</pre>
</div>
<div title="IntelliTagsEditCommandPlugin" modifier="UdoBorkowski" modified="200710031402" created="200710031345" tags="systemConfig">
<pre>/***
|''Name:''|IntelliTagsEditCommandPlugin|
|''Version:''|1.0.0 (2007-10-03)|
|''Type:''|plugin|
|''Description:''|A command for your tiddler's toolbar to directly edit the tiddler's tags using the IntelliTaggerPlugin, without switching to &quot;edit mode&quot;.|
|''Source:''|http://tiddlywiki.abego-software.de/#IntelliTagsEditCommandPlugin|
|''Requires:''|IntelliTaggerPlugin http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license (abego Software)]]|
|''~CoreVersion:''|2.0.8|
|''Browser:''|Firefox 1.5.0.2 or better|
***/
/***
!Using the &quot;IntelliTagsEditCommandPlugin&quot;
Add the command {{{intelliTagsEdit}}} into the 'macro' attribute of the 'toolbar' {{{&lt;div...&gt;}}} in your ViewTemplate.

''Example:''
{{{
&lt;div class='toolbar' 
        macro='toolbar -closeTiddler closeOthers +editTiddler intelliTagsEdit permalink references jump'&gt;
&lt;/div&gt;
}}}

This adds a &quot;tags&quot; button to the toolbar of the tiddlers (next to the ''edit'' button). Pressing the &quot;tags&quot; button will open the input field for the tiddler's tags and let you edit the tags with all the [[IntelliTaggerPlugin|http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin]] features.
***/
/***
!Source Code
***/
//{{{
(function(){

if (!version.extensions.IntelliTaggerPlugin)
    throw Error(&quot;IntelliTagsEditCommandPlugin requires the IntelliTaggerPlugin (http://tiddlywiki.abego-software.de/#IntelliTaggerPlugin)&quot;);

if (config.commands.intelliTagsEdit) 
    return;

config.commands.intelliTagsEdit = {
	text: &quot;tags&quot;,
	tooltip: &quot;edit the tags&quot;
};

config.commands.intelliTagsEdit.handler = function(event,src,title) {
	var button = abego.IntelliTagger.createEditTagsButton(title, null, &quot;tags&quot;, &quot;edit the tags&quot;);
	button.onclick(event);
	return false;
};

})();
//}}}
</pre>
</div>
<div title="Invoice Carvers" modifier="UdoBorkowski" created="200512121746" tags="DataTiddlerProject expense">
<pre>&lt;&lt;showData&gt;&gt;
&lt;data&gt;{&quot;month&quot;:&quot;Dec&quot;,&quot;descr&quot;:&quot;Restaurant&quot;,&quot;amount&quot;:35}&lt;/data&gt;</pre>
</div>
<div title="Invoice Tiffanys" modifier="UdoBorkowski" created="200512121747" tags="DataTiddlerProject expense">
<pre>&lt;&lt;showData&gt;&gt;
&lt;data&gt;{&quot;month&quot;:&quot;Nov&quot;, &quot;descr&quot; : &quot;Ring&quot;, &quot;amount&quot; : 2999}&lt;/data&gt;</pre>
</div>
<div title="InvoiceKLM" modifier="UdoBorkowski" created="200512130122" tags="DataTiddlerProject expense">
<pre>&lt;&lt;showData&gt;&gt;
&lt;data&gt;{&quot;month&quot;:&quot;Dec&quot;,&quot;descr&quot;:&quot;Flight&quot;,&quot;amount&quot;:688}&lt;/data&gt;</pre>
</div>
<div title="JavaScript" modifier="UdoBorkowski" created="200511200150" tags="basic">
<pre>The programming language TiddlyWiki is written in.</pre>
</div>
<div title="JavaScript in actionParameters" modifier="UdoBorkowski" modified="200709190926" created="200511291100" tags="Documentation ForEachTiddlerMacro">
<pre>JavaScript in actionParameters may refer to the build-in variables {{{tiddler}}}, {{{count}}}, {{{index}}} and {{{context}}}.</pre>
</div>
<div title="JoeBlock" modifier="UdoBorkowski" created="200512140259" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler ContactsFormTemplate&gt;&gt;
&lt;data&gt;{&quot;firstname&quot;:&quot;Joe&quot;,&quot;lastname&quot;:&quot;Block&quot;,&quot;email&quot;:&quot;jb@example.org&quot;,&quot;phone&quot;:&quot;555-1234567&quot;,&quot;city&quot;:&quot;Boston&quot;,&quot;state&quot;:&quot;MA&quot;,&quot;notes&quot;:&quot;works as a designer, \nmay help with logo.&quot;,&quot;webpage&quot;:&quot;www.example.org&quot;,&quot;country&quot;:&quot;US&quot;}&lt;/data&gt;</pre>
</div>
<div title="LegacyStrikeThroughPlugin" modifier="MartinBudden" created="200607210000" tags="systemConfig">
<pre>/***
|''Name:''|LegacyStrikeThroughPlugin|
|''Description:''|Support for legacy (pre 2.1) strike through formatting|
|''Version:''|1.0.2|
|''Date:''|Jul 21, 2006|
|''Source:''|http://www.tiddlywiki.com/#LegacyStrikeThroughPlugin|
|''Author:''|MartinBudden (mjbudden (at) gmail (dot) com)|
|''License:''|[[BSD open source license]]|
|''CoreVersion:''|2.1.0|
***/

//{{{
// Ensure that the LegacyStrikeThrough Plugin is only installed once.
if(!version.extensions.LegacyStrikeThroughPlugin) {
version.extensions.LegacyStrikeThroughPlugin = {installed:true};

config.formatters.push(
{
	name: &quot;legacyStrikeByChar&quot;,
	match: &quot;==&quot;,
	termRegExp: /(==)/mg,
	element: &quot;strike&quot;,
	handler: config.formatterHelpers.createElementAndWikify
});

} //# end of &quot;install only once&quot;
//}}}</pre>
</div>
<div title="List Tiddlers of an included TiddlyWiki (using the ForEachTiddlerMacro)" modifier="UdoBorkowski" modified="200710180703" created="200709181410" tags="Documentation ForEachTiddlerMacro IncludePlugin sortClauseExample whereClauseExample writeActionExample">
<pre>When using the IncludePlugin the ForEachTiddlerMacro loops over all tiddlers, the ones from the &quot;master&quot; TiddlyWiki and all included TiddlyWiki.

If you want to restrict the result to tiddlers of a certain included TiddlyWiki you may refer to the tiddler variable &quot;includedURL&quot; that holds the URL of the TiddlyWiki this tiddler was included from. For the &quot;master&quot; TiddlyWiki the &quot;includeURL&quot; is empty.

''Example''

Assume you have included &quot;http://www.tiddlywiki.com/index.html&quot;. You want to list the tiddlers of that TiddlyWiki that have changed after July 1st, 2007. The result should be sorted by the modified date, with the last changes listed first.

This is the ForEachTiddlerMacro call you may use for this purpose:
{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.modified &gt; new Date(&quot;July 1, 2007&quot;) &amp;&amp; tiddler.includeURL == &quot;http://www.tiddlywiki.com/index.html&quot;'

    sortBy
        ' tiddler.modified'
    descending

    write
        '&quot;* &quot;+tiddler.modified.formatString(&quot;YYYY-0MM-0DD&quot;)+&quot; [[&quot; +tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
}}}

See also:
* [[List Tiddlers of the &quot;Master&quot; TiddlyWiki (when using the IncludePlugin)]]
* [[Programming with the IncludePlugin]])</pre>
</div>
<div title="List Tiddlers of the &quot;Master&quot; TiddlyWiki (when using the IncludePlugin)" modifier="UdoBorkowski" modified="200710180704" created="200710180702" tags="Documentation ForEachTiddlerMacro IncludePlugin sortClauseExample whereClauseExample writeActionExample">
<pre>When using the IncludePlugin the ForEachTiddlerMacro loops over all tiddlers, the ones from the &quot;master&quot; TiddlyWiki and all included TiddlyWiki.

If you want to restrict the result to tiddlers of the &quot;master&quot; TiddlyWiki you may refer to the tiddler variable &quot;includedURL&quot; that holds the URL of the TiddlyWiki this tiddler was included from.  For the &quot;master&quot; TiddlyWiki the &quot;includeURL&quot; is empty.

''Example''

You want to list the tiddlers of the &quot;master&quot; TiddlyWiki that have changed after July 1st, 2007. The result should be sorted by the modified date, with the last changes listed first.

This is the ForEachTiddlerMacro call you may use for this purpose:
{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.modified &gt; new Date(&quot;July 1, 2007&quot;) &amp;&amp; ! tiddler.includeURL'

    sortBy
        ' tiddler.modified'
    descending

    write
        '&quot;* &quot;+tiddler.modified.formatString(&quot;YYYY-0MM-0DD&quot;)+&quot; [[&quot; +tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
}}}

See also:
* [[List Tiddlers of an included TiddlyWiki (using the ForEachTiddlerMacro)]]
* [[Programming with the IncludePlugin]]</pre>
</div>
<div title="List all Tiddler with titles containing the text 'it', sorted by the length of their titles" modifier="UdoBorkowski" created="200512121356" tags="ForEachTiddlerMacro addToListActionExample sortClauseExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title.length' 
 descending
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title.length' 
 descending
&gt;&gt;

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all Tiddler with titles containing the text 'it', sorted by the length of their titles (longer ones first)" modifier="UdoBorkowski" created="200511210933" tags="ForEachTiddlerMacro addToListActionExample sortClauseExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title.length' 
 descending
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title.length' 
 descending
&gt;&gt;</pre>
</div>
<div title="List all Tiddler with titles containing the text 'it', sorted by their titles descending" modifier="UdoBorkowski" created="200511210857" tags="ForEachTiddlerMacro addToListActionExample sortClauseExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title' 
 descending
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)' 
 sortBy 
 'tiddler.title' 
 descending
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all Tiddlers changed in the last 30 days" modifier="UdoBorkowski" modified="200709190839" created="200709190817" tags="ForEachTiddlerMacro scriptClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
    script '
        function lastDays(tiddler) {
            var compareDate = new Date();
            compareDate.setDate(compareDate.getDate() - 30);  
            if (tiddler.modified &gt; compareDate) 
                return &quot;* [[&quot; + tiddler.title + &quot;]]\n&quot;; 
            else 
                return &quot;&quot;; 
        }
    '

    write 'lastDays(tiddler)'
&gt;&gt;
}}}
//(Based on source code provided by Edmund Rodgers)//

''//Result://''
&lt;&lt;forEachTiddler
    script '
        function lastDays(tiddler) {
            var compareDate = new Date();
            compareDate.setDate(compareDate.getDate() - 30);  
            if (tiddler.modified &gt; compareDate) 
                return &quot;* [[&quot; + tiddler.title + &quot;]]\n&quot;; 
            else 
                return &quot;&quot;; 
        }
    '

    write 'lastDays(tiddler)'
&gt;&gt;</pre>
</div>
<div title="List all Tiddlers changed in the last 30 days or the 10 most recently changed tiddlers if nothing was changed in the last 30 days" modifier="UdoBorkowski" modified="200709190927" created="200709190839" tags="ForEachTiddlerMacro beginEndNoneExample contextVariableExample scriptClauseExample writeActionExample">
<pre>This code is based on the examples [[List all Tiddlers changed in the last 30 days]] and [[List the 10 most recently modified tiddlers]]. It demonstrates how to create different output depending on the outcome of a ForEachTiddlerMacro call.

The basic idea is to first collect the output of one ForEachTiddlerMacro call and not directly write it as the individual tiddlers are processed. At the end we check the result and decide what the real outcome should be and then actually write the result. To collect the output we use a &quot;context&quot; variable.

In our example we first collect the output of the [[List all Tiddlers changed in the last 30 days]] and check in the end if there was any output written. If yes that output is used, otherwise we generate a {{{&lt;&lt;tiddler ...&gt;&gt;}}} macro to display the content of the [[List the 10 most recently modified tiddlers]] tiddler instead.
 
{{{
&lt;&lt;forEachTiddler
    script '
        function lastDays(tiddler) {
            var compareDate = new Date();
            compareDate.setDate(compareDate.getDate() - 30);  
            if (tiddler.modified &gt; compareDate) 
                return &quot;* [[&quot; + tiddler.title + &quot;]]\n&quot;; 
            else 
                return &quot;&quot;; 
        }
    '

    write 'context.output+= lastDays(tiddler) , &quot;&quot;'

        begin 'context.output = &quot;&quot;'

        end 'context.output
                ? context.output
                : &quot;&lt;&lt;tiddler [[List the 10 most recently modified tiddlers]]\&gt;\&gt;&quot;        
        '
&gt;&gt;
}}}

''//Result://''
&lt;&lt;forEachTiddler
    script '
        function lastDays(tiddler) {
            var compareDate = new Date();
            compareDate.setDate(compareDate.getDate() - 30);  
            if (tiddler.modified &gt; compareDate) 
                return &quot;* [[&quot; + tiddler.title + &quot;]]\n&quot;; 
            else 
                return &quot;&quot;; 
        }
    '

    write 'context.output+= lastDays(tiddler) , &quot;&quot;'

        begin 'context.output = &quot;&quot;'

        end 'context.output
                ? context.output
                : &quot;&lt;&lt;tiddler [[List the 10 most recently modified tiddlers]]\&gt;\&gt;&quot;        
        '
&gt;&gt;
</pre>
</div>
<div title="List all Tiddlers in an &quot;A-Z&quot; Grouping" modifier="UdoBorkowski" modified="200709190918" created="200709011230" tags="ForEachTiddlerMacro contextVariableExample scriptClauseExample sortClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
    sortBy 
        'tiddler.title.toUpperCase()'
    
    script
        '
        function getGroupCaption(tiddler) {
            return tiddler.title.substr(0,1).toUpperCase();
        } 

        function getGroupTitle(tiddler, context) {
            if (!context.lastGroup || context.lastGroup != getGroupCaption(tiddler)) {
                context.lastGroup = getGroupCaption(tiddler); 
                return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;
            } else 
                return &quot;&quot;;
        }
        '
    
    write
         'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
    sortBy 
        'tiddler.title.toUpperCase()'
    
    script
        '
        function getGroupCaption(tiddler) {
            return tiddler.title.substr(0,1).toUpperCase();
        } 

        function getGroupTitle(tiddler, context) {
            if (!context.lastGroup || context.lastGroup != getGroupCaption(tiddler)) {
                context.lastGroup = getGroupCaption(tiddler); 
                return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;
            } else 
                return &quot;&quot;;
        }
        '
    
    write
         'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;</pre>
</div>
<div title="List all Tiddlers that contain either a 'TaskToDo' or a 'TaskOpen' or 'TaskDone' tag" modifier="UdoBorkowski" created="200511210852" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.containsAny([&quot;TaskToDo&quot;,&quot;TaskOpen&quot;,&quot;TaskDone&quot;])'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.containsAny([&quot;TaskToDo&quot;,&quot;TaskOpen&quot;,&quot;TaskDone&quot;])'
&gt;&gt;

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all Tiddlers that contain the tag 'systemConfig'" modifier="UdoBorkowski" created="200511210851" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.contains(&quot;systemConfig&quot;)'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.contains(&quot;systemConfig&quot;)'
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all Tiddlers that have the exact same tags as the tiddler containing the ForEachTiddler macro call" modifier="UdoBorkowski" modified="200710211011" created="200710210859" tags="ForEachTiddlerMacro addToListActionExample contextVariableExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler
     where 'tiddler != context.inTiddler &amp;&amp; 
            tiddler.tags.sort().join(&quot;]]&quot;) ==  context.inTiddler.tags.sort().join(&quot;]]&quot;)'
&gt;&gt;
}}}
!Notes
* The {{{tiddler != context.inTiddler}}} ensure the tiddler containing the macro call is not listed. 
* {{{tiddler.tags.sort().join(&quot;]]&quot;)}}} creates a string with all tags of the tiddler, with the tags sorted alphabetically and separated by &quot;]]&quot;. The &quot;]]&quot; string is used because it cannot be part of any tag name so it is fine to use it as a separator between tags. 
* A &quot;sorted tags string&quot; is created both for the current tiddler and the tiddler containing the macro. If both strings are equal both tiddlers have the same tags.
* Instead of {{{context.inTiddler}}} you may also use {{{context.viewTiddler}}}, especially when you are working with the {{{&lt;&lt;tiddler...&gt;&gt;}}} macro. See  [[whereClause]] for details.
</pre>
</div>
<div title="List all Tiddlers that start with 'Site'" modifier="UdoBorkowski" created="200511210848" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.startsWith(&quot;Site&quot;)' 
&gt;&gt; 
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.startsWith(&quot;Site&quot;)' 
&gt;&gt; 
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all Tiddlers, grouped by Tags" modifier="UdoBorkowski" modified="200709190920" created="200512081507" tags="ForEachTiddlerMacro contextVariableExample scriptClauseExample sortByClauseExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
 where
 'tiddler.tags &amp;&amp; tiddler.tags.length'
 sortBy 
 'getSortedTagsText(tiddler)+&quot;###&quot;+tiddler.title'
 script
 'function getSortedTagsText(tiddler) {var tags = tiddler.tags; if (!tags) return &quot;&quot;; tags.sort(); var result = &quot;&quot;; for (var i = 0; i &lt; tags.length;i++) {result += tags[i]+ &quot; &quot;;} return result;} function getGroupTitle(tiddler, context) {if (!context.lastGroup || context.lastGroup != getSortedTagsText(tiddler)) { context.lastGroup = getSortedTagsText(tiddler); return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;} else return &quot;&quot;;} '
 write
 'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
 where
 'tiddler.tags &amp;&amp; tiddler.tags.length'
 sortBy 
 'getSortedTagsText(tiddler)+&quot;###&quot;+tiddler.title'
 script
 'function getSortedTagsText(tiddler) {var tags = tiddler.tags; if (!tags) return &quot;&quot;; tags.sort(); var result = &quot;&quot;; for (var i = 0; i &lt; tags.length;i++) {result += tags[i]+ &quot; &quot;;} return result;} function getGroupTitle(tiddler, context) {if (!context.lastGroup || context.lastGroup != getSortedTagsText(tiddler)) { context.lastGroup = getSortedTagsText(tiddler); return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;} else return &quot;&quot;;} '
 write
 'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
//(Tiddlers without tags are not included)//</pre>
</div>
<div title="List all Tiddlers, grouped by Tags (including tiddlers with no tags)" modifier="UdoBorkowski" modified="200709190920" created="200707080716" tags="ForEachTiddlerMacro contextVariableExample scriptClauseExample sortByClauseExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
	sortBy 
		'getSortedTagsText(tiddler)+&quot;###&quot;+tiddler.title'
	
	script
		'
		function getSortedTagsText(tiddler) {
			var tags = tiddler.tags; 
			if (!tags || !tags.length) 
				return &quot;{no tags}&quot;; 
			tags.sort(); 
			var result = &quot;&quot;; 
			for (var i = 0; i &lt; tags.length;i++) {
				result += tags[i]+ &quot; &quot;;
			} 
			return result;
		} 

		function getGroupTitle(tiddler, context) {
			if (!context.lastGroup || context.lastGroup != getSortedTagsText(tiddler)) {
				context.lastGroup = getSortedTagsText(tiddler); 
				return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;
			} else 
				return &quot;&quot;;
		}
		'
	
	write
		 'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
	sortBy 
		'getSortedTagsText(tiddler)+&quot;###&quot;+tiddler.title'
	
	script
		'
		function getSortedTagsText(tiddler) {
			var tags = tiddler.tags; 
			if (!tags || !tags.length) 
				return &quot;{no tags}&quot;; 
			tags.sort(); 
			var result = &quot;&quot;; 
			for (var i = 0; i &lt; tags.length;i++) {
				result += tags[i]+ &quot; &quot;;
			} 
			return result;
		} 

		function getGroupTitle(tiddler, context) {
			if (!context.lastGroup || context.lastGroup != getSortedTagsText(tiddler)) {
				context.lastGroup = getSortedTagsText(tiddler); 
				return &quot;* {{{&quot;+(context.lastGroup?context.lastGroup:&quot;no tags&quot;)+&quot;}}}\n&quot;;
			} else 
				return &quot;&quot;;
		}
		'
	
	write
		 'getGroupTitle(tiddler, context)+&quot;** [[&quot; + tiddler.title+&quot;]]\n&quot;'
&gt;&gt;</pre>
</div>
<div title="List all hidden tiddlers of included TiddlyWikis" modifier="YourName" modified="200907150746" created="200907150739" tags="IncludePlugin Examples Documentation Script" changecount="7">
<pre>If a tiddler name is used in more than one TiddlyWiki (e.g. in the main TiddlyWiki and some included TiddlyWiki) only one of these tiddlers is visible, the others are hidden. For details see [[How Tiddlers are found]].

The following script reports all &quot;hidden&quot; tiddlers, also reporting the TiddlyWiki containing them.
{{{
&lt;script&gt;
// List all hidden tiddlers of included TiddlyWikis
// see http://tiddlywiki.abego-software.de/#[[How%20Tiddlers%20are%20found]]

// By default hidden tiddlers with names of shadow tiddlers in the main TiddlyWiki
// are not reported. Set the following variable to false if these should also be reported.
var ignoreShadowTiddlers = true;


// returns the url (if defined) or the text &quot;main ~TiddlyWiki&quot; 
var twLabel = function(url) {
    return url ? url : &quot;main ~TiddlyWiki&quot;;
}

var hiddenTiddlers = [];
var incls = abego.TiddlyWikiIncluder.getIncludes();
var n = incls.length;
for (var i = 0; i &lt; n; i++) {
    var url = incls[i]
    var twStore = abego.TiddlyWikiIncluder.getStore(url);
    if (twStore == null) {
        displayMessage(&quot;not found &quot;+url);
        continue;
    }

    twStore.forEachTiddler(function(title,tiddler) {
        var foundTiddler = store.getTiddler(tiddler.title);
        if (foundTiddler == null) {
            // no tiddler with this title found (using getTiddler), 
            // so this must be a shadow tiddler in the main TiddlyWiki.
            if (!ignoreShadowTiddlers) {
                hiddenTiddlers.push(&quot;[[&quot;+title+&quot;]] in &quot;+url+&quot; (using shadow tiddler from &quot;+twLabel(null)+&quot;)&quot;);
            }
        } else if (tiddler != foundTiddler) {
            if (!ignoreShadowTiddlers || config.shadowTiddlers[[title]] == undefined) {
                hiddenTiddlers.push(&quot;[[&quot;+title+&quot;]] in &quot;+url+&quot; (using tiddler from &quot;+twLabel(foundTiddler.includeURL)+&quot;)&quot;);
            }
        }
    });
}

return hiddenTiddlers.length 
        ? &quot;!Hidden Tiddlers\n# &quot;+hiddenTiddlers.join(&quot;\n# &quot;)+&quot;]]\n&quot; 
        : &quot;No tiddlers are hidden.&quot;;
&lt;/script&gt;
}}}
&lt;script&gt;
// List all hidden tiddlers of included TiddlyWikis
// see http://tiddlywiki.abego-software.de/#[[How%20Tiddlers%20are%20found]]

// By default hidden tiddlers with names of shadow tiddlers in the main TiddlyWiki
// are not reported. Set the following variable to false if these should also be reported.
var ignoreShadowTiddlers = true;


// returns the url (if defined) or the text &quot;main ~TiddlyWiki&quot; 
var twLabel = function(url) {
    return url ? url : &quot;main ~TiddlyWiki&quot;;
}

var hiddenTiddlers = [];
var incls = abego.TiddlyWikiIncluder.getIncludes();
var n = incls.length;
for (var i = 0; i &lt; n; i++) {
    var url = incls[i]
    var twStore = abego.TiddlyWikiIncluder.getStore(url);
    if (twStore == null) {
        displayMessage(&quot;not found &quot;+url);
        continue;
    }

    twStore.forEachTiddler(function(title,tiddler) {
        var foundTiddler = store.getTiddler(tiddler.title);
        if (foundTiddler == null) {
            // no tiddler with this title found (using getTiddler), 
            // so this must be a shadow tiddler in the main TiddlyWiki.
            if (!ignoreShadowTiddlers) {
                hiddenTiddlers.push(&quot;[[&quot;+title+&quot;]] in &quot;+url+&quot; (using shadow tiddler from &quot;+twLabel(null)+&quot;)&quot;);
            }
        } else if (tiddler != foundTiddler) {
            if (!ignoreShadowTiddlers || config.shadowTiddlers[[title]] == undefined) {
                hiddenTiddlers.push(&quot;[[&quot;+title+&quot;]] in &quot;+url+&quot; (using tiddler from &quot;+twLabel(foundTiddler.includeURL)+&quot;)&quot;);
            }
        }
    });
}

return hiddenTiddlers.length 
        ? &quot;!Hidden Tiddlers\n# &quot;+hiddenTiddlers.join(&quot;\n# &quot;)+&quot;]]\n&quot; 
        : &quot;No tiddlers are hidden.&quot;;
&lt;/script&gt;</pre>
</div>
<div title="List all open tasks not assigned to UdoBorkowski (i.e. all Tiddlers containing a 'TaskOpen' and no 'UdoBorkowski' tag)" modifier="UdoBorkowski" created="200511210854" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.contains(&quot;TaskOpen&quot;) &amp;&amp; ! tiddler.tags.contains(&quot;UdoBorkowski&quot;)'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.contains(&quot;TaskOpen&quot;) &amp;&amp; ! tiddler.tags.contains(&quot;UdoBorkowski&quot;)'
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all open tasks of UdoBorkowski (i.e. all Tiddlers containing both a 'TaskOpen' and 'UdoBorkowski' tag)" modifier="UdoBorkowski" created="200511210853" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.containsAll([&quot;TaskOpen&quot;,&quot;UdoBorkowski&quot;])'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.tags.containsAll([&quot;TaskOpen&quot;,&quot;UdoBorkowski&quot;])'
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all tasks completed on a journal tiddler's day, as a &quot;Daily Status Report&quot;" modifier="YourName" modified="200912291436" created="200912291417" tags="ForEachTiddlerMacro whereClauseExample writeActionExample sortByClauseExample" changecount="5">
<pre>Assume in a &quot;journal&quot; tiddler you want to see all tasks you completed that day. For every task you have tiddler with its details. When it is completed you add the date to the title (make sure to spell the date exactly as in the journal tiddler title). 

Then you can add the following forEachTiddler macro to the journal tiddler to list all these tasks:
{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(context.viewerTiddler.title) &amp;&amp; tiddler.title != context.viewerTiddler.title' 
 sortBy 
 'tiddler.title' 
write '&quot;!![[&quot;+tiddler.title+&quot;]]\n&quot;+tiddler.tags+&quot;\n&quot;+tiddler.text+&quot;\n&quot;'
&gt;&gt;
}}}

Instead of copying this long statement to each journal tiddler you better create a helper tiddler with just the forEachTiddler macro call. Later you can &quot;include&quot; the helper tiddler in each journal tiddler.

E.g. have a look at the tiddler DailyStatusReport. You can now add a line like:
{{{
&lt;&lt;tiddler DailyStatusReport&gt;&gt;
}}}
into the journal tiddlers (e.g. as in journal tiddler &quot;[[29 December 2009]]&quot;) to get the daily status report for that day.


(Based on code suggested by cmari and Alan Cohen. Thanks)</pre>
</div>
<div title="List all tiddlers that have no tags" modifier="UdoBorkowski" created="200511211147" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where
 'tiddler.tags.length == 0'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler 
 where
 'tiddler.tags.length == 0'
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List all tiddlers, sorted by the size of their text (big ones first)" modifier="UdoBorkowski" modified="200704271900" created="200609162227" tags="ForEachTiddlerMacro sortClauseExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
    sortBy 
        'tiddler.text.length'
        descending
    write
        '&quot;* [[&quot;+tiddler.title+&quot;]] (&quot;+tiddler.text.length+&quot;)\n&quot;'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler
    sortBy 
        'tiddler.text.length'
        descending
    write
        '&quot;* [[&quot;+tiddler.title+&quot;]] (&quot;+tiddler.text.length+&quot;)\n&quot;'
&gt;&gt;</pre>
</div>
<div title="List all tiddlers, sorted by their titles, ignoring their case" modifier="UdoBorkowski" created="200511210925" tags="ForEachTiddlerMacro addToListActionExample sortClauseExample whereClauseExample">
<pre>{{{
&lt;&lt;forEachTiddler
 sortBy 
 '(tiddler.title.toLowerCase())'
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler
 sortBy 
 '(tiddler.title.toLowerCase())'
&gt;&gt;
See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="List the 10 most recently modified tiddlers" modifier="UdoBorkowski" modified="200709190837" created="200709190835" tags="ForEachTiddlerMacro indexVariableExample sortClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
    sortBy 
        tiddler.modified
    descending

    write 
        '(index &lt; 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'
&gt;&gt;
}}}

''//Result://''
&lt;&lt;forEachTiddler
    sortBy 
        tiddler.modified
    descending

    write 
        '(index &lt; 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'
&gt;&gt;
See also: [[List the first 10 tiddlers that have the tag 'basic']].</pre>
</div>
<div title="List the first 10 tiddlers that have the tag 'basic'" modifier="UdoBorkowski" modified="200709190834" created="200511221636" tags="ForEachTiddlerMacro indexVariableExample whereClauseExample writeActionExample">
<pre>For this &quot;List&quot; task we don't use the default action &quot;addToList&quot; (that simply adds all selected items to the list) but create the list using the &quot;write&quot; action and refer to the build-in variable &quot;index&quot; that is incremented for every tiddler being processed.
{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basic&quot;)'
    write
        '(index &lt; 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'
&gt;&gt;
}}}
In the write parameter there is a conditional output: when we are processing the tiddlers 0 to 9 it will write a line with:

 {{{* [[theTiddlerName]]}}}

Tiddler 10 and the following ones will generate no output (as the empty string is specified).

''//Result://''
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basic&quot;)'
    write
        '(index &lt; 10) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot; : &quot;&quot;'
&gt;&gt;
</pre>
</div>
<div title="List the first 10 tiddlers that have the tag 'basic' in a table with a header" modifier="UdoBorkowski" modified="200709280925" created="200609162212" tags="beginEndNoneExample countVariableExample indexVariableExample writeActionExample">
<pre>This example shows how the ''begin'',  ''end'' and ''none'' options for the write action can be used.
{{{
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basics&quot;)'
    write
        '(index &lt; 10) ? &quot;|&quot;+(index+1)+&quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot; : &quot;&quot;'
        begin '&quot;|!#|!Tiddler|\n&quot;'
        end 'count+&quot; Tiddlers found\n&quot;'
        none '&quot;No Tiddlers found\n&quot;'
&gt;&gt;
}}}
In the write parameter there is a conditional output: when we are processing the tiddlers 0 to 9 it will write a table line like this:

 {{{|}}}//n//{{{|[[theTiddlerName]]|}}}

with n running from 1 to 10. All following tiddlers don't generate any output (as the empty string is specified).

The ''begin'' and ''end'' expression are used to create a table header and a &quot;summary line&quot; after the table.

''//Result://''
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basic&quot;)'
    write
        '(index &lt; 10) ? &quot;|&quot;+(index+1)+&quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot; : &quot;&quot;'
        begin '&quot;|!#|!Tiddler|\n&quot;'
        end 'count+&quot; Tiddlers found\n&quot;'
        none '&quot;No Tiddlers found\n&quot;'
&gt;&gt;


If no tiddler would have been found the ''none'' expression would be written

''//Result://''
&lt;&lt;forEachTiddler
    where
        'tiddler.tags.contains(&quot;basics&quot;)'
    write
        '(index &lt; 10) ? &quot;|&quot;+(index+1)+&quot;|[[&quot;+tiddler.title+&quot;]]|\n&quot; : &quot;&quot;'
        begin '&quot;|!#|!Tiddler|\n&quot;'
        end 'count+&quot; Tiddlers found\n&quot;'
        none '&quot;No Tiddlers found\n&quot;'
&gt;&gt;


</pre>
</div>
<div title="List the first line of all tiddlers with the tag &quot;basic&quot;" modifier="UdoBorkowski" modified="200603230849" created="200603230845" tags="ForEachTiddlerMacro scriptClauseExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;basic&quot;)'
 script
 '
 function getFirstLine(s) {
 var m = s.match(/\s*(.*)/);
 return m != null &amp;&amp; m.length &gt;= 1 ? m[1] : &quot;&quot;;
 }
 '
 write
 '&quot;*[[&quot;+tiddler.title+&quot;]] &amp;rarr; &quot;+getFirstLine(tiddler.text)+&quot;\n&quot;' 
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;basic&quot;)'
 script
 '
 function getFirstLine(s) {
 var m = s.match(/\s*(.*)/);
 return m != null &amp;&amp; m.length &gt;= 1 ? m[1] : &quot;&quot;;
 }
 '
 write
 '&quot;*[[&quot;+tiddler.title+&quot;]] &amp;rarr; &quot;+getFirstLine(tiddler.text)+&quot;\n&quot;' 
&gt;&gt;
</pre>
</div>
<div title="List the names of all tiddlers of an external TiddlyWiki" modifier="UdoBorkowski" created="200512081508" tags="ForEachTiddlerMacro inClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
 in 
 'file:///c:/SampleTiddlyWiki.html'
 write
 'tiddler.title+&quot;\n&quot;'
&gt;&gt;
}}}
&lt;&lt;forEachTiddler
 in 
 'file:///c:/SampleTiddlyWiki.html'
 write
 'tiddler.title+&quot;\n&quot;'
&gt;&gt;

</pre>
</div>
<div title="List the remaining days of 'schedule' Tiddlers" modifier="UdoBorkowski" modified="200704271859" created="200704271846" tags="ForEachTiddlerMacro scriptClauseExample sortClauseExample whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler
where 
	'tiddler.tags.contains(&quot;schedule&quot;)'

sortBy 
	'(tiddler.title)'

script '

	// Returns the first line of the string
	//
	function getFirstLine(s) {
		var m = s.match(/\s*(.*)/);
		return m != null &amp;&amp; m.length &gt;= 1 ? m[1] : &quot;&quot;;
	}

	// Returns the number of days between two dates. 
	//
	// Only the year,month and day of the dates are considered.
	//
	// if date2 &lt; date1 the result will be negative.
	//
	function getDaysBetween(date1, date2) {
		date1 = new Date(date1.getFullYear(),date1.getMonth(),date1.getDate());
		date2 = new Date(date2.getFullYear(),date2.getMonth(),date2.getDate());
		return ((date2.getTime()-date1)/86400000).toFixed();
	}

	// Returns the date given by the string s
	// 
	// @param s 			String of format YYYY-MM-DD (&quot;-&quot; may be any char)
	// @param defaultValue 	returned when s is not a valid date.
	//
	// @return a Date object representing the given date. 
	//
	function parseDate(s, defaultValue) {
		try {
			return new Date(parseInt(s.substr(0,4),10),
					parseInt(s.substr(5,2),10)-1,
					parseInt(s.substr(8,2),10));
		} catch(e) {
			return defaultValue;
		}
	}

	function getDaysLeftText(tiddler) {
		return getDaysBetween(new Date(),parseDate(tiddler.title, new Date()))+&quot; days left: &quot;;
	}
'

write 
	'&quot;* &quot;+getDaysLeftText(tiddler)+&quot;[[&quot;+tiddler.title+&quot;]] &amp;rarr; &quot;+getFirstLine(tiddler.text)+&quot;\n&quot;' 
&gt;&gt;
}}}
//''Result:''//
&lt;&lt;forEachTiddler
where 
	'tiddler.tags.contains(&quot;schedule&quot;)'

sortBy 
	'(tiddler.title)'

script '

	// Returns the first line of the string
	//
	function getFirstLine(s) {
		var m = s.match(/\s*(.*)/);
		return m != null &amp;&amp; m.length &gt;= 1 ? m[1] : &quot;&quot;;
	}

	// Returns the number of days between two dates. 
	//
	// Only the year,month and day of the dates are considered.
	//
	// if date2 &lt; date1 the result will be negative.
	//
	function getDaysBetween(date1, date2) {
		date1 = new Date(date1.getFullYear(),date1.getMonth(),date1.getDate());
		date2 = new Date(date2.getFullYear(),date2.getMonth(),date2.getDate());
		return ((date2.getTime()-date1)/86400000).toFixed();
	}

	// Returns the date given by the string s
	// 
	// @param s 			String of format YYYY-MM-DD (&quot;-&quot; may be any char)
	// @param defaultValue 	returned when s is not a valid date.
	//
	// @return a Date object representing the given date. 
	//
	function parseDate(s, defaultValue) {
		try {
			return new Date(parseInt(s.substr(0,4),10),
					parseInt(s.substr(5,2),10)-1,
					parseInt(s.substr(8,2),10));
		} catch(e) {
			return defaultValue;
		}
	}

	function getDaysLeftText(tiddler) {
		return getDaysBetween(new Date(),parseDate(tiddler.title, new Date()))+&quot; days left: &quot;;
	}
'

write 
	'&quot;* &quot;+getDaysLeftText(tiddler)+&quot;[[&quot;+tiddler.title+&quot;]] &amp;rarr; &quot;+getFirstLine(tiddler.text)+&quot;\n&quot;' 
&gt;&gt;
</pre>
</div>
<div title="List the tiddlers that contain the text 'title'" modifier="UdoBorkowski" created="200511211002" tags="ForEachTiddlerMacro addToListActionExample whereClauseExample">
<pre>&lt;&lt;forEachTiddler
 where
 'tiddler.text.contains(&quot;title&quot;)'
&gt;&gt;
See also ForEachTiddlerExamples.</pre>
</div>
<div title="MainMenu" modifier="YourName" modified="201002161633" created="200512171939" tags="basic" changecount="5">
<pre>[[About]]
[[TiddlyWiki]]
{{abegoLink{[[abego Software|http://www.abego-software.de]]}}}
[[News|abegoExtensions News]]
----
[[Plugins]]
[[Installing Plugins]]
----
[[Download]]
{{abegoLink{[[Archive|http://tiddlywiki.abego-software.de/archive]]}}}
[[Donations]]
----
[[Copyright]]
[[Contact]]
[[Imprint]]
----
^^© 2005-2010&lt;&lt;br&gt;&gt;[[abego Software|http://www.abego-software.de]]^^
</pre>
</div>
<div title="Minesweeper" modifier="Daniel Baird" modified="200603080612" created="200603060203" tags="[[My Plugins]] systemConfig">
<pre>/***
|''Name:''|Minesweeper|
|''Version:''|0.72 (12 Oct 2005)|
|''Source:''|Tiddly W;nks (http://www.bur.st/~blazeoz/tiddlywinks/)|
|''Author:''|[[Daniel Baird]]|
|''Type:''|Macro|
!Description
It's minesweeper!

!Syntax/Example usage
{{{&lt;&lt;minesweeper&gt;&gt;}}} or {{{&lt;&lt;minesweeper [width] [height] [bombs]&gt;&gt;}}}
&lt;&lt;minesweeper&gt;&gt;

!Notes
* Let me know if you want graphics, or that MSWindows Minesweeper thing where you can click with both buttons on a numbered square, and it does the thinking for you..

!Revision History
* 0.5.0 (2-Oct-05)
** original version (Daniel)
* 0.5.1 (3-Oct-05)
** added the css styles via set~StyleSheet (Simon)
* 0.5.2 (3-Oct-05)
** added parameters to macro and fixed bug preventing detection of win (Simon)
* 0.6 (5-Oct-05)
** Fixed the problem with multiple games on screen at once.
** Cleaned up the JavaScript warning generated when you clicked anywhere but on a square.
* 0.7 (6-Oct-05)
** Integrated sweet additions from Genesis_mage (genisis329 at gmail dot com) that:
*** allows winning by having all non-mines clicked (without having to mark every mine)
*** added a mark button to mark and unmark mines without the keyboard
** Win time now shows tenths of a second.
* 0.71 (10-Oct-05)
** tweaked a style to make the mark button work better in IE
* 0.72 (12-Oct-05)
** worked out how to use a closure as a event handler, which means that the code added in 0.6 could be made a lot simpler.

***/
/*{{{*/

version.extensions.minesweeper = {major: 0, minor: 7, revision: 2};

config.macros.minesweeper = {};

config.macros.minesweeper.handler = function(place,macroName,params) {
    var width = params[0];
    var height = params[1];
    var bombs = params[2];

    if (width == undefined) width = 9;
    if (height == undefined) height = width;
    if (bombs == undefined) bombs = Math.round(width * height /  8)
    if (bombs &gt; width * height) bombs = width * height;

    var aGame = new MinesweeperGame();

    createTiddlyElement(place,'div',aGame.id,null,'If you see this, Minesweeper is broken.  Let Daniel know (DanielBaird at gmail dot com).');
    aGame.newGame(width, height, bombs);
}
// =======================================================================
function MinesweeperGame() {
    this.idprefix = 'mines';
    this.version = '0.72 beta';
    this.id = this.idprefix + MinesweeperGame.prototype.nextid;
    MinesweeperGame.prototype.nextid++;
    return this;
}
// -----------------------------------------------------------------------
MinesweeperGame.prototype.nextid = 0;
// -----------------------------------------------------------------------
MinesweeperGame.prototype.newGame = function(height, width, mines) {
    this.height = height;
    this.width = width;
    this.mines = mines;
    this.total = height * width;
    this.markMode = false;

    this.startGame();
}
// -----------------------------------------------------------------------
MinesweeperGame.prototype.startGame = function() {

    this.gamestate = 'ready';
    this.clicks = 0;
    this.marks = 0;
    this.message = 'click on the board to begin';

    this.starttime = null;
    this.wintime = null;
    this.board = new Array();

    // create the squares
    for (var x = 0; x &lt; this.height; x++) {
        var row = new Array();
        for (var y = 0; y &lt; this.width; y++) {
            row.push( {count: 0, mine: false, clicked: false, marked: false} );
        }
        this.board.push(row);
    }

    // add mines
    for (var m = 0; m &lt; this.mines; m++) {
        var mx = Math.round((this.height-1)*Math.random());
        var my = Math.round((this.width-1)*Math.random());
        if (this.board[mx][my].mine) {
            m--;
        } else {
            this.board[mx][my].mine = true;
        }
    }

    // work out counts
    for (var cx = 0; cx &lt; this.height; cx++) {
        for (var cy = 0; cy &lt; this.width; cy++) {
            var count = 0;
            for (var dx = -1; dx &lt; 2; dx++) {
                for (var dy = -1; dy &lt; 2; dy++) {
                    var nx = cx + dx;
                    var ny = cy + dy;
                    if ( (!(dx==0 &amp;&amp; dy==0))
                            &amp;&amp; (nx &gt;= 0) &amp;&amp; (nx &lt; this.height)
                            &amp;&amp; (ny &gt;= 0) &amp;&amp; (ny &lt; this.width)
                            &amp;&amp; this.board[nx][ny].mine) {
                        count++;
                    }
                }
            }
            this.board[cx][cy].count = count;
        }
    }
    this.showBoard();
}
// -----------------------------------------------------------------------
MinesweeperGame.prototype.showBoard = function() {
    var node = document.getElementById(this.id);
    var html = new Array();
    html.push('&lt;table class=&quot;minefield&quot; cellspacing=&quot;2&quot;&gt;');
    html.push('&lt;tr&gt;&lt;td class=&quot;info&quot; colspan=&quot;'+this.width+'&quot;&gt;');
    html.push('Minesweeper '+this.version+'&lt;br /&gt;&lt;b&gt;'+this.gamestate+'&lt;/b&gt;');
    if (this.gamestate == 'playing') {
        this.message = (this.mines - this.marks)+' mines unmarked';
    }
    html.push('&lt;/td&gt;&lt;/tr&gt;');
    for (var x = 0; x &lt; this.height; x++) {
        html.push('&lt;tr&gt;');
        for (var y = 0; y &lt; this.width; y++) {
            html.push( this.makeSquare(x,y) );
        }
        html.push('&lt;/tr&gt;');
    }
    var cls = 'un';
    if (this.markMode) cls = '';
    html.push('&lt;tr&gt;&lt;td id=&quot;'+this.id+'_markbtn&quot; class=&quot;'+cls+'clicked widebtn&quot; colspan=&quot;'+this.width+'&quot;&gt;mark / unmark mines&lt;/td&gt;&lt;/tr&gt;');
    html.push('&lt;tr&gt;&lt;td class=&quot;info&quot; colspan=&quot;'+this.width+'&quot;&gt;'+this.message);
    html.push('&lt;small&gt;');
    html.push('&lt;br /&gt;&lt;span class=&quot;minesweeper' + cls + 'show&quot;&gt;ctrl- shift- or alt-&lt;/span&gt;click to reveal a square');
    html.push('&lt;br /&gt;&lt;span class=&quot;minesweeper' + cls + 'hide&quot;&gt;ctrl- shift- or alt-&lt;/span&gt;click to mark a mine');
    html.push('&lt;/small&gt;');
    html.push('&lt;/td&gt;&lt;/tr&gt;');
    html.push('&lt;/table&gt;');
    node.innerHTML = html.join('');
    node.onclick = this.getClickHandler();
}
// -----------------------------------------------------------------------
MinesweeperGame.prototype.makeSquare = function(x,y) {
    var sq = this.board[x][y];
    var reveal = (this.gamestate != 'playing' &amp;&amp; this.gamestate != 'ready');
    var html = new Array();
    if (sq.clicked) {
        html.push('&lt;td class=&quot;clicked&quot; id=&quot;'+this.id+'_x-'+x+'_y-'+y+'&quot;&gt;');
        if (!sq.marked &amp;&amp; reveal &amp;&amp; sq.mine) {
            html.push('B!');
        } else if (!sq.marked &amp;&amp; reveal &amp;&amp; sq.mine) {
            html.push('B!');
        } else if (sq.count &gt; 0){
            html.push(sq.count);
        } else {
            html.push('&amp;nbsp;');
        }
    } else {
        html.push('&lt;td class=&quot;unclicked&quot; id=&quot;'+this.id+'_x-'+x+'_y-'+y+'&quot;&gt;');
        if (sq.marked &amp;&amp; !reveal) {
            html.push('B?');
        } else if (sq.marked &amp;&amp; sq.mine &amp;&amp; reveal) {
            html.push('B');
        } else if (sq.marked &amp;&amp; !sq.mine &amp;&amp; reveal) {
            html.push('X');
        } else if (sq.mine &amp;&amp; reveal) {
            html.push('B!');
        } else {
            html.push('&amp;nbsp;');
        }
    }
    html.push('&lt;/td&gt;');
    return html.join('');
}
// -------------------------------------------------------------------
MinesweeperGame.prototype.clickSquare = function(cx,cy,modifier) {
    if (this.gamestate == 'ready') {
        this.starttime = new Date();
        this.gamestate = 'playing';
    }
    if (this.gamestate == 'playing') {
        if (!this.board[cx][cy].clicked) {
            if ( (modifier &amp;&amp; !this.markMode) || (!modifier &amp;&amp; this.markMode) ) {
                if (this.board[cx][cy].marked) {
                    this.marks--;
                    this.board[cx][cy].marked = false;
                } else {
                    this.marks++;
                    this.board[cx][cy].marked = true;
                }
            } else if (!this.board[cx][cy].clicked &amp;&amp; !this.board[cx][cy].marked) {
                this.revealSquare(cx,cy);
            }
            this.markMode = false;
        }
        this.checkWin();
        this.showBoard();
    } else {
        // clicked when we're not playing..
        this.startGame();
    }
}
// -------------------------------------------------------------------
MinesweeperGame.prototype.revealSquare = function(x,y) {
    if (this.board[x][y].clicked == false &amp;&amp; this.board[x][y].marked == false) {
        this.board[x][y].clicked = true;
        this.clicks++;
        if (this.board[x][y].mine) {
            this.gamestate = 'boom!';
            this.message = 'click board to play again';
        } else if (this.board[x][y].count == 0) {
            // if it's a zero, we might have to reveal some other squares..
            for (var dx = -1; dx &lt; 2; dx++) {
                for (var dy = -1; dy &lt; 2; dy++) {
                    var nx = x + dx;
                    var ny = y + dy;
                    if ( (!(dx==0 &amp;&amp; dy==0)) &amp;&amp; (nx &gt;= 0) &amp;&amp; (nx &lt; this.height) &amp;&amp; (ny &gt;= 0) &amp;&amp; (ny &lt; this.width) ) {
                        this.revealSquare(nx,ny);
                    }
                }
            }
        }
    }
}
// -------------------------------------------------------------------
MinesweeperGame.prototype.handleClick = function(e) {
    // work out which cell was clicked
    if (!e) var e = window.event;
    var str = resolveTarget(e).id;
    if (str &amp;&amp; str != undefined) {
        if (str == this.id + '_markbtn') {
            this.markMode = !this.markMode;
            this.showBoard();
        } else {
            var cx = parseInt(str.substr( str.indexOf('x-')+2 ));
            var cy = parseInt(str.substr( str.indexOf('y-')+2 ));
            if ( !isNaN(cx) &amp;&amp; !isNaN(cy) ) {
                this.clickSquare(cx,cy,(e.altKey || e.shiftKey || e.ctrlKey));
            }
        }
    }
}
// -------------------------------------------------------------------
MinesweeperGame.prototype.getClickHandler = function() {
    var thisGame = this;
    return function(e) {
        thisGame.handleClick(e);
    }
}
// -------------------------------------------------------------------
MinesweeperGame.prototype.checkWin = function() {
    if (this.clicks == this.total - this.mines &amp;&amp; this.gamestate !='boom!') {
        this.gamestate = 'win';
        this.wintime = new Date();
        this.message = 'You won in '+Math.round(((this.wintime - this.starttime)/100))/10+' seconds';
        this.message = this.message + '&lt;br /&gt;click board to play again';
    }
}
// -----------------------------------------------------------------------

setStylesheet(
	&quot;.viewer .minefield { &quot;+
		&quot;background: #ddd; &quot;+
		&quot;border: double 3px black; &quot;+
		&quot;border-collapse: separate; &quot;+
		&quot;border-spacing: 2px; &quot;+
	&quot;} \n&quot;+

	&quot;.viewer .minefield td { &quot;+
		&quot;cursor: default; &quot;+
		&quot;width: 1.3em; &quot;+
		&quot;height: 1.1em; &quot;+
		&quot;text-align: center; &quot;+
		&quot;vertical-align: center; &quot;+
		&quot;background: #ddd; &quot;+
		&quot;border: 1px solid #ccc; &quot;+
	&quot;} \n&quot;+

	&quot;.viewer .minefield td.info, .viewer .minefield td.widebtn { &quot;+
		&quot;width: auto; &quot;+
	&quot;} \n&quot;+

	&quot;.minesweeperhide, .minesweeperunshow { &quot;+
		&quot;display: none; &quot;+
	&quot;} \n&quot;+

	&quot;.viewer .minefield td.unclicked { &quot;+
		&quot;cursor: pointer; &quot;+
		&quot;border-color: #fff; &quot;+
		&quot;border-right-color: #999; &quot;+
		&quot;border-bottom-color: #999; &quot;+
	&quot;} \n&quot;+
	&quot;&quot;,
	&quot;MinesweeperGame&quot;);

/*}}}*/
</pre>
</div>
<div title="NewTiddlerWithFormMacro" modifier="YourName" modified="200910091503" created="200512170854" tags="FormTiddlerProject" changecount="5">
<pre>''The newTiddlerWithForm Macro''

To create tiddlers that are referencing [[FormTemplate]]s you may use the {{{&lt;&lt;newTiddlerWithForm...&gt;&gt;}}} macro. 

The {{{&lt;&lt;newTiddlerWithForm...&gt;&gt;}}} macro displays a button. When pressed the button creates the requested tiddler and displays it. 

If no title is given in the macro (or a tiddler with the given name already exists) the user can enter the tiddlers name in a dialog.

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''newTiddlerWithForm'' //formTemplateName// //buttonLabel// [//titleExpression// [''askUser'']] {{{&gt;&gt;}}}|
|//formTemplateName//|The name of the tiddler that defines the form the new tiddler should use.|
|//buttonLabel//|The label of the button|
|//titleExpression//|A (quoted) JavaScript String expression that defines the title (/name) of the new tiddler.|
|''askUser''|Typically the user is not asked for the title when a title is specified (and not yet used). When ''askUser'' is given the user will be asked in any case. This may be used when the calculated title is just a suggestion that must be confirmed by the user|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|

''Examples''
* Ask the user for a bug report name and create a bugreport.
{{{
&lt;&lt;newTiddlerWithForm BugReportTemplate &quot;New Bugreport&quot;&gt;&gt;
}}}
&lt;&lt;newTiddlerWithForm BugReportTemplate &quot;New Bugreport&quot;&gt;&gt;

* Create a blog entry tiddler. Let the user confirm the automatically generated title (that contains the current date) or change it.
{{{
&lt;&lt;newTiddlerWithForm 
 BlogTemplate 
 &quot;New Blog&quot; 
 '&quot;Blog: &quot;+(new Date()).formatString(&quot;YYYY-MM-DD&quot;)' askUser
&gt;&gt;
}}}
&lt;&lt;newTiddlerWithForm 
 BlogTemplate 
 &quot;New Blog&quot; 
 '&quot;Blog: &quot;+(new Date()).formatString(&quot;YYYY-MM-DD&quot;)' askUser
&gt;&gt;
!Using the build-in newTiddler macro
Instead of the {{{&lt;&lt;newTiddlerWithForm&gt;&gt;}}} macro you may also use the build-in {{{&lt;&lt;newTiddler&gt;&gt;}}} macro to create tiddlers referencing [[FormTemplate]]s. E.g. you may use the {{{&lt;&lt;newTiddler&gt;&gt;}}} macro to create a tiddler with tags .

In the &quot;text&quot; you need to call the formTiddler macro and in the tagparameters you specify your tags. E.g.:
{{{
&lt;&lt;newTiddler
        label:&quot;Button Label&quot;
        text:{{&quot;&lt;&lt;formTiddler [[MyTemplateTiddler]]&gt;&quot;+&quot;&gt;&quot;}}
        tag:&quot;MyTag1&quot;
        tag:&quot;Three Word Tag&quot; 
&gt;&gt;
}}}
For details on newTiddler see http://tiddlywiki.org/wiki/NewTiddler_%28macro%29 </pre>
</div>
<div title="PageTemplate" modifier="YourName" modified="201002161631" created="200609151140" changecount="3">
<pre>&lt;div class='header' macro='gradient vert #ff8000 #ffb200'&gt;
&lt;div class='headerForeground'&gt;
&lt;span class='siteTitle'&gt;&lt;b&gt;abego&lt;/b&gt;Extensions&lt;br/&gt;&lt;/span&gt;
&lt;table width=&quot;99%&quot;&gt;&lt;tr&gt;&lt;td&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;span class='siteSubtitle' refresh='content' tiddler='SiteSubtitle'&gt;&lt;/span&gt;&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;&lt;span macro='search &quot;&quot; buttonAtRight:1'&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id='mainMenu' refresh='content' tiddler='MainMenu'&gt;&lt;/div&gt;
&lt;div id='sidebar'&gt;
&lt;div id='sidebarOptions' refresh='content' tiddler='SideBarOptions'&gt;&lt;/div&gt;
&lt;div id='sidebarTabs' refresh='content' force='true' tiddler='SideBarTabs'&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id='displayArea'&gt;
&lt;div id='messageArea'&gt;&lt;/div&gt;
&lt;div id='tiddlerDisplay'&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
</div>
<div title="PartTiddlerPlugin" modifier="UdoBorkowski" modified="200707140956" created="200601251216" tags="systemConfig">
<pre>/***
|&lt;html&gt;&lt;a name=&quot;Top&quot;/&gt;&lt;/html&gt;''Name:''|PartTiddlerPlugin|
|''Version:''|1.0.9 (2007-07-14)|
|''Source:''|http://tiddlywiki.abego-software.de/#PartTiddlerPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license]]|
|''CoreVersion:''|2.1.3|
|''Browser:''|Firefox 1.0.4+; InternetExplorer 6.0|
!Table of Content&lt;html&gt;&lt;a name=&quot;TOC&quot;/&gt;&lt;/html&gt;
* &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Description',null, event)&quot;&gt;Description, Syntax&lt;/a&gt;&lt;/html&gt;
* &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Applications',null, event)&quot;&gt;Applications&lt;/a&gt;&lt;/html&gt;
** &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('LongTiddler',null, event)&quot;&gt;Refering to Paragraphs of a Longer Tiddler&lt;/a&gt;&lt;/html&gt;
** &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Citation',null, event)&quot;&gt;Citation Index&lt;/a&gt;&lt;/html&gt;
** &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('TableCells',null, event)&quot;&gt;Creating &quot;multi-line&quot; Table Cells&lt;/a&gt;&lt;/html&gt;
** &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Tabs',null, event)&quot;&gt;Creating Tabs&lt;/a&gt;&lt;/html&gt;
** &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Sliders',null, event)&quot;&gt;Using Sliders&lt;/a&gt;&lt;/html&gt;
* &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Revisions',null, event)&quot;&gt;Revision History&lt;/a&gt;&lt;/html&gt;
* &lt;html&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Code',null, event)&quot;&gt;Code&lt;/a&gt;&lt;/html&gt;
!Description&lt;html&gt;&lt;a name=&quot;Description&quot;/&gt;&lt;/html&gt;
With the {{{&lt;part aPartName&gt; ... &lt;/part&gt;}}} feature you can structure your tiddler text into separate (named) parts. 
Each part can be referenced as a &quot;normal&quot; tiddler, using the &quot;//tiddlerName//''/''//partName//&quot; syntax (e.g. &quot;About/Features&quot;).  E.g. you may create links to the parts (e.g. {{{[[Quotes/BAX95]]}}} or {{{[[Hobbies|AboutMe/Hobbies]]}}}), use it in {{{&lt;&lt;tiddler...&gt;&gt;}}} or {{{&lt;&lt;tabs...&gt;&gt;}}} macros etc.


''Syntax:'' 
|&gt;|''&lt;part'' //partName// [''hidden''] ''&gt;'' //any tiddler content// ''&lt;/part&gt;''|
|//partName//|The name of the part. You may reference a part tiddler with the combined tiddler name &quot;//nameOfContainerTidder//''/''//partName//. &lt;&lt;br&gt;&gt;If you use a partName containing spaces you need to quote it (e.g. {{{&quot;Major Overview&quot;}}} or {{{[[Shortcut List]]}}}).|
|''hidden''|When defined the content of the part is not displayed in the container tiddler. But when the part is explicitly referenced (e.g. in a {{{&lt;&lt;tiddler...&gt;&gt;}}} macro or in a link) the part's content is displayed.|
|&lt;html&gt;&lt;i&gt;any&amp;nbsp;tiddler&amp;nbsp;content&lt;/i&gt;&lt;/html&gt;|&lt;html&gt;The content of the part.&lt;br&gt;A part can have any content that a &quot;normal&quot; tiddler may have, e.g. you may use all the formattings and macros defined.&lt;/html&gt;|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|
&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!Applications&lt;html&gt;&lt;a name=&quot;Applications&quot;/&gt;&lt;/html&gt;
!!Refering to Paragraphs of a Longer Tiddler&lt;html&gt;&lt;a name=&quot;LongTiddler&quot;/&gt;&lt;/html&gt;
Assume you have written a long description in a tiddler and now you want to refer to the content of a certain paragraph in that tiddler (e.g. some definition.) Just wrap the text with a ''part'' block, give it a nice name, create a &quot;pretty link&quot; (like {{{[[Discussion Groups|Introduction/DiscussionGroups]]}}}) and you are done.

Notice this complements the approach to first writing a lot of small tiddlers and combine these tiddlers to one larger tiddler in a second step (e.g. using the {{{&lt;&lt;tiddler...&gt;&gt;}}} macro). Using the ''part'' feature you can first write a &quot;classic&quot; (longer) text that can be read &quot;from top to bottom&quot; and later &quot;reuse&quot; parts of this text for some more &quot;non-linear&quot; reading.

&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!!Citation Index&lt;html&gt;&lt;a name=&quot;Citation&quot;/&gt;&lt;/html&gt;
Create a tiddler &quot;Citations&quot; that contains your &quot;citations&quot;. 
Wrap every citation with a part and a proper name. 

''Example''
{{{
&lt;part BAX98&gt;Baxter, Ira D. et al: //Clone Detection Using Abstract Syntax Trees.// 
in //Proc. ICSM//, 1998.&lt;/part&gt;

&lt;part BEL02&gt;Bellon, Stefan: //Vergleich von Techniken zur Erkennung duplizierten Quellcodes.// 
Thesis, Uni Stuttgart, 2002.&lt;/part&gt;

&lt;part DUC99&gt;Ducasse, Stéfane et al: //A Language Independent Approach for Detecting Duplicated Code.// 
in //Proc. ICSM//, 1999.&lt;/part&gt;
}}}

You may now &quot;cite&quot; them just by using a pretty link like {{{[[Citations/BAX98]]}}} or even more pretty, like this {{{[[BAX98|Citations/BAX98]]}}}.

&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!!Creating &quot;multi-line&quot; Table Cells&lt;html&gt;&lt;a name=&quot;TableCells&quot;/&gt;&lt;/html&gt;
You may have noticed that it is hard to create table cells with &quot;multi-line&quot; content. E.g. if you want to create a bullet list inside a table cell you cannot just write the bullet list
{{{
* Item 1
* Item 2
* Item 3
}}}
into a table cell (i.e. between the | ... | bars) because every bullet item must start in a new line but all cells of a table row must be in one line.

Using the ''part'' feature this problem can be solved. Just create a hidden part that contains the cells content and use a {{{&lt;&lt;tiddler &gt;&gt;}}} macro to include its content in the table's cell.

''Example''
{{{
|!Subject|!Items|
|subject1|&lt;&lt;tiddler ./Cell1&gt;&gt;|
|subject2|&lt;&lt;tiddler ./Cell2&gt;&gt;|

&lt;part Cell1 hidden&gt;
* Item 1
* Item 2
* Item 3
&lt;/part&gt;
...
}}}

Notice that inside the {{{&lt;&lt;tiddler ...&gt;&gt;}}} macro you may refer to the &quot;current tiddler&quot; using the &quot;.&quot;.

BTW: The same approach can be used to create bullet lists with items that contain more than one line.

&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!!Creating Tabs&lt;html&gt;&lt;a name=&quot;Tabs&quot;/&gt;&lt;/html&gt;
The build-in {{{&lt;&lt;tabs ...&gt;&gt;}}} macro requires that you defined an additional tiddler for every tab it displays. When you want to have &quot;nested&quot; tabs you need to define a tiddler for the &quot;main tab&quot; and one for every tab it contains. I.e. the definition of a set of tabs that is visually displayed at one place is distributed across multiple tiddlers.

With the ''part'' feature you can put the complete definition in one tiddler, making it easier to keep an overview and maintain the tab sets.

''Example''
The standard tabs at the sidebar are defined by the following eight tiddlers:
* SideBarTabs
* TabAll
* TabMore
* TabMoreMissing
* TabMoreOrphans
* TabMoreShadowed
* TabTags
* TabTimeline

Instead of these eight tiddlers one could define the following SideBarTabs tiddler that uses the ''part'' feature:
{{{
&lt;&lt;tabs txtMainTab 
    Timeline Timeline SideBarTabs/Timeline 
    All 'All tiddlers' SideBarTabs/All 
    Tags 'All tags' SideBarTabs/Tags 
    More 'More lists' SideBarTabs/More&gt;&gt;
&lt;part Timeline hidden&gt;&lt;&lt;timeline&gt;&gt;&lt;/part&gt;
&lt;part All hidden&gt;&lt;&lt;list all&gt;&gt;&lt;/part&gt;
&lt;part Tags hidden&gt;&lt;&lt;allTags&gt;&gt;&lt;/part&gt;
&lt;part More hidden&gt;&lt;&lt;tabs txtMoreTab 
    Missing 'Missing tiddlers' SideBarTabs/Missing 
    Orphans 'Orphaned tiddlers' SideBarTabs/Orphans 
    Shadowed 'Shadowed tiddlers' SideBarTabs/Shadowed&gt;&gt;&lt;/part&gt;
&lt;part Missing hidden&gt;&lt;&lt;list missing&gt;&gt;&lt;/part&gt;
&lt;part Orphans hidden&gt;&lt;&lt;list orphans&gt;&gt;&lt;/part&gt;
&lt;part Shadowed hidden&gt;&lt;&lt;list shadowed&gt;&gt;&lt;/part&gt;
}}}

Notice that you can easily &quot;overwrite&quot; individual parts in separate tiddlers that have the full name of the part.

E.g. if you don't like the classic timeline tab but only want to see the 100 most recent tiddlers you could create a tiddler &quot;~SideBarTabs/Timeline&quot; with the following content:
{{{
&lt;&lt;forEachTiddler 
		sortBy 'tiddler.modified' descending 
		write '(index &lt; 100) ? &quot;* [[&quot;+tiddler.title+&quot;]]\n&quot;:&quot;&quot;'&gt;&gt;
}}}
&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!!Using Sliders&lt;html&gt;&lt;a name=&quot;Sliders&quot;/&gt;&lt;/html&gt;
Very similar to the build-in {{{&lt;&lt;tabs ...&gt;&gt;}}} macro (see above) the {{{&lt;&lt;slider ...&gt;&gt;}}} macro requires that you defined an additional tiddler that holds the content &quot;to be slid&quot;. You can avoid creating this extra tiddler by using the ''part'' feature

''Example''
In a tiddler &quot;About&quot; we may use the slider to show some details that are documented in the tiddler's &quot;Details&quot; part.
{{{
...
&lt;&lt;slider chkAboutDetails About/Details details &quot;Click here to see more details&quot;&gt;&gt;
&lt;part Details hidden&gt;
To give you a better overview ...
&lt;/part&gt;
...
}}}

Notice that putting the content of the slider into the slider's tiddler also has an extra benefit: When you decide you need to edit the content of the slider you can just doubleclick the content, the tiddler opens for editing and you can directly start editing the content (in the part section). In the &quot;old&quot; approach you would doubleclick the tiddler, see that the slider is using tiddler X, have to look for the tiddler X and can finally open it for editing. So using the ''part'' approach results in a much short workflow.

&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!Revision history&lt;html&gt;&lt;a name=&quot;Revisions&quot;/&gt;&lt;/html&gt;
* v1.0.9 (2007-07-14)
** Bugfix: Error when using the SideBarTabs example and switching between &quot;More&quot; and &quot;Shadow&quot;. Thanks to cmari for reporting the issue.
* v1.0.8 (2007-06-16)
** Speeding up display of tiddlers containing multiple pard definitions. Thanks to Paco Rivière for reporting the issue.
** Support &quot;./partName&quot; syntax inside &lt;&lt;tabs ...&gt;&gt; macro
* v1.0.7 (2007-03-07)
** Bugfix: &lt;&lt;tiddler &quot;./partName&quot;&gt;&gt; does not always render correctly after a refresh (e.g. like it happens when using the &quot;Include&quot; plugin). Thanks to Morris Gray for reporting the bug.
* v1.0.6 (2006-11-07)
** Bugfix: cannot edit tiddler when UploadPlugin by Bidix is installed. Thanks to José Luis González Castro for reporting the bug.
* v1.0.5 (2006-03-02)
** Bugfix: Example with multi-line table cells does not work in IE6. Thanks to Paulo Soares for reporting the bug.
* v1.0.4 (2006-02-28)
** Bugfix: Shadow tiddlers cannot be edited (in TW 2.0.6). Thanks to Torsten Vanek for reporting the bug.
* v1.0.3 (2006-02-26)
** Adapt code to newly introduced Tiddler.prototype.isReadOnly() function (in TW 2.0.6). Thanks to Paulo Soares for reporting the problem.
* v1.0.2 (2006-02-05)
** Also allow other macros than the &quot;tiddler&quot; macro use the &quot;.&quot; in the part reference (to refer to &quot;this&quot; tiddler)
* v1.0.1 (2006-01-27)
** Added Table of Content for plugin documentation. Thanks to RichCarrillo for suggesting.
** Bugfix: newReminder plugin does not work when PartTiddler is installed. Thanks to PauloSoares for reporting.
* v1.0.0 (2006-01-25)
** initial version
&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!Code&lt;html&gt;&lt;a name=&quot;Code&quot;/&gt;&lt;/html&gt;
&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;window.scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;
***/
//{{{
//============================================================================
//                           PartTiddlerPlugin

// Ensure that the PartTiddler Plugin is only installed once.
//
if (!version.extensions.PartTiddlerPlugin) {



version.extensions.PartTiddlerPlugin = {
    major: 1, minor: 0, revision: 9,
    date: new Date(2007, 6, 14), 
    type: 'plugin',
    source: &quot;http://tiddlywiki.abego-software.de/#PartTiddlerPlugin&quot;
};

if (!window.abego) window.abego = {};
if (version.major &lt; 2) alertAndThrow(&quot;PartTiddlerPlugin requires TiddlyWiki 2.0 or newer.&quot;);

//============================================================================
// Common Helpers

// Looks for the next newline, starting at the index-th char of text. 
//
// If there are only whitespaces between index and the newline 
// the index behind the newline is returned, 
// otherwise (or when no newline is found) index is returned.
//
var skipEmptyEndOfLine = function(text, index) {
	var re = /(\n|[^\s])/g;
	re.lastIndex = index;
	var result = re.exec(text);
	return (result &amp;&amp; text.charAt(result.index) == '\n') 
			? result.index+1
			: index;
}


//============================================================================
// Constants

var partEndOrStartTagRE = /(&lt;\/part&gt;)|(&lt;part(?:\s+)((?:[^&gt;])+)&gt;)/mg;
var partEndTagREString = &quot;&lt;\\/part&gt;&quot;;
var partEndTagString = &quot;&lt;/part&gt;&quot;;

//============================================================================
// Plugin Specific Helpers

// Parse the parameters inside a &lt;part ...&gt; tag and return the result.
//
// @return [may be null] {partName: ..., isHidden: ...}
//
var parseStartTagParams = function(paramText) {
	var params = paramText.readMacroParams();
	if (params.length == 0 || params[0].length == 0) return null;
	
	var name = params[0];
	var paramsIndex = 1;
	var hidden = false;
	if (paramsIndex &lt; params.length) {
		hidden = params[paramsIndex] == &quot;hidden&quot;;
		paramsIndex++;
	}
	
	return {
		partName: name, 
		isHidden: hidden
	};
}

// Returns the match to the next (end or start) part tag in the text, 
// starting the search at startIndex.
// 
// When no such tag is found null is returned, otherwise a &quot;Match&quot; is returned:
// [0]: full match
// [1]: matched &quot;end&quot; tag (or null when no end tag match)
// [2]: matched &quot;start&quot; tag (or null when no start tag match)
// [3]: content of start tag (or null if no start tag match)
//
var findNextPartEndOrStartTagMatch = function(text, startIndex) {
	var re = new RegExp(partEndOrStartTagRE);
	re.lastIndex = startIndex;
	var match = re.exec(text);
	return match;
}

//============================================================================
// Formatter

// Process the &lt;part ...&gt; ... &lt;/part&gt; starting at (w.source, w.matchStart) for formatting.
//
// @return true if a complete part section (including the end tag) could be processed, false otherwise.
//
var handlePartSection = function(w) {
	var tagMatch = findNextPartEndOrStartTagMatch(w.source, w.matchStart);
	if (!tagMatch) return false;
	if (tagMatch.index != w.matchStart || !tagMatch[2]) return false;

	// Parse the start tag parameters
	var arguments = parseStartTagParams(tagMatch[3]);
	if (!arguments) return false;
	
	// Continue processing
	var startTagEndIndex = skipEmptyEndOfLine(w.source, tagMatch.index + tagMatch[0].length);
	var endMatch = findNextPartEndOrStartTagMatch(w.source, startTagEndIndex);
	if (endMatch &amp;&amp; endMatch[1]) {
		if (!arguments.isHidden) {
			w.nextMatch = startTagEndIndex;
			w.subWikify(w.output,partEndTagREString);
		}
		w.nextMatch = skipEmptyEndOfLine(w.source, endMatch.index + endMatch[0].length);
		
		return true;
	}
	return false;
}

config.formatters.push( {
    name: &quot;part&quot;,
    match: &quot;&lt;part\\s+[^&gt;]+&gt;&quot;,
	
	handler: function(w) {
		if (!handlePartSection(w)) {
			w.outputText(w.output,w.matchStart,w.matchStart+w.matchLength);
		}
	}
} )

//============================================================================
// Extend &quot;fetchTiddler&quot; functionality to also recognize &quot;part&quot;s of tiddlers 
// as tiddlers.

var currentParent = null; // used for the &quot;.&quot; parent (e.g. in the &quot;tiddler&quot; macro)

// Return the match to the first &lt;part ...&gt; tag of the text that has the
// requrest partName.
//
// @return [may be null]
//
var findPartStartTagByName = function(text, partName) {
	var i = 0;
	
	while (true) {
		var tagMatch = findNextPartEndOrStartTagMatch(text, i);
		if (!tagMatch) return null;

		if (tagMatch[2]) {
			// Is start tag
	
			// Check the name
			var arguments = parseStartTagParams(tagMatch[3]);
			if (arguments &amp;&amp; arguments.partName == partName) {
				return tagMatch;
			}
		}
		i = tagMatch.index+tagMatch[0].length;
	}
}

// Return the part &quot;partName&quot; of the given parentTiddler as a &quot;readOnly&quot; Tiddler 
// object, using fullName as the Tiddler's title. 
//
// All remaining properties of the new Tiddler (tags etc.) are inherited from 
// the parentTiddler.
// 
// @return [may be null]
//
var getPart = function(parentTiddler, partName, fullName) {
	var text = parentTiddler.text;
	var startTag = findPartStartTagByName(text, partName);
	if (!startTag) return null;
	
	var endIndexOfStartTag = skipEmptyEndOfLine(text, startTag.index+startTag[0].length);
	var indexOfEndTag = text.indexOf(partEndTagString, endIndexOfStartTag);

	if (indexOfEndTag &gt;= 0) {
		var partTiddlerText = text.substring(endIndexOfStartTag,indexOfEndTag);
		var partTiddler = new Tiddler();
		partTiddler.set(
						fullName,
						partTiddlerText,
						parentTiddler.modifier,
						parentTiddler.modified,
						parentTiddler.tags,
						parentTiddler.created);
		partTiddler.abegoIsPartTiddler = true;
		return partTiddler;
	}
	
	return null;
}

// Hijack the store.fetchTiddler to recognize the &quot;part&quot; addresses.
//
var hijackFetchTiddler = function() {
	var oldFetchTiddler = store.fetchTiddler ;
	store.fetchTiddler = function(title) {
		var result = oldFetchTiddler.apply(this, arguments);
		if (!result &amp;&amp; title) {
			var i = title.lastIndexOf('/');
			if (i &gt; 0) {
				var parentName = title.substring(0, i);
				var partName = title.substring(i+1);
				var parent = (parentName == &quot;.&quot;) 
						? store.resolveTiddler(currentParent)
						: oldFetchTiddler.apply(this, [parentName]);
				if (parent) {
					return getPart(parent, partName, parent.title+&quot;/&quot;+partName);
				}
			}
		}
		return result;	
	};
};

// for debugging the plugin is not loaded through the systemConfig mechanism but via a script tag. 
// At that point in the &quot;store&quot; is not yet defined. In that case hijackFetchTiddler through the restart function.
// Otherwise hijack now.
if (!store) {
	var oldRestartFunc = restart;
	window.restart = function() {
		hijackFetchTiddler();
		oldRestartFunc.apply(this,arguments);
	};
} else
	hijackFetchTiddler();




// The user must not edit a readOnly/partTiddler
//

config.commands.editTiddler.oldIsReadOnlyFunction = Tiddler.prototype.isReadOnly;

Tiddler.prototype.isReadOnly = function() {
	// Tiddler.isReadOnly was introduced with TW 2.0.6.
	// For older version we explicitly check the global readOnly flag
	if (config.commands.editTiddler.oldIsReadOnlyFunction) {
		if (config.commands.editTiddler.oldIsReadOnlyFunction.apply(this, arguments)) return true;
	} else {
		if (readOnly) return true;
	}

	return this.abegoIsPartTiddler;
}

config.commands.editTiddler.handler = function(event,src,title)
{
	var t = store.getTiddler(title);
	// Edit the tiddler if it either is not a tiddler (but a shadowTiddler)
	// or the tiddler is not readOnly
	if(!t || !t.abegoIsPartTiddler)
		{
		clearMessage();
		story.displayTiddler(null,title,DEFAULT_EDIT_TEMPLATE);
		story.focusTiddler(title,&quot;text&quot;);
		return false;
		}
}

// To allow the &quot;./partName&quot; syntax in macros we need to hijack 
// the invokeMacro to define the &quot;currentParent&quot; while it is running.
// 
var oldInvokeMacro = window.invokeMacro;
function myInvokeMacro(place,macro,params,wikifier,tiddler) {
	var oldCurrentParent = currentParent;
	if (tiddler) currentParent = tiddler;
	try {
		oldInvokeMacro.apply(this, arguments);
	} finally {
		currentParent = oldCurrentParent;
	}
}
window.invokeMacro = myInvokeMacro;

// To correctly support the &quot;./partName&quot; syntax while refreshing we need to hijack 
// the config.refreshers.tiddlers to define the &quot;currentParent&quot; while it is running.
// 
(function() {
	var oldTiddlerRefresher= config.refreshers.tiddler;
	config.refreshers.tiddler = function(e,changeList) {
		var oldCurrentParent = currentParent;
		try {
			currentParent = e.getAttribute(&quot;tiddler&quot;);
			return oldTiddlerRefresher.apply(this,arguments);
		} finally {
			currentParent = oldCurrentParent;
		}
	};
})();

// Support &quot;./partName&quot; syntax inside &lt;&lt;tabs ...&gt;&gt; macro
(function() {
	var extendRelativeNames = function(e, title) {
		var nodes = e.getElementsByTagName(&quot;a&quot;);
		for(var i=0; i&lt;nodes.length; i++) {
			var node = nodes[i];
			var s = node.getAttribute(&quot;content&quot;);
			if (s &amp;&amp; s.indexOf(&quot;./&quot;) == 0)
				node.setAttribute(&quot;content&quot;,title+s.substr(1));
		}
	};
	var oldHandler = config.macros.tabs.handler;
	config.macros.tabs.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
		var result = oldHandler.apply(this,arguments);
		if (tiddler)
			extendRelativeNames(place, tiddler.title);
		return result;
	};
})();

// Scroll the anchor anchorName in the viewer of the given tiddler visible.
// When no tiddler is defined use the tiddler of the target given event is used.
window.scrollAnchorVisible = function(anchorName, tiddler, evt) {
	var tiddlerElem = null;
	if (tiddler) {
		tiddlerElem = document.getElementById(story.idPrefix + tiddler);
	}
	if (!tiddlerElem &amp;&amp; evt) {
		var target = resolveTarget(evt);
		tiddlerElem = story.findContainingTiddler(target);
	}
	if (!tiddlerElem) return;

	var children = tiddlerElem.getElementsByTagName(&quot;a&quot;);
	for (var i = 0; i &lt; children.length; i++) {
		var child = children[i];
		var name = child.getAttribute(&quot;name&quot;);
		if (name == anchorName) {
			var y = findPosY(child);
			window.scrollTo(0,y);
			return;
		}
	}
}

} // of &quot;install only once&quot;
//}}}

/***
&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;

!Licence and Copyright
Copyright (c) abego Software ~GmbH, 2006 ([[www.abego-software.de|http://www.abego-software.de]])

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of abego Software nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

&lt;html&gt;&lt;sub&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;scrollAnchorVisible('Top',null, event)&quot;&gt;[Top]&lt;/sub&gt;&lt;/a&gt;&lt;/html&gt;
***/
</pre>
</div>
<div title="Plugins" modifier="UdoBorkowski" modified="200710031401" created="200512281221" tags="basic">
<pre>|!Plugin|!Description|
|AutoRefreshPlugin|A tiddler containing the {{{&lt;&lt;autoRefresh...&gt;&gt;}}} macro is automatically refreshed (re-painted) whenever a tiddler changes.|
|[[DataTiddlerPlugin]]|Enhance your tiddlers with structured data (such as strings, booleans, numbers, or even arrays and compound objects) that can be easily accessed and modified through named fields (in JavaScript code).|
|[[IntelliTagsEditCommandPlugin]]|A command for your tiddler's toolbar to directly edit the tiddler's tags using the IntelliTaggerPlugin, without switching to &quot;edit mode&quot;.|
|[[ForEachTiddlerPlugin]]|Create customizable lists, tables etc. for your selections of tiddlers. Specify the tiddlers to include and their order through a powerful language.|
|[[FormTiddlerPlugin]]|Use form-based tiddlers to enter your tiddler data using text fields, listboxes, checkboxes etc. (All standard HTML Form input elements supported).|
|[[IncludePlugin]]|„Include“ other ~TiddlyWikis in your „main“ TiddlyWiki, link to included tiddlers, view them in your „main“ TiddlyWiki (without opening another TiddlyWiki). Even „search“ looks for included tiddlers. A great way to share tiddlers, to speed up &quot;save changes&quot; and to keep your ~TiddlyWikis small.|
|[[IntelliTaggerPlugin]]|Speed up tagging tiddlers using tag autocompletion and correction, tag suggestions and context sensitive tag guessing, &quot;Edit Tags only&quot; mode and many more. Especially when you are working with a lot of tags this is the plugin you are looking for.|
|[[PartTiddlerPlugin]]|With the {{{&lt;part aPartName&gt; ... &lt;/part&gt;}}} feature you can structure your tiddler text into separate parts. Each part can be referenced as a &quot;normal&quot; tiddler, using the &quot;tiddlerName/partName&quot; syntax.|
|[[SettingsPlugin]]|Manage your option settings' scope: keep settings private to a ~TiddlyWiki or share them with other ~TiddlyWikis.|
|[[TiddlerWithParamsPlugin]]|The plugin extends the build-in {{{&lt;&lt;tiddler...&gt;&gt;}}} macro. It replaces placeholders ($1, $2, ...) in the tiddler by values passed with the macro before it inserts the (replaced) text at the macro's location.|
|[[XHTML10Plugin]]|Make your TiddlyWiki XHTML 1.0 compliant.|
|[[YourSearchPlugin]]|Search your TiddlyWiki with advanced search features such as result lists, tiddler preview, result ranking, search filters, combined searches and many more.|

Read [[Installing Plugins]] on how to install these plugins in your TiddlyWiki.

Previous versions of these plugins (e.g. to run in older versions of TiddlyWiki) you may find in the [[archive|http://tiddlywiki.abego-software.de/archive]].</pre>
</div>
<div title="PrivateSettings" modifier="UdoBorkowski" modified="200610122049" created="200607301603" tags="excludeLists excludeSearch">
<pre>txtMainTab=Timeline; txtMoreTab=Shadowed; chkSliderOptionsPanel=true; chkFETActions=true</pre>
</div>
<div title="Programming with the IncludePlugin" modifier="YourName" modified="200907150741" created="200709091021" tags="Documentation IncludePlugin" changecount="2">
<pre>Every TiddlyWiki included using the IncludePlugin is loaded into memory and can be accessed through a &quot;TiddlyWiki&quot; object. This is a &quot;TiddlyWiki&quot; object just as the object stored in the global &quot;store&quot; object, used to access the TiddlyWiki you are running.

To get the TiddlyWiki (&quot;store&quot;) object of an included TiddlyWiki you may use:
{{{
	var includedStore = abego.TiddlyWikiIncluder.getStore(tiddyWikiURL)
}}}
With the returned TiddlyWiki object you can do the same things you would do with the &quot;store&quot; object. E.g. you may iterate through the Tiddlers of the store etc.

''Example: List tiddlers from included TiddlyWiki changed after a given date''

Assume you have included &quot;http://www.tiddlywiki.com/index.html&quot; and want to list the tiddlers of that TiddlyWiki that have changed after July 1st, 2007.

You may then use this script:
{{{
&lt;script&gt;
var twStore = abego.TiddlyWikiIncluder.getStore(&quot;http://www.tiddlywiki.com/index.html&quot;);
var list = [];
twStore.forEachTiddler(function(title,tiddler) {
    if (tiddler.modified &gt; new Date(&quot;July 1, 2007&quot;))
        list.push(title);
});
return &quot;* [[&quot;+list.join(&quot;]]\n* [[&quot;)+&quot;]]\n&quot;;
&lt;/script&gt;
}}}
//(To use the {{{&lt;script&gt;}}} tag you must install the InlineJavascriptPlugin (http://www.TiddlyTools.com/#InlineJavascriptPlugin))//

(See also [[List Tiddlers of an included TiddlyWiki (using the ForEachTiddlerMacro)]])

''Example: List all hidden Tiddlers of included TiddlyWikis''

For a more extended example see: [[List all hidden tiddlers of included TiddlyWikis]]


</pre>
</div>
<div title="Published new abegoExtensions revision (29 December 2009)" modifier="YourName" modified="200912291435" created="200912291353" tags="Task Admin" changecount="4">
<pre>[ ... Here goes the detailed documentation for the tiddler ... ]</pre>
</div>
<div title="Receipt Four Seasons" modifier="UdoBorkowski" created="200512121747" tags="DataTiddlerProject expense">
<pre>&lt;&lt;showData&gt;&gt;
&lt;data&gt;{&quot;month&quot;:&quot;Dec&quot;, &quot;descr&quot; : &quot;Hotel&quot;, &quot;amount&quot; : 149}&lt;/data&gt;</pre>
</div>
<div title="ScriptClauseExamples" modifier="UdoBorkowski" created="200512081504" tags="ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the scriptClause in the ForEachTiddlerMacro.

&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;scriptClauseExample&quot;)'
&gt;&gt;

See also ForEachTiddlerExamples.</pre>
</div>
<div title="SettingsPlugin" modifier="UdoBorkowski" modified="200607301605" created="200604041820" tags="Plugin Public SettingsPlugin systemConfig systemConfigX">
<pre>/***
|''Name:''|SettingsPlugin|
|''Version:''|1.1.0 (2006-07-30)|
|''Type:''|plugin|
|''Source:''|http://tiddlywiki.abego-software.de/#SettingsPlugin|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Documentation:''|[[SettingsPlugin Documentation]]|
|''~SourceCode:''|[[SettingsPlugin SourceCode]]|
|''Licence:''|[[BSD open source license (abego Software)]]|
|''~CoreVersion:''|2.0.7|
|''Browser:''|Firefox 1.5.0.2 or better; Internet Explorer 6.0|
^^This tiddler contains compressed source code. [[Full Source Code|SettingsPlugin SourceCode]].^^
***/
// /%
if(!version.extensions.SettingsPlugin){if(version.major&lt;2){(function(){var s=&quot;Use TiddlyWiki 2.0 or better to run the Settings Plugin.&quot;;alert(s);throw s;})();}version.extensions.SettingsPlugin={major:1,minor:1,revision:0,date:new Date(2006,6,30),type:&quot;plugin&quot;,source:&quot;http://tiddlywiki.abego-software.de/#SettingsPlugin&quot;,documentation:&quot;[[SettingsPlugin Documentation]]&quot;,sourcecode:&quot;[[SettingsPlugin SourceCode]]&quot;,author:&quot;Udo Borkowski (ub [at] abego-software [dot] de)&quot;,licence:&quot;[[BSD open source license (abego Software)]]&quot;,coreVersion:&quot;2.0.7&quot;,browser:&quot;Firefox 1.5.0.2 or better; Internet Explorer 6.0&quot;};if(!window.abego){window.abego={};}if(!abego.setTiddlerText){abego.setTiddlerText=function(_2,_3,_4,_5,_6,_7){var _8=_2.getTiddler(_3);if(_8&amp;&amp;(_8.text==_4)){return;}var _9=config.options.chkForceMinorUpdate;var _a=!_8?_5:_8.tags;_2.suspendNotifications();try{_2.saveTiddler(_3,_3,_4,_9?undefined:config.options.txtUserName,_9?undefined:new Date(),_a);}finally{_2.resumeNotifications();}if(_7){_2.notify(_3,true);}if(!_6&amp;&amp;config.options.chkAutoSave){saveChanges();}};}(function(){var _b=&quot;PrivateSettings&quot;;var _c=&quot;chkUsePrivateSettings&quot;;var _d=&quot;chkMakeSettingPrivateWhenChanged&quot;;var _e=null;var _f=false;var _10=function(_11,s){var _13=s.split(&quot;;&quot;);var _14={};for(var c=0;c&lt;_13.length;c++){var p=_13[c].indexOf(&quot;=&quot;);if(p!=-1){var _17=_13[c].substr(0,p).trim();var _18=_13[c].substr(p+1).trim();_11[_17]=unescape(_18);_14[_17]=true;}}return _14;};var _19=function(_1a){var s=store.getTiddlerText(_b);_e=s?_10(_1a,s):{};};var _1c=function(_1d){_10(_1d,document.cookie);};var _1e=function(){var _1f={};_1c(_1f);return _1f;};var _20=function(){var _21={};_19(_21);return _21;};var _22=function(_23,_24){document.cookie=_23+&quot;=&quot;+escape(_24)+&quot;; expires=Fri, 1 Jan 2038 12:00:00 UTC; path=/&quot;;};var _25=function(_26,s,_28){var _29=_20();if(s===null){if(!_e[_26]){return;}delete _29[_26];delete _e[_26];}else{var _2a=_29[_26];if(_2a!==undefined&amp;&amp;_2a==s){return;}_29[_26]=s;_e[_26]=true;}var t=&quot;&quot;;for(var i in _29){if(t){t+=&quot;; &quot;;}t+=i+&quot;=&quot;+escape(_29[i]);}abego.setTiddlerText(store,_b,t,[&quot;excludeLists&quot;,&quot;excludeSearch&quot;],_28);if(!_28&amp;&amp;config.options.chkAutoSave){saveChanges();}};config.shadowTiddlers[&quot;BSD open source license (abego Software)&quot;]=&quot;See [[Licence|http://tiddlywiki.abego-software.de/#%5B%5BBSD%20open%20source%20license%5D%5D]].&quot;;config.shadowTiddlers[&quot;SettingsPlugin Documentation&quot;]=&quot;[[Documentation on abego Software website|http://tiddlywiki.abego-software.de/#%5B%5BSettingsPlugin%20Documentation%5D%5D]].\n\n^^You may copy the documentation tiddler from the website to your TiddlyWiki.\nThen you don't need to access the internet to read the documentation.^^&quot;;config.shadowTiddlers[&quot;SettingsPlugin SourceCode&quot;]=&quot;Rightclick this [[link|http://tiddlywiki.abego-software.de/src/Plugin-Settings-src.js]] and choose 'Save target/link as...' to get the plugin source code from the abego Software website.&quot;;config.shadowTiddlers[&quot;Show Settings&quot;]=&quot;&lt;&lt;showSettings&gt;&gt;&quot;;if(config.options[_c]===undefined){config.options[_c]=false;}if(config.options[_d]===undefined){config.options[_d]=false;}config.shadowTiddlers.AdvancedOptions+=&quot;\n''Private Settings: ''&lt;&lt;option &quot;+_c+&quot;&gt;&gt; Use private settings.  &lt;&lt;option &quot;+_d+&quot;&gt;&gt; Make setting private when changed.&amp;#160;&amp;#160;&amp;#160;[[Show Settings]].\n^^(Private settings are stored in this ~TiddlyWiki, shared settings are stored as cookies. For more information see the [[Settings documentation|SettingsPlugin Documentation]].)^^&quot;;abego.usePrivateSettings=function(){return _f;};abego.setUsePrivateSettings=function(f){if(f!=abego.usePrivateSettings()){_f=f;loadOptionsCookie();}};abego.isUsePrivateSettingsOption=function(_2e){return _2e==_c;};abego.makeSettingPrivateWhenChanged=function(){return config.options[_d];};abego.setMakeSettingPrivateWhenChanged=function(f){config.options[_d]=f;};abego.getSettings=function(){var _30={};_1c(_30);_f=_30[_c]==&quot;true&quot;;if(abego.usePrivateSettings()){_19(_30);}return _30;};abego.getSetting=function(_31){var s=abego.getSettings()[_31];return !s?&quot;&quot;:s;};abego.saveSetting=function(_33,_34){if(abego.isUsePrivateSettingsOption(_33)){_22(_33,_34);abego.setUsePrivateSettings(_34==&quot;true&quot;);loadOptionsCookie();window.alert(&quot;You changed the 'Use private settings' option.\nPlease reload your TiddlyWiki to update the settings.\n&quot;);return;}if(abego.usePrivateSettings()&amp;&amp;(abego.isSettingPrivate(_33)||abego.makeSettingPrivateWhenChanged())){_25(_33,_34);}else{_22(_33,_34);}};abego.isSettingPrivate=function(_35){if(abego.isUsePrivateSettingsOption(_35)){return false;}if(!_e){_20();}return !!_e[_35];};abego.isPasswordSetting=function(_36){return (_36.substr(0,3)==&quot;pas&quot;)||(_36.substr(0,6)==&quot;chkpas&quot;);};abego.makeSettingPrivate=function(_37,_38,_39){if(abego.isPasswordSetting(_37)){_25(_37,null,_39);return;}var _3a=_20();var _3b=_3a[_37]!==undefined;if(_38==_3b){return;}var _3c=_1e();if(_38){_25(_37,_3c[_37],_39);}else{if(_3c[_37]===undefined){_22(_37,_3a[_37]);}_25(_37,null,_39);}};abego.setAllSettingsPrivate=function(_3d,_3e){var _3f=abego.getSettings();for(var s in _3f){abego.makeSettingPrivate(s,_3d,true);}if(config.options.chkAutoSave){saveChanges();}if(_3e){story.refreshTiddler(_3e,1,true);}return false;};})();config.macros.showSettings={label:&quot;showSettings&quot;,prompt:&quot;Display the current TiddlyWiki settings&quot;};config.macros.showSettings.handler=function(_41,_42,_43,_44,_45,_46){var _47=function(a){var s=a.substr(0,3);return s==&quot;txt&quot;||s==&quot;chk&quot;;};var _4a=function(a,b){var s1=a.toLowerCase();var s2=b.toLowerCase();return (s1&lt;s2)?-1:(s1==s2)?0:1;};var _4f=function(a,b){var _52=_47(a);var _53=_47(b);if(_52){if(!_53){return -1;}else{return _4a(a.substr(3),b.substr(3));}}else{if(_53){return 1;}else{return _4a(a,b);}}};var s=&quot;&lt;html&gt;&lt;table&gt;&lt;tr align=\&quot;left\&quot;&gt;&lt;th&gt;Private&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;&quot;;var c=abego.getSettings();var _56=[];for(var i in c){if(!abego.isPasswordSetting(i)){_56.push(i);}}_56.sort(_4f);for(i=0;i&lt;_56.length;i++){var _58=_56[i];var _59=_47(_58)?_58.substr(3)+&quot; (&quot;+_58.substr(0,3)+&quot;...)&quot;:_58;var _5a=abego.isUsePrivateSettingsOption(_58)?&quot;&quot;:&quot;&lt;input name=\&quot;&quot;+_58+&quot;\&quot; type=\&quot;checkbox\&quot; onclick=\&quot;abego.onPrivateSettingClick(this)\&quot;&quot;+(abego.isSettingPrivate(_58)?&quot; checked&quot;:&quot;&quot;)+&quot;/&gt;&quot;;s+=&quot;&lt;tr&gt;&lt;td align=\&quot;right\&quot;&gt;&quot;+_5a+&quot;&lt;/td&gt;&lt;td&gt;&quot;+_59+&quot;&lt;/td&gt;&lt;td&gt;&quot;+c[_58]+&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;;}s+=&quot;&lt;/table&gt;&quot;;s+=&quot;&lt;a class=\&quot;button\&quot; title=\&quot;Make all current settings private\&quot; href=\&quot;javascript:;\&quot; onclick=\&quot;abego.setAllSettingsPrivate(true,'&quot;+_46.title+&quot;',1);\&quot;&gt;Make all private&lt;/a&gt;&quot;;s+=&quot;&lt;a class=\&quot;button\&quot; title=\&quot;Make all current settings shared\&quot; href=\&quot;javascript:;\&quot; onclick=\&quot;abego.setAllSettingsPrivate(false,'&quot;+_46.title+&quot;',1);\&quot;&gt;Make all shared&lt;/a&gt;&quot;;s+=&quot;&lt;/html&gt;&quot;;wikify(s,_41);};abego.onPrivateSettingClick=function(_5b){abego.makeSettingPrivate(_5b.name,_5b.checked);return false;};this.loadOptionsCookie=function(){if(safeMode){return;}var _5c=abego.getSettings();for(var _5d in _5c){var _5e=_5c[_5d];switch(_5d.substr(0,3)){case &quot;txt&quot;:config.options[_5d]=unescape(_5e);break;case &quot;chk&quot;:config.options[_5d]=_5e==&quot;true&quot;;break;}}};this.saveOptionCookie=function(_5f){if(safeMode){return;}var v=&quot;&quot;;switch(_5f.substr(0,3)){case &quot;txt&quot;:v=config.options[_5f].toString();break;case &quot;chk&quot;:v=config.options[_5f]?&quot;true&quot;:&quot;false&quot;;break;}abego.saveSetting(_5f,v);};loadOptionsCookie();}
// %/

</pre>
</div>
<div title="SettingsPlugin Documentation" modifier="UdoBorkowski" modified="200607301607" created="200604022216" tags="Documentation Public SettingsPlugin">
<pre>!Description
By default the settings that you can change in the [[options|OptionsPanel]] panel and the [[AdvancedOptions]] are shared by all ~TiddlyWikis of the same site.
 
This also means that all your local ~TiddlyWikis share the same settings. This is not always what you want, especially when you are working with multiple local ~TiddlyWikis at once.

The SettingsPlugin allows you to decide &quot;per setting&quot; if a setting should be shared by all ~TiddlyWikis or if a setting should be &quot;private&quot; to a given ~TiddlyWiki. Alternatively you may also decide that all settings should be private to a given ~TiddlyWiki.

''Using Private Settings''

By default all settings are &quot;shared&quot;, i.e. the settings behave in their standard way. To enable the &quot;private settings&quot; feature check the &quot;Use private settings&quot; checkbox in the AdvancedOptions.

Once private settings are enabled you have two options:
* All changes to settings should be &quot;private&quot;, i.e. don't affect other ~TiddlyWikis. Therefore check the &quot;Make setting private when changed&quot; checkbox in the AdvancedOptions. 
* Individual settings should be private. You can specify the settings in the [[Show Settings]] tiddler. Here you can also make all settings shared or private, with one click. The [[Show Settings]] tiddler can be accessed through the AdvancedOptions.

You can decide what settings should be private or shared individually for every ~TiddlyWiki.

You may temporarily switch off &quot;Use private settings&quot;. Then your private settings will not be used. When you switch on again &quot;Use Private Settings&quot;, your decision what settings should be private or shared and also the private values will be remembered.

''How Settings are Stored''

As in the original ~TiddlyWiki code shared settings/options are stored as &quot;cookies&quot; with your browser.
Private settings are stored in a tiddler of the ~TiddlyWiki. You need to ensure that the ~TiddlyWiki can be saved when you want to keep your private settings.


!Revision history
* v1.1.0
** Support Internet Explorer
** Don't save password options (&quot;pas...&quot;/&quot;chkpas...&quot;) as private settings, and don't display them in the showSettings. Thanks to BidiX for the implementation.
** Bugfix: Invalid syntax HTML stmt for the &quot;private&quot; settings checkboxes. Thanks to BidiX for the fix.
* v1.0.2
** Bugfix: corrected &quot;suspendNotification&quot; bug. Thanks to Jack, BobEverson and MorrisGray for reporting.
* v1.0.1 
** Bugfix: Corrected wrong comment in compressed version of plugin.
** Internal: Simplified &quot;saveTiddler&quot; code. Thanks to Jeremy Ruston for the suggestion.
* v1.0.0 (2006-04-03)
** initial version


!Code
The SettingsPlugin SourceCode contains compressed source code. You will find the full source code [[here|SettingsPlugin SourceCode]].
</pre>
</div>
<div title="SettingsPlugin SourceCode" modifier="UdoBorkowski" created="200609161825">
<pre>For SettingsPlugin source code see the [[archive|http://tiddlywiki.abego-software.de/archive]].</pre>
</div>
<div title="Show a table with title and tags of all tiddlers that contain the text 'it' in their titles" modifier="UdoBorkowski" created="200511200229" tags="ForEachTiddlerMacro whereClauseExample writeActionExample">
<pre>{{{
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)'
 write
 '&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.tags+&quot;|\n&quot;'
&gt;&gt;
}}}

//''Explaination:''//

The interesting part of this task is the creation of the table.

The idea here is to &quot;write&quot; the same stuff that you would write manually in a tiddler to generate such a table. For every tiddler you would write:
|{{{|[[}}}//titleOfTiddler//{{{]]|}}}//tagsOfTiddler//{{{|}}}|

Instead of typing the title and looking up the tags you can just ask the [[ForEachTiddlerMacro]] to do the job:
* instead of //titleOfTiddler// you write {{{tiddler.title}}}
* instead of //tagsOfTiddler// you write {{{tiddler.tags}}}

You now need to create a JavaScript expression to build the complete line together:
* The constant parts ({{{|[[}}}, {{{]]|}}} and {{{|}}}) must be quoted:{{{&quot;|[[&quot;}}}, {{{&quot;]]|&quot;}}} and {{{&quot;|&quot;}}}
* The part are all concatenated to one long string.
* At the end we need a &quot;newline&quot; character (&quot;\n&quot;) to start the next tiddler in a new line.

This all ends up in: {{{&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.tags+&quot;|\n&quot;}}}.

//''Result:''//
&lt;&lt;forEachTiddler 
 where 
 'tiddler.title.contains(&quot;it&quot;)'
 write
 '&quot;|[[&quot;+tiddler.title+&quot;]]|&quot;+tiddler.tags+&quot;|\n&quot;'
&gt;&gt;

See also ForEachTiddlerExamples.</pre>
</div>
<div title="Show the contents of all tiddlers that start with 'Site'" modifier="UdoBorkowski" created="200511200234" tags="ForEachTiddlerMacro whereClauseExample writeActionExample">
<pre>The idea is to use the {{{&lt;&lt;tiddler ... &gt;&gt;}}} macro to include the contents. I.e. we would write something like:
{{{
&lt;&lt;forEachTiddler ... write ...&quot;&lt;&lt;tiddler ...&gt;&gt;&quot; ...&gt;&gt;
}}}
The problem is that TiddlyWiki takes the first &quot;&gt;&gt;&quot; after a macro as the macro's end. I.e. it processes a macro that looks like this:
{{{
&lt;&lt;forEachTiddler ... write ...&quot;&lt;&lt;tiddler ...&gt;&gt;
}}}
This leads to an error.

To avoid this we escape the {{{&gt;&gt;}}} of the inner macro with the string {{{$))}}}:
{{{
&lt;&lt;forEachTiddler
 where
 'tiddler.title.startsWith(&quot;Site&quot;)'
 write
 '&quot;----\n&lt;&lt;tiddler [[&quot;+tiddler.title+&quot;]]$))\n&quot;'
&gt;&gt;
}}}
//(Also adds a separator line before every tiddler)//

This way the correct end of the macro is detected and we get the following

''//Result://''
&lt;&lt;forEachTiddler
 where
 'tiddler.title.startsWith(&quot;Site&quot;)'
 write
 '&quot;----\n&lt;&lt;tiddler [[&quot;+tiddler.title+&quot;]]$))\n&quot;'
&gt;&gt;

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="SideBarOptions" modifier="UdoBorkowski" modified="200610121756" created="200609152205">
<pre>&lt;&lt;closeAll&gt;&gt;&lt;&lt;permaview&gt;&gt;&lt;&lt;newTiddler&gt;&gt;&lt;&lt;newJournal 'DD MMM YYYY'&gt;&gt;&lt;&lt;newTiddlerWithForm BugReportTemplate &quot;new bugreport&quot;&gt;&gt;&lt;&lt;saveChanges&gt;&gt;&lt;script&gt;
var onClick = function() {
story.closeAllTiddlers();
restart();
// displayTiddler(null,'About',1,null,null,false,false);
}
createTiddlyButton(place,&quot;reset&quot;,&quot;Reset (Shortcut: Alt-T)&quot;,onClick, null, null, &quot;T&quot;);
&lt;/script&gt;&lt;script&gt;var btn = createTiddlyButton(place,&quot;configuration&quot;,&quot;Configure this TiddlyWiki&quot;,onClickTiddlerLink,&quot;button&quot;);btn.setAttribute(&quot;tiddlyLink&quot;,&quot;Configuration&quot;);&lt;/script&gt;&lt;&lt;slider chkSliderOptionsPanel OptionsPanel 'options »' 'Change TiddlyWiki advanced options'&gt;&gt;</pre>
</div>
<div title="SimpleForm (Card 1)" modifier="UdoBorkowski" created="200512140259" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler SimpleFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;AliceInWonder&quot;,&quot;pwd&quot;:&quot;abcd&quot;}&lt;/data&gt;</pre>
</div>
<div title="SimpleForm (Card 2)" modifier="UdoBorkowski" created="200512140259" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler SimpleFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;Bob&quot;,&quot;pwd&quot;:&quot;1234&quot;}&lt;/data&gt;</pre>
</div>
<div title="SimpleForm (Card 3)" modifier="UdoBorkowski" created="200512140259" tags="FormTiddlerProject">
<pre>&lt;&lt;formTiddler SimpleFormTemplate&gt;&gt;&lt;data&gt;{&quot;userName&quot;:&quot;Cedric&quot;,&quot;pwd&quot;:&quot;4321&quot;}&lt;/data&gt;</pre>
</div>
<div title="SimpleFormTemplate" modifier="UdoBorkowski" created="200512140259" tags="FormTiddlerProject formTemplate">
<pre>&lt;html&gt;
 &lt;sub&gt;&lt;b&gt;Name:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
 &lt;input name=userName type=text /&gt;&lt;br/&gt;
 &lt;sub&gt;&lt;b&gt;Password:&lt;/b&gt;&lt;/sub&gt;&lt;br/&gt;
 &lt;input name=pwd type=password /&gt;&lt;br/&gt;
&lt;/html&gt;
[[Card 1|SimpleForm (Card 1)]] - [[Card 2|SimpleForm (Card 2)]] - [[Card 3|SimpleForm (Card 3)]]

~~(This is an example form, using the form template SimpleFormTemplate and the FormTiddlerPlugin.)~~</pre>
</div>
<div title="SiteSubtitle" modifier="UdoBorkowski" created="200511261111" tags="basic">
<pre>UdoBorkowski's Extensions for [[TiddlyWiki]]</pre>
</div>
<div title="SiteTitle" modifier="UdoBorkowski" created="200511161512" tags="basic">
<pre>abegoExtensions</pre>
</div>
<div title="SiteUrl" modifier="UdoBorkowski" created="200511252221" tags="basic">
<pre>http://tiddlywiki.abego-software.de</pre>
</div>
<div title="Sort Tiddlers by 'Create' Date" modifier="UdoBorkowski" modified="200601060142" created="200512072307" tags="ForEachTiddlerMacro sortClauseExample whereClauseExample">
<pre>When using TiddlyWiki 2.0+ you may refer to the date a tiddler was created through the &quot;created&quot; property:
* [[Sort Tiddlers by 'Create' Date (TiddlyWiki 2.0+)]]

Tiddler's prior to TiddlyWiki 2.0 don't include a &quot;Create&quot; date by default. But you may use plugins to add this functionality. Depending on the plugin your ForEachTiddlerMacro call will differ.
* [[Sort Tiddlers by 'Create' Date (CreationTimePlugin version)]]
* [[Sort Tiddlers by 'Create' Date (AutoTaggerPlugin version)]]
</pre>
</div>
<div title="Sort Tiddlers by 'Create' Date (AutoTaggerPlugin version)" modifier="UdoBorkowski" modified="200703120729" created="200512072308" tags="ForEachTiddlerMacro TiddlerCreateTime sortClauseExample whereClauseExample">
<pre>''Note:'' TiddlyWiki 2.0+ directly supports the &quot;created&quot; property, i.e. you don't need a separate plugin (see also [[Sort Tiddlers by 'Create' Date]]).

If you use EricShulman's plugin [[AutoTaggerPlugin|http://www.TiddlyTools.com/#AutoTaggerPlugin]] to add a create date to you tiddlers you can use the following ForEachTiddlerMacro call to get a list sorted by create date:
{{{
&lt;&lt;forEachTiddler 
 where
 'getCreateDate(tiddler) != null'
 sortBy
 'getCreateDate(tiddler)'
&gt;&gt;
}}}
//(Only includes the tiddlers that really have a create date.)//

If you want to have the newest tiddlers listed first just add a 'descending' to the sortClause.

To make this work you need to add the [[getCreateDate Function]] tiddler (with a 'systemConfig' tag) to your TiddlyWiki.

//Result://
&lt;&lt;forEachTiddler 
 where
 'getCreateDate(tiddler) != null'
 sortBy
 'getCreateDate(tiddler)'
&gt;&gt;

See also [[Sort Tiddlers by 'Create' Date]].</pre>
</div>
<div title="Sort Tiddlers by 'Create' Date (CreationTimePlugin version)" modifier="UdoBorkowski" modified="200601060147" created="200512072309" tags="ForEachTiddlerMacro TiddlerCreateTime sortClauseExample whereClauseExample">
<pre>''Note:'' TiddlyWiki 2.0+ directly supports the &quot;created&quot; property, i.e. you don't need a separate plugin (see also [[Sort Tiddlers by 'Create' Date]]).

If you use HustonFranklin's plugin [[CreationTimePlugin|http://franklin.ro/tw/HackingTW.html#%5B%5BCreation%20Time%5D%5D]] to add a create date to you tiddlers you can use the following ForEachTiddlerMacro call to get a list sorted by create date (newest tiddlers first).

{{{
&lt;&lt;forEachTiddler 
 where
 'tiddler.created'
 sortBy
 'tiddler.created'
 descending
&gt;&gt;
}}}
//(Only includes the tiddlers that really have a create date.)//

If you want to have the oldest tiddlers listed first just remove the 'descending' from the sortClause.

//Result://
&lt;&lt;forEachTiddler 
 where
 'tiddler.created'
 sortBy
 'tiddler.created'
 descending
&gt;&gt;
</pre>
</div>
<div title="Sort Tiddlers by 'Create' Date (TiddlyWiki 2.0+)" modifier="UdoBorkowski" modified="200601060143" created="200601060141" tags="ForEachTiddlerMacro TiddlerCreateTime sortClauseExample whereClauseExample">
<pre>When using TiddlyWiki 2.0+ you may refer to the date a tiddler was created through the &quot;created&quot; property:
{{{
&lt;&lt;forEachTiddler 
 where
 'tiddler.created'
 sortBy
 'tiddler.created'
 descending
&gt;&gt;
}}}

If you want to have the oldest tiddlers listed first just remove the 'descending' from the sortClause.

//Result://
&lt;&lt;forEachTiddler 
 where
 'tiddler.created'
 sortBy
 'tiddler.created'
 descending
&gt;&gt;

See also [[Sort Tiddlers by 'Create' Date]].</pre>
</div>
<div title="Sort YourSearch Result (e.g. by date)" modifier="YourName" modified="200907160829" created="200907160824" tags="YourSearchProject Documentation Sorting Script" changecount="4">
<pre>The items in the YourSearch result list are displayed in a &quot;ranked&quot; order, i.e. the best matches are listed first. 

If you want any other ordering (e.g. sort by date) you need to make the function {{{abego.YourSearch.getRankFunction()}}} return a different rank function {{{function(tiddler, lastQuery)}}}. The number returned by the rankFunction defines the position of the given tiddler in the result. Higher numbers are displayed first. Tiddlers with same rank numbers are sorted by their titles (case sensitive).

! Example: Sort by title
As tiddlers with the same rank number are sorted by their title you may use the following simple script to get the YourSearch result alphabetically sorted:
{{{
&lt;script&gt;
var myZeroRankFunction = function(tiddler, lastQuery) {
    return 0;
};

abego.YourSearch.getRankFunction = function() {
    return myZeroRankFunction;
}
&lt;/script&gt;
}}}

! Example: Sort by date
For a &quot;sort by last modified date&quot; ordering you may use this script:
{{{
&lt;script&gt;
var myDateRankFunction = function(tiddler, lastQuery) {
    return tiddler.modified.getTime();
};

abego.YourSearch.getRankFunction = function() {
    return myDateRankFunction;
}
&lt;/script&gt;
}}}

! Use the Standard Ordering
To switch back to the standard ordering you may use this code use:
{{{
&lt;script&gt;
abego.YourSearch.getRankFunction = abego.YourSearch.getStandardRankFunction;
&lt;/script&gt;
}}}
//(Note: there are no {{{()}}} behind the {{{abego.YourSearch.getStandardRankFunction}}})//

! Switch between &quot;Standard&quot; and &quot;By Date&quot; Ordering
With just some few lines more you can use a checkbox to switch between &quot;standard&quot; and &quot;by date&quot; sorting. 

To define the checkbox add a line like the following in a tiddler (e.g. in AdvancedOptions):
{{{
&lt;&lt;option chkYourSearchSortByDate&gt;&gt; Sort 'Your Search' result by Date 
}}}
&lt;&lt;option chkYourSearchSortByDate&gt;&gt; Sort 'Your Search' result by Date 
(Clicking the checkbox will affect the next query you type).

And here the script that adjusts the ranking/sorting:
{{{
&lt;script&gt;
var myDateRankFunction = function(tiddler, lastQuery) {
    return tiddler.modified.getTime();
};

abego.YourSearch.getRankFunction = function() {
return config.options.chkYourSearchSortByDate 
        ? myDateRankFunction
         : abego.YourSearch.getStandardRankFunction();
}
&lt;/script&gt;
}}}
</pre>
</div>
<div title="SortClauseExamples" modifier="UdoBorkowski" created="200511210917" tags="Examples ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the sortClause in the ForEachTiddlerMacro.

&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;sortClauseExample&quot;)'
&gt;&gt;
See also ForEachTiddlerExamples.</pre>
</div>
<div title="StyleSheet" modifier="YourName" modified="201002161629" created="200610122053" changecount="6">
<pre>/***
!Colors Used
*@@bgcolor(#ffb200): #ffb200 - Primary Color@@
*@@bgcolor(#ffcc66): #ffcc66 - Primary Color Light@@
*@@bgcolor(#ff8000): #ff8000- Primary Color Bright@@
*@@bgcolor(#b75b00): #b75b00 - Primary Color Dark@@
*@@bgcolor(#666666): #666666 - Text Color Light@@
*@@bgcolor(#703):color(#fff): #703 - Title Color @@
***/
/*{{{*/
.header {
	background: #ffb200;
}
.headerForeground {
	color: #000;
}
.headerForeground a {
	color: #000;
}

a {
	color: #666666;
}

a:hover{
	color: #666666;
}

#sidebarOptions input {
	border: 1px solid #ff8000;
}

#sidebarOptions .sliderPanel {
	background: #ffcc66;
}

#sidebarOptions .sliderPanel a {
	color: #b75b00;
}

#sidebarOptions .sliderPanel a:hover {
	color: #ff8000;
}

#sidebarOptions .sliderPanel a:active {
	color: #ff8000;
	background: #fff;
}
h1,h2,h3,h4,h5 {
	margin-top: 1em;
	color: #703;
	background: #ffcc66;
}

/*}}}*/
/***
!Other Styling
***/
/*{{{*/
.headerForeground {
	position:relative; 
	padding:0.3em 0em 1em 1em; 
	left:-1px; top:-1px;
}

.headerForeground table {
	width: 100%;
}

a {
	font-family: Arial, Helvetica, sans-serif;
	text-decoration: none;
}

a:hover{
	text-decoration: underline;
	background: none;
}

.button:hover {
	text-decoration: none;
}

.abegoLink .externalLink {
	font-weight: bold;
	text-decoration: none;
}

.abegoLink .externalLink:hover {
	font-weight: bold;
	text-decoration: underline;
}

#mainMenu .tiddlyLinkExisting, 
#mainMenu .tiddlyLinkNonExisting{
	font-weight: bold;
	font-style: normal;
}

#sidebarOptions .sliderPanel a {
	color: #b75b00;
}

#sidebarOptions .sliderPanel a:hover {
	background:none;
}
.optionsBlock {
	padding: 0.5em;
	margin-left: 0.5em;
	overflow: auto;
	border: 1px solid #b75b00;
}
.txtOptionInput {width:30em;}

/*}}}*/
</pre>
</div>
<div title="Tab 1" modifier="YourName" created="200710010830" tags="glossar">
<pre>Content of Tab 1</pre>
</div>
<div title="Tab 2" modifier="YourName" created="200710010830" tags="glossar">
<pre>Content of Tab 2</pre>
</div>
<div title="Tab 3" modifier="YourName" created="200710010830" tags="glossar">
<pre>Content of Tab 3</pre>
</div>
<div title="Task1" modifier="UdoBorkowski" created="200511191917" tags="ExampleData ForEachTiddlerMacro TaskToDo">
<pre></pre>
</div>
<div title="Task2" modifier="UdoBorkowski" created="200511191917" tags="ExampleData ForEachTiddlerMacro JoeBlack TaskOpen">
<pre></pre>
</div>
<div title="Task3" modifier="UdoBorkowski" created="200511191917" tags="ExampleData ForEachTiddlerMacro TaskDone">
<pre></pre>
</div>
<div title="Task4" modifier="UdoBorkowski" created="200511192255" tags="ExampleData ForEachTiddlerMacro TaskOpen UdoBorkowski">
<pre></pre>
</div>
<div title="Task5" modifier="UdoBorkowski" created="200511192256" tags="ExampleData ForEachTiddlerMacro TaskOpen UdoBorkowski">
<pre></pre>
</div>
<div title="Task6" modifier="UdoBorkowski" created="200511192256" tags="ExampleData ForEachTiddlerMacro TaskDeferred">
<pre>Type the text for 'New Tiddler'</pre>
</div>
<div title="Task7" modifier="UdoBorkowski" created="200511192300" tags="ExampleData ForEachTiddlerMacro JoeBlack TaskOpen">
<pre></pre>
</div>
<div title="The &quot;include&quot; Macro" modifier="UdoBorkowski" modified="200702081134" created="200702081022" tags="Documentation IncludePlugin">
<pre>Include the tiddlers of an external TiddlyWiki into the current TiddlyWiki.

''Syntax'' 
|&gt;|{{{&lt;&lt;}}}''include'' [''url:''] //tiddlyWikiPath// [''delay:'' //delayDuration//] [''hide:'' //hideFlag//]{{{&gt;&gt;}}}|
|//tiddlyWikiPath//|The path to the TiddlyWiki to include.&lt;&lt;br&gt;&gt;This may be a relative path, an absolute local file path, or a &quot;file:&quot;, &quot;http:&quot; or &quot;https:&quot; URL)|
|//delayDuration//|Integer. Defines the number of milliseconds (thousands of a second) to wait before actually including the TiddlyWiki. By default a TiddlyWiki is included immediately when the TiddlyWiki starts.|
|//hideFlag//|When &quot;{{{true}}}&quot; the &quot;include&quot; macro is not displayed in the tiddler.|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. 'or' means that exactly one of the two alternatives must exist.~~|

''Examples'' 
{{{
&lt;&lt;include &quot;http://tiddlywiki.abego-software.de/index.html&quot;&gt;&gt;
&lt;&lt;include &quot;C:\TiddlyWiki\shared\TiddlyWikiHelp.html&quot;&gt;&gt;
&lt;&lt;include &quot;file://C:/Private/journals/2006-12.html&quot; delay: 8000 &gt;&gt;
&lt;&lt;include &quot;test/sample33.html&quot;&gt;&gt;
}}}

''Notes''
* For security reasons it may not be possible to include some TiddlyWikis. Especially you cannot access a TiddlyWiki on a different website when running your TiddlyWiki on your webserver (the so-called &quot;Cross-Site Scripting&quot; issue). Nevertheless you can access TiddlyWikis on various websites if you are running your TiddlyWiki locally. And you may refer to other Wikis on your own site.
* The macro may be placed in any tiddler, but it is recommended to put them into the &quot;IncludeList&quot; tiddler. The includes listed in the &quot;IncludeList&quot; are processed at TiddlyWiki startup. An include defined in a different tiddler are processed the first time the tiddler is displayed. The order the include macros are processed is used when [[looking for a tiddler|How Tiddlers are found]].</pre>
</div>
<div title="The &quot;includeState&quot; Macro" modifier="UdoBorkowski" modified="200702081032" created="200702081021" tags="Documentation IncludePlugin">
<pre>Displays the list of &quot;included&quot; TiddlyWikis, together with their &quot;load state&quot;. I.e. you can see if the TiddlyWiki is already loaded (include), if there was an error (e.g. the TiddlyWiki to include was not found) etc.

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''includeState''{{{&gt;&gt;}}}|

The TiddlyWikis are listed in the order they are checked for tiddlers (see [[How Tiddlers are found]])

The (shadow) tiddler &quot;IncludeState&quot; contains this macro, i.e. you can view that tiddler to see the current include state.

See also: [[The &quot;include&quot; Macro]].</pre>
</div>
<div title="TiddlerWithParamsPlugin" modifier="UdoBorkowski" modified="200603221816" created="200601210030" tags="systemConfig">
<pre>/***
|''Name:''|TiddlerWithParamsPlugin|
|''Version:''|1.0.1 (2006-03-22)|
|''Source:''|http://tiddlywiki.abego-software.de/#TiddlerWithParamsPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license]]|
!Description

The TiddlerWithParamsPlugin extends the build-in {{{&lt;&lt;tiddler...&gt;&gt;}}} macro. It replaces placeholders ($1, $2, ...) in the given tiddler by values passed with the macro. Then it inserts the (replaced) text, just like the original {{{&lt;&lt;tiddler...&gt;&gt;}}} macro.

''Syntax:'' 
|&gt;|{{{&lt;&lt;}}}''tiddler '' //tiddlerName// [//className//] [''asText''] [''with:'' //arguments// ] [''prefix:'' //prefixString//] {{{&gt;&gt;}}}|
|//tiddlerName//|The name of the tiddler to be included. The tiddler may contain placeholders ($1, $2, ... $9) that will be replaced with the values passed with the macro|
|//className//|The (CSS) class to be used around the embedded tiddler|
|''asText''|When defined the (replaced) content of the tiddler is inserted as pure text, i.e. it is not &quot;wikified&quot;.|
|//arguments//|up to 9 arguments may be passed to the macro, used as the values for the placeholders $1, $2, ... $9 in the referenced template|
|//prefixString//|By default the placeholders $1, $2, $3,..., $9 are used. But you may change the &quot;prefix&quot; before the placeholder number (&quot;$&quot;) to some other text through the &quot;prefix:&quot; option. This may be necessary when you are using the $n in the tiddler you are referencing (e.g. when you are using regular expressions).|
|&gt;|~~Syntax formatting: Keywords in ''bold'', optional parts in [...]. ~~|

!Example

The following ''//ProjectTemplate//'' tiddler defines an &quot;Overview&quot; page for a project, that gives access to various &quot;sub-tiddlers&quot; used in the project, that follow a static naming schema (e.g. all Notes for any project are stored in a tiddler called &quot;//projectName// Notes&quot;). $1 holds the name of the Project (e.g. &quot;ForEachTiddler&quot;), $2 holds the type of the published component (e.g. &quot;Plugin&quot;, &quot;Macro&quot;, &quot;Function&quot;).
{{{
![[$1Project]] Overview
* [[$1$2]]
* [[ToDo|$1 ToDos]]
* [[Notes|$1 Notes]]
* [[Examples|$1Examples]]
* [[Tests|$1 Tests]]
* [[Open Bugs/CRs|$1 Open Bugs and ChangeRequests]]
}}}

This template is now used in the ''//ForEachTiddlerProject//'' tiddler:
{{{
&lt;&lt;tiddler ProjectTemplate with: ForEachTiddler Plugin&gt;&gt;
}}}

This results in the following tiddler text for the ''//ForEachTiddlerProject//'' tiddler:
{{{
![[ForEachTiddlerProject]] Overview
* [[ForEachTiddlerPlugin]]
* [[ToDo|ForEachTiddler ToDos]]
* [[Notes|ForEachTiddler Notes]]
* [[Examples|ForEachTiddlerExamples]]
* [[Tests|ForEachTiddler Tests]]
* [[Open Bugs/CRs|ForEachTiddler Open Bugs and ChangeRequests]]
}}}

!Revision history
* v1.0.0 (2006-01-20)
** initial version
* v1.0.1 (2006-03-22)
** Added 'asText' option
** Support Safari (Thanks to Elise Springer for reporting the problem)
!Code
***/
//{{{
//============================================================================
// TiddlerWithParamsPlugin
//============================================================================

// Ensure that the Plugin is only installed once.
//
if (!version.extensions.TiddlerWithParamsPlugin) {

version.extensions.TiddlerWithParamsPlugin = {
 major: 1, minor: 0, revision: 1, 
 date: new Date(2006,3,22), 
 type: 'plugin',
 source: &quot;http://tiddlywiki.abego-software.de/#TiddlerWithParamsPlugin&quot;
};

// ---------------------------------------------------------------------------
// Helpers
// ---------------------------------------------------------------------------

var indexInArray = function(array, item) {
 for (var i = 0; i &lt; array.length; i++) {
 if (array[i] == item) {
 return i;
 }
 }
 return -1;
}

var myEscapeRegExp = function(s)
{
 // The original escapeRegExp function does not work with Safari (2.0.3) 
 // since the $&amp; is not implemented.
var t = s.replace(/\\/g, &quot;\\\\&quot;);
 t = t.replace(/\^/g, &quot;\\^&quot;);
 t = t.replace(/\$/g, &quot;\\$&quot;);
 t = t.replace(/\*/g, &quot;\\*&quot;);
 t = t.replace(/\+/g, &quot;\\+&quot;);
 t = t.replace(/\?/g, &quot;\\?&quot;);
 t = t.replace(/\(/g, &quot;\\(&quot;);
 t = t.replace(/\)/g, &quot;\\)&quot;);
 t = t.replace(/\=/g, &quot;\\=&quot;);
 t = t.replace(/\!/g, &quot;\\!&quot;);
 t = t.replace(/\|/g, &quot;\\|&quot;);
 t = t.replace(/\,/g, &quot;\\,&quot;);
 t = t.replace(/\{/g, &quot;\\{&quot;);
 t = t.replace(/\}/g, &quot;\\}&quot;);
 t = t.replace(/\[/g, &quot;\\[&quot;);
 t = t.replace(/\]/g, &quot;\\]&quot;);
 t = t.replace(/\./g, &quot;\\.&quot;);

 return t;
}

// ---------------------------------------------------------------------------
// The (hijacked) tiddler Macro Handler 
// ---------------------------------------------------------------------------

config.macros.tiddler.handler = function(place,macroName,params,wikifier,paramString,tiddler) {
 
 var className = null;
 var argsStart = -1;
 var doWikify = true;

 var iParams = 1;
 if (params[iParams] != &quot;asText&quot; &amp;&amp; params[iParams] != &quot;with:&quot;) {
 className = params[iParams++];
 }
 if (params[iParams] == &quot;asText&quot;) {
 iParams++;
 doWikify = false;
 }
 if (params[iParams] == &quot;with:&quot;) {
 iParams++;
 argsStart = iParams;
 }
 
 var wrapper = createTiddlyElement(place,&quot;span&quot;,null,className ? className : null,null);
 var text = store.getTiddlerText(params[0]);
 if(text) {
 // Check for recursion
 var tiddlerName = params[0];
 var stack = config.macros.tiddler.tiddlerStack;
 if (stack.find(tiddlerName) !== null) return;

 if (argsStart &gt;= 0) {
 // The params between the &quot;with:&quot; and the &quot;prefix:&quot; (or the end) are the arguments,
 // The param behind the &quot;prefix:&quot; is the prefix before the placeholder numbers.
 var argsEnd = params.length;
 var prefix = &quot;$&quot;;
 var prefixIndex = indexInArray(params, &quot;prefix:&quot;);
 if (prefixIndex &gt;= argsStart) {
 argsEnd = prefixIndex;
 if (prefixIndex &lt; (params.length-1)) {
 prefix = params[prefixIndex+1];
 }
 }
 // to avoid any &quot;special RE chars&quot; problems with the prefix string escape all chars.
 prefix = myEscapeRegExp(prefix);
 
 var args = params.slice(argsStart, argsEnd);
 var n = Math.min(args.length, 9);
 for (var i = 0; i &lt; n; i++) {
 var value = args[i];
 
 var placeholderRE = new RegExp(prefix+(i+1),&quot;mg&quot;);
 text = text.replace(placeholderRE, value);
 }
 }
 stack.push(tiddlerName);
 try {
 if (doWikify) {
 wikify(text,wrapper,null,store.getTiddler(params[0]));
 } else {
 wrapper.appendChild(document.createTextNode(text));
 }
 } finally { 
 stack.pop();
 }
 }
}
config.macros.tiddler.tiddlerStack = [];

// End of &quot;install only once&quot;
}

//============================================================================
// End of TiddlerWithParamsPlugin
//============================================================================
//}}}
/***
!Licence and Copyright
Copyright (c) abego Software ~GmbH, 2006 ([[www.abego-software.de|http://www.abego-software.de]])

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or other
materials provided with the distribution.

Neither the name of abego Software nor the names of its contributors may be
used to endorse or promote products derived from this software without specific
prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
***/
</pre>
</div>
<div title="TiddlyWiki" modifier="UdoBorkowski" modified="200609151121" created="200511161512" tags="basic">
<pre>A standalone wiki that stores it data in a single HTML file and requires just ~JavaScript and a web browser to run.

For more information visit http://www.tiddlywiki.com/.
</pre>
</div>
<div title="TiddlyWikis" modifier="UdoBorkowski" created="200702081014">
<pre>see TiddlyWiki</pre>
</div>
<div title="Troubleshooting the IncludePlugin" modifier="UdoBorkowski" modified="200707130733" created="200702130928" tags="Documentation IncludePlugin">
<pre>If you have problems running the IncludePlugin you may try this:
* Have a look at the PluginManager if the IncludePlugin is installed correctly.
* If the IncludePlugin is installed correctly go to the AdvancedOptions and look for the checkbox &quot;Include TiddlyWikis&quot;. This must be checked.
* If &quot;Include TiddlyWikis&quot; is checked click on the IncludeState link next to the checkbox. This reports problems related to every included TiddlyWiki.
* Be aware only TiddlyWikis listed in the IncludeList of the &quot;main&quot; TiddlyWiki are included. Any IncludeList of included TiddlyWikis is ignored (i.e. the IncludePlugin does not work &quot;recursively&quot;.)</pre>
</div>
<div title="UdoBorkowski" modifier="UdoBorkowski" created="200511161512" tags="UdoBorkowski basic">
<pre>Udo Borkowski (email: ub [at] abego-software [dot] de)</pre>
</div>
<div title="ViewTemplate" modifier="UdoBorkowski" modified="200710031358" created="200601061302">
<pre>&lt;div class='toolbar' macro='toolbar -closeTiddler closeOthers +editTiddler editIncludedTiddler intelliTagsEdit permalink references jump'&gt;&lt;/div&gt;
&lt;div class='title' macro='view title'&gt;&lt;/div&gt;
&lt;div class='subtitle' macro='view includeURL'&gt;&lt;/div&gt;
&lt;!-- &lt;div class='subtitle'&gt;&lt;span macro='view modifier link'&gt;&lt;/span&gt;, &lt;span macro='view modified date [[DD MMM YYYY]]'&gt;&lt;/span&gt; (created &lt;span macro='view created date [[DD MMM YYYY]]'&gt;&lt;/span&gt;)&lt;/div&gt; 
&lt;div class='tagging' macro='tagging'&gt;&lt;/div&gt; --&gt;
&lt;div class='tagged' macro='tags'&gt;&lt;/div&gt;
&lt;div class='viewer' macro='view text wikified'&gt;&lt;/div&gt;
&lt;div class='tagClear'&gt;&lt;/div&gt;</pre>
</div>
<div title="WhereClauseExamples" modifier="UdoBorkowski" created="200511210905" tags="Examples ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the whereClause in the ForEachTiddlerMacro.

&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;whereClauseExample&quot;)'
&gt;&gt;

See also ForEachTiddlerExamples.</pre>
</div>
<div title="WriteAction" modifier="UdoBorkowski" modified="200609162208" created="200512081526" tags="Documentation ForEachTiddlerProject">
<pre>''//The {{{write}}} action//''

''Syntax'' 
|''write'' //stringExpression//&lt;&lt;br&gt;&gt;&lt;html&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/html&gt;[''begin'' //stringExpression//]&lt;&lt;br&gt;&gt;&lt;html&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/html&gt;[''end'' //stringExpression//]&lt;&lt;br&gt;&gt;&lt;html&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/html&gt;[''none'' //stringExpression//] &lt;&lt;br&gt;&gt;&lt;html&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/html&gt;[''toFile'' //filepath//&lt;&lt;br&gt;&gt;&lt;html&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/html&gt;[''withLineSeparator'' //stringExpression// ] ] |

The {{{write}}} action of the ForEachTiddlerMacro has a parameter that is a (quoted) JavaScript String expression. &lt;&lt;tiddler [[JavaScript in actionParameters]]&gt;&gt;

The first expression is evaluated for every selected tiddler and the results are concatenated to a text (the &quot;result text&quot;). 

When a ''begin'' expression is given that text is written before the first tiddler output. When an ''end'' expression is given that text is written after the last tiddler output. When a ''none'' expression is given and no tiddler is found that text is written. 

When a &quot;toFile&quot; is specified the result text is written to the given file. In that case one may also specify a &quot;line separator&quot; (through the {{{withLineSeparator}}} option) that is used instead of every &quot;\n&quot; that appears in the result text.

When no &quot;toFile&quot; is specified the result text is inserted in the tiddler at the location of the ForEachTiddlerMacro (similar to the {{{&lt;&lt;tiddler ...&gt;&gt;}}} macro. So if you write expressions resulting in &quot;{{{| ... | ... |}}}&quot; you will see a table, when you write &quot;{{{[img[...]]}}} you see the image etc. .

Also see [[WriteActionExamples]], e.g. for how to create tables or &quot;embed&quot; the content of a list of tiddlers in another tiddler using the {{{write}}} action.
</pre>
</div>
<div title="WriteActionExamples" modifier="UdoBorkowski" created="200511210943" tags="Examples ForEachTiddlerMacro">
<pre>Here are some examples that show the usage of the write action in the ForEachTiddlerMacro.

&lt;&lt;forEachTiddler
 where
 'tiddler.tags.contains(&quot;writeActionExample&quot;)'
&gt;&gt;
See also ForEachTiddlerExamples.</pre>
</div>
<div title="XHTML10Plugin" modifier="UdoBorkowski" modified="200609162157" created="200608011302" tags="Plugin Public XHTML10Plugin">
<pre>/***
|''Name:''|XHTML10Plugin|
|''Version:''|1.0.1 (2006-09-16)|
|''Source:''|http://tiddlywiki.abego-software.de/#XHTML10Plugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''Copyright:''|&amp;copy; 2005-2006 [[abego Software|http://www.abego-software.de]]|
|''~CoreVersion:''|2.1.0|
|''Browser:''|Firefox 1.5.0.2 or better; Internet Explorer 6.0|

Make your ~TiddlyWiki XHTML 1.0 compliant format.

Once the plugin is installed the existing tiddlers of that TiddlyWiki are automatically converted to the new (XHTML 1.0 compliant) format on the first save. After that all changes are stored in the XHTML format.

!Source Code
***/
//{{{
// Ensure the Plugin is only installed once.
//
if (!version.extensions.XHTML10Plugin) {

if (version.major &lt; 2 || (version.major == 2 &amp;&amp; version.minor &lt; 1)) {
	(function() {
		var s = &quot;Use TiddlyWiki 2.1 or better to run the XHTML10Plugin.&quot;;
		alert(s);
		throw s;
	})();
}

version.extensions.XHTML10Plugin = {
	major: 1, minor: 0, revision: 1,
	date: new Date(2006, 8, 16),
	source: &quot;http://tiddlywiki.abego-software.de/#XHTML10Plugin&quot;,
	licence: &quot;[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]&quot;,
	copyright: &quot;Copyright (c) abego Software GmbH, 2005-2006 (www.abego-software.de)&quot;,
};

// Ensure the global abego namespace is set up.
if (!window.abego) window.abego = {};


//--------------------------------
// XHTML10Saver (inherits from SaverBase)

abego.XHTML10Saver = function() {};

abego.XHTML10Saver.prototype = new SaverBase();

abego.XHTML10Saver.prototype.externalizeTiddler = function(store, tiddler) {
	try {
		var s = '';
		store.forEachField(tiddler, 
			function(tiddler, fieldName, value) {
				// don't store stuff from the temp namespace
				if (!fieldName.match(/^temp\./)) {
					if (value)
						value = value.htmlEncode();
					s += ['&lt;pre title=&quot;',fieldName,'&quot;&gt;',value,'&lt;/pre&gt;'].join(&quot;&quot;);
				}
			});
		return ['&lt;div title=&quot;',tiddler.title.htmlEncode(),'&quot;&gt;',s,'&lt;/div&gt;'].join(&quot;&quot;);

	} catch (e) {
		showException(e, config.messages.tiddlerSaveError.format([tiddler.title]));
		return '';
	}
};

abego.XHTML10Saver.prototype.externalize = function(store) {
	return [&quot;&lt;div class='twXHTML10'&gt;\n&quot;,SaverBase.prototype.externalize.apply(this, arguments),&quot;\n&lt;/div&gt;&quot;].join(&quot;&quot;);
};


//--------------------------------
// Overwrite TiddlyWiki.prototype.getSaver to use the XHTML10 format on save

TiddlyWiki.prototype.getSaver = function() {
	if (!this.saver) 
		this.saver = new abego.XHTML10Saver();
	return this.saver;
};

//======================================
// Install the Loader into the HTML page

(function() {
	// The loader code will be inserted into the PostHead markup block,
	// so it can be executed before tiddlers are loaded. We cannot just put this
	// code into a normal plugin since this &quot;load&quot; code is required to load
	// tiddlers. I.e. this code must be executed before any tiddlers/plugins
	// can be loaded.

	var getXHTML10LoaderBlock = function() {
		// The loader code in a big JavaScript string.
		// You may get a non-stringified version of the XHTML10Loader source code at
		// http://tiddlywiki.abego-software.de/archive/XHTML10Plugin/XHTML10Loader.1.0.1.js

		XHTML10LoaderCode = 
			&quot;if (!window.abego) window.abego = {};\nif (!abego.XHTML10Loader) {\n\t//-&quot;+
			&quot;-------------------------------\n\t// abego.XHTML10Loader (inherits from&quot;+
			&quot; LoaderBase)\n\t\n\tabego.XHTML10Loader = function() {};\n\tabego.XHTML10Loa&quot;+
			&quot;der.prototype = new LoaderBase();\n\t\n\tabego.XHTML10Loader.prototype.lin&quot;+
			&quot;go = {\n\t\tunnamedValue: \&quot;Unnamed value\&quot;,\n\t\tredefining: \&quot;Redefining valu&quot;+
			&quot;e of %0\&quot;,\n\t\tnoXHTML10Format: \&quot;Storage not in XHTML 1.0 format\&quot;\n\t}\n\t\n\ta&quot;+
			&quot;bego.XHTML10Loader.prototype.getTitle = function(store, e) {\n\t\tvar tit&quot;+
			&quot;le = null;\n\t\tif(e.getAttribute)\n\t\t\ttitle = e.getAttribute('title');\n\t\t&quot;+
			&quot;if(!title &amp;&amp; e.id) {\t\n\t\t\tvar lenPrefix = store.idPrefix.length;\n\t\t\tif &quot;+
			&quot;(e.id.substr(0,lenPrefix) == store.idPrefix)\n\t\t\t\ttitle = e.id.substr(l&quot;+
			&quot;enPrefix);\n\t\t}\n\t\treturn title;\n\t};\n\t\n\tabego.XHTML10Loader.prototype.in&quot;+
			&quot;ternalizeTiddler = function(store, tiddler, title, data) {\n\t\tvar field&quot;+
			&quot;s = {};\n\t\tvar elems = data.childNodes;\n\t\tfor(var i = 0; i &lt; elems.leng&quot;+
			&quot;th; i++) {\n\t\t\tvar e = elems[i];\n\t\t\tvar name = e.getAttribute('title');&quot;+
			&quot;\n\t\t\tif (!name) \n\t\t\t\tthrow this.lingo.unnamedValue;\n\t\t\tif (fields[name]&quot;+
			&quot; !== undefined) \n\t\t\t\tthrow this.lingo.redefining.format([name]);\n\t\t\tfi&quot;+
			&quot;elds[name] = getNodeText(e.firstChild); \n\t\t}\n\t\n\t\t// Extract (and remov&quot;+
			&quot;e) the standard fields from the extended fields\n\t\tvar text = fields.te&quot;+
			&quot;xt;\n\t\tvar modifier = fields.modifier;\n\t\tvar modified = Date.convertFro&quot;+
			&quot;mYYYYMMDDHHMM(fields.modified);\n\t\tvar c = fields.created;\n\t\tvar create&quot;+
			&quot;d = c ? Date.convertFromYYYYMMDDHHMM(c) : modified;\n\t\tvar tags = field&quot;+
			&quot;s.tags;\n\t\tdelete fields.modifier;\n\t\tdelete fields.modified;\n\t\tdelete f&quot;+
			&quot;ields.created;\n\t\tdelete fields.tags;\n\t\tdelete fields.text;\n\t\tdelete fi&quot;+
			&quot;elds.title;\n\t\n\t\ttiddler.assign(title,text,modifier,modified,tags,creat&quot;+
			&quot;ed,fields);\n\t\t\n\t\treturn tiddler;\n\t};\n\t\n\tvar findRootNode = function(no&quot;+
			&quot;des) {\n\t\tif (nodes) {\n\t\t\t// skip leading text nodes\n\t\t\tfor (var i = 0;&quot;+
			&quot; i &lt; nodes.length; i++)\n\t\t\t\tif (nodes[i].nodeType != 3)\n\t\t\t\t\tbreak;\n\t\t&quot;+
			&quot;\t\t\t\n\t\t\tif (i &lt; nodes.length &amp;&amp; nodes[i].className == 'twXHTML10')\n\t\t\t\t&quot;+
			&quot;return nodes[i];\n\t\t}\n\t};\n\t\n\tabego.XHTML10Loader.prototype.loadTiddlers&quot;+
			&quot; = function(store,nodes) {\n\t\t// in the twXHMTL10 format all tiddler el&quot;+
			&quot;ements are contained in one enclosing DIV\n\t\t// that contains the forma&quot;+
			&quot;t information\n\t\tvar root = findRootNode(nodes)\n\t\tif (!root) \n\t\t\tthrow &quot;+
			&quot;this.lingo.noXHTML10Format;\n\t\treturn LoaderBase.prototype.loadTiddlers&quot;+
			&quot;.apply(this, [store, root.childNodes]);\n\t};\n\t\n\t\n\t//-------------------&quot;+
			&quot;-------------\n\t// Hijack the loadFromDiv\n\t(function() {\n\t\tvar origTidd&quot;+
			&quot;lyWikiLoadFromDiv = TiddlyWiki.prototype.loadFromDiv;\n\t\tTiddlyWiki.pro&quot;+
			&quot;totype.loadFromDiv = function(srcID,idPrefix) {\n\t\t\t// use the XHTML 1.&quot;+
			&quot;0 loader when the storearea is in 'twXHTML10' format,\n\t\t\t// otherwise &quot;+
			&quot;use the default loader\n\t\t\tvar e = document.getElementById(srcID);\n\t\t\ti&quot;+
			&quot;f (e &amp;&amp; findRootNode(e.childNodes))\n\t\t\t\tthis.loader = new abego.XHTML1&quot;+
			&quot;0Loader();\n\t\t\treturn origTiddlyWikiLoadFromDiv.apply(this, arguments);&quot;+
			&quot;\n\t\t};\n\t})();\n}\n\n&quot;;
		return '&lt;'+'script type=&quot;text/javascript&quot;&gt;\n//&lt;![CDATA[\n'+XHTML10LoaderCode+'\n//]]&gt;\n&lt;/script'+'&gt;\n';
	};

	var insertLoaderBlock = function() {
		if (!store)
			throw &quot;XHTML10LoaderInstaller must run as a plugin&quot;;
			
		var START = &quot;&lt;!--XHMTL10Loader-START--&gt;&quot;;
		var END = &quot;&lt;!--XHMTL10Loader-END--&gt;&quot;;
		
		var postHeadText = store.getTiddlerText(&quot;MarkupPostHead&quot;);
		if (postHeadText.getChunk(START, END)) 
			return; // already installed

		postHeadText += &quot;\n&quot;+START+getXHTML10LoaderBlock()+END+&quot;\n&quot;;
		var tiddler = store.getTiddler(&quot;MarkupPostHead&quot;);
		var tags = tiddler ? tiddler.tags : [];
		store.saveTiddler(&quot;MarkupPostHead&quot;,&quot;MarkupPostHead&quot;,postHeadText,config.options.txtUserName,new Date(),tags);
		alert(&quot;XHTML10Loader installed.\nPlease save and reload your TiddlyWiki to complete the installation. After that your TiddlyWiki will be stored in an XHTML 1.0 compliant format.&quot;);
	};
	
	insertLoaderBlock();														
})();

} // of single install

//}}}
</pre>
</div>
<div title="YourSearchItemTemplate" modifier="UdoBorkowski" modified="200709280834" created="200709280833">
<pre>&lt;!--{{{--&gt;
&lt;span class='yourSearchNumber' macro='foundTiddler number'&gt;&lt;/span&gt;
&lt;span class='yourSearchTitle' macro='foundTiddler title'/&gt;&lt;/span&gt;&amp;nbsp;-&amp;nbsp;
&lt;span macro='foundTiddler field includeURL'/&gt;&lt;/span&gt;&amp;nbsp;-&amp;nbsp;
&lt;span class='yourSearchTags' macro='foundTiddler field tags 50'/&gt;&lt;/span&gt;
&lt;span macro=&quot;yourSearch if previewText&quot;&gt;&lt;div class='yourSearchText' macro='foundTiddler field text 250'/&gt;&lt;/div&gt;&lt;/span&gt;
&lt;!--}}}--&gt;</pre>
</div>
<div title="YourSearchPlugin" modifier="YourName" modified="201002161623" created="200601161427" tags="Plugin UdoBorkowski YourSearchProject systemConfig" changecount="7">
<pre>/***
|''Name:''|YourSearchPlugin|
|''Version:''|2.1.5 (2010-02-16)|
|''Source:''|http://tiddlywiki.abego-software.de/#YourSearchPlugin|
|''Author:''|UdoBorkowski (ub [at] abego-software [dot] de)|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''Copyright:''|&amp;copy; 2005-2010 [[abego Software|http://www.abego-software.de]]|
|''~CoreVersion:''|2.1.0|
|''Community:''|[[del.icio.us|http://del.icio.us/post?url=http://tiddlywiki.abego-software.de/index.html%23YourSearchPlugin]]|
|''Browser:''|Firefox 1.0.4+; Firefox 1.5; ~InternetExplorer 6.0|
!About YourSearch
YourSearch gives you a bunch of new features to simplify and speed up your daily searches in TiddlyWiki. It seamlessly integrates into the standard TiddlyWiki search: just start typing into the 'search' field and explore!

For more information see [[Help|YourSearch Help]].
!Compatibility
This plugin requires TiddlyWiki 2.1. 
Check the [[archive|http://tiddlywiki.abego-software.de/archive]] for ~YourSearchPlugins supporting older versions of TiddlyWiki.
!Source Code
***/
/***
This plugin's source code is compressed (and hidden). Use this [[link|http://tiddlywiki.abego-software.de/archive/YourSearchPlugin/Plugin-YourSearch-src.2.1.5.js]] to get the readable source code.
***/
///%
if(!version.extensions.YourSearchPlugin){version.extensions.YourSearchPlugin={major:2,minor:1,revision:5,source:&quot;http://tiddlywiki.abego-software.de/#YourSearchPlugin&quot;,licence:&quot;[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]&quot;,copyright:&quot;Copyright (c) abego Software GmbH, 2005-2010 (www.abego-software.de)&quot;};if(!window.abego){window.abego={};}if(!Array.forEach){Array.forEach=function(_1,_2,_3){for(var i=0,_4=_1.length;i&lt;_4;i++){_2.call(_3,_1[i],i,_1);}};Array.prototype.forEach=function(_5,_6){for(var i=0,_7=this.length;i&lt;_7;i++){_5.call(_6,this[i],i,this);}};}abego.toInt=function(s,_8){if(!s){return _8;}var n=parseInt(s);return (n==NaN)?_8:n;};abego.createEllipsis=function(_9){var e=createTiddlyElement(_9,&quot;span&quot;);e.innerHTML=&quot;&amp;hellip;&quot;;};abego.shallowCopy=function(_a){if(!_a){return _a;}var _b={};for(var n in _a){_b[n]=_a[n];}return _b;};abego.copyOptions=function(_c){return !_c?{}:abego.shallowCopy(_c);};abego.countStrings=function(_d,s){if(!s){return 0;}var _e=s.length;var n=0;var _f=0;while(1){var i=_d.indexOf(s,_f);if(i&lt;0){return n;}n++;_f=i+_e;}return n;};abego.getBracedText=function(_10,_11,_12){if(!_11){_11=0;}var re=/\{([^\}]*)\}/gm;re.lastIndex=_11;var m=re.exec(_10);if(m){var s=m[1];var _13=abego.countStrings(s,&quot;{&quot;);if(!_13){if(_12){_12.lastIndex=re.lastIndex;}return s;}var len=_10.length;for(var i=re.lastIndex;i&lt;len&amp;&amp;_13;i++){var c=_10.charAt(i);if(c==&quot;{&quot;){_13++;}else{if(c==&quot;}&quot;){_13--;}}}if(!_13){if(_12){_12.lastIndex=i-1;}return _10.substring(m.index+1,i-1);}}};abego.select=function(_14,_15,_16,_17){if(!_17){_17=[];}_14.forEach(function(t){if(_15.call(_16,t)){_17.push(t);}});return _17;};abego.consumeEvent=function(e){if(e.stopPropagation){e.stopPropagation();}if(e.preventDefault){e.preventDefault();}e.cancelBubble=true;e.returnValue=true;};abego.TiddlerFilterTerm=function(_18,_19){if(!_19){_19={};}var _1a=_18;if(!_19.textIsRegExp){_1a=_18.escapeRegExp();if(_19.fullWordMatch){_1a=&quot;\\b&quot;+_1a+&quot;\\b&quot;;}}var _1b=new RegExp(_1a,&quot;m&quot;+(_19.caseSensitive?&quot;&quot;:&quot;i&quot;));this.tester=new abego.MultiFieldRegExpTester(_1b,_19.fields,_19.withExtendedFields);};abego.TiddlerFilterTerm.prototype.test=function(_1c){return this.tester.test(_1c);};abego.parseNewTiddlerCommandLine=function(s){var m=/(.*?)\.(?:\s+|$)([^#]*)(#.*)?/.exec(s);if(!m){m=/([^#]*)()(#.*)?/.exec(s);}if(m){var r;if(m[3]){var s2=m[3].replace(/#/g,&quot;&quot;);r=s2.parseParams(&quot;tag&quot;);}else{r=[[]];}var _1d=m[2]?m[2].trim():&quot;&quot;;r.push({name:&quot;text&quot;,value:_1d});r[0].text=[_1d];return {title:m[1].trim(),params:r};}else{return {title:s.trim(),params:[[]]};}};abego.parseTiddlerFilterTerm=function(_1e,_1f,_20){var re=/\s*(?:(?:\{([^\}]*)\})|(?:(=)|([#%!])|(?:(\w+)\s*\:(?!\/\/))|(?:(?:(&quot;(?:(?:\\&quot;)|[^&quot;])+&quot;)|(?:\/((?:(?:\\\/)|[^\/])+)\/)|(\w+\:\/\/[^\s]+)|([^\s\)\-\&quot;]+)))))/mg;var _21={&quot;!&quot;:&quot;title&quot;,&quot;%&quot;:&quot;text&quot;,&quot;#&quot;:&quot;tags&quot;};var _22={};var _23;re.lastIndex=_1f;while(1){var i=re.lastIndex;var m=re.exec(_1e);if(!m||m.index!=i){throw &quot;Word or String literal expected&quot;;}if(m[1]){var _24={};var _25=abego.getBracedText(_1e,0,_24);if(!_25){throw &quot;Invalid {...} syntax&quot;;}var f=Function(&quot;tiddler&quot;,&quot;return (&quot;+_25+&quot;);&quot;);return {func:f,lastIndex:_24.lastIndex,markRE:null};}if(m[2]){_23=true;}else{if(m[3]){_22[_21[m[3]]]=1;}else{if(m[4]){_22[m[4]]=1;}else{var _26=m[6];var _27=m[5]?window.eval(m[5]):m[6]?m[6]:m[7]?m[7]:m[8];var _20=abego.copyOptions(_20);_20.fullWordMatch=_23;_20.textIsRegExp=_26;var _28=[];for(var n in _22){_28.push(n);}if(_28.length==0){_20.fields=_20.defaultFields;}else{_20.fields=_28;_20.withExtendedFields=false;}var _29=new abego.TiddlerFilterTerm(_27,_20);var _2a=_26?_27:_27.escapeRegExp();if(_2a&amp;&amp;_23){_2a=&quot;\\b&quot;+_2a+&quot;\\b&quot;;}return {func:function(_2b){return _29.test(_2b);},lastIndex:re.lastIndex,markRE:_2a?&quot;(?:&quot;+_2a+&quot;)&quot;:null};}}}}};abego.BoolExp=function(s,_2c,_2d){this.s=s;var _2e=_2d&amp;&amp;_2d.defaultOperationIs_OR;var _2f=/\s*(?:(\-|not)|(\())/gi;var _30=/\s*\)/g;var _31=/\s*(?:(and|\&amp;\&amp;)|(or|\|\|))/gi;var _32=/\s*[^\)\s]/g;var _33=/\s*(\-|not)?(\s*\()?/gi;var _34;var _35=function(_36){_33.lastIndex=_36;var m=_33.exec(s);var _37;var _38;if(m&amp;&amp;m.index==_36){_36+=m[0].length;_37=m[1];if(m[2]){var e=_34(_36);_30.lastIndex=e.lastIndex;if(!_30.exec(s)){throw &quot;Missing ')'&quot;;}_38={func:e.func,lastIndex:_30.lastIndex,markRE:e.markRE};}}if(!_38){_38=_2c(s,_36,_2d);}if(_37){_38.func=(function(f){return function(_39){return !f(_39);};})(_38.func);_38.markRE=null;}return _38;};_34=function(_3a){var _3b=_35(_3a);while(1){var l=_3b.lastIndex;_31.lastIndex=l;var m=_31.exec(s);var _3c;var _3d;if(m&amp;&amp;m.index==l){_3c=!m[1];_3d=_35(_31.lastIndex);}else{try{_3d=_35(l);}catch(e){return _3b;}_3c=_2e;}_3b.func=(function(_3e,_3f,_40){return _40?function(_41){return _3e(_41)||_3f(_41);}:function(_42){return _3e(_42)&amp;&amp;_3f(_42);};})(_3b.func,_3d.func,_3c);_3b.lastIndex=_3d.lastIndex;if(!_3b.markRE){_3b.markRE=_3d.markRE;}else{if(_3d.markRE){_3b.markRE=_3b.markRE+&quot;|&quot;+_3d.markRE;}}}};var _43=_34(0);this.evalFunc=_43.func;if(_43.markRE){this.markRegExp=new RegExp(_43.markRE,_2d.caseSensitive?&quot;mg&quot;:&quot;img&quot;);}};abego.BoolExp.prototype.exec=function(){return this.evalFunc.apply(this,arguments);};abego.BoolExp.prototype.getMarkRegExp=function(){return this.markRegExp;};abego.BoolExp.prototype.toString=function(){return this.s;};abego.MultiFieldRegExpTester=function(re,_44,_45){this.re=re;this.fields=_44?_44:[&quot;title&quot;,&quot;text&quot;,&quot;tags&quot;];this.withExtendedFields=_45;};abego.MultiFieldRegExpTester.prototype.test=function(_46){var re=this.re;for(var i=0;i&lt;this.fields.length;i++){var s=store.getValue(_46,this.fields[i]);if(typeof s==&quot;string&quot;&amp;&amp;re.test(s)){return this.fields[i];}}if(this.withExtendedFields){return store.forEachField(_46,function(_47,_48,_49){return typeof _49==&quot;string&quot;&amp;&amp;re.test(_49)?_48:null;},true);}return null;};abego.TiddlerQuery=function(_4a,_4b,_4c,_4d,_4e){if(_4c){this.regExp=new RegExp(_4a,_4b?&quot;mg&quot;:&quot;img&quot;);this.tester=new abego.MultiFieldRegExpTester(this.regExp,_4d,_4e);}else{this.expr=new abego.BoolExp(_4a,abego.parseTiddlerFilterTerm,{defaultFields:_4d,caseSensitive:_4b,withExtendedFields:_4e});}this.getQueryText=function(){return _4a;};this.getUseRegExp=function(){return _4c;};this.getCaseSensitive=function(){return _4b;};this.getDefaultFields=function(){return _4d;};this.getWithExtendedFields=function(){return _4e;};};abego.TiddlerQuery.prototype.test=function(_4f){if(!_4f){return false;}if(this.regExp){return this.tester.test(_4f);}return this.expr.exec(_4f);};abego.TiddlerQuery.prototype.filter=function(_50){return abego.select(_50,this.test,this);};abego.TiddlerQuery.prototype.getMarkRegExp=function(){if(this.regExp){return &quot;&quot;.search(this.regExp)&gt;=0?null:this.regExp;}return this.expr.getMarkRegExp();};abego.TiddlerQuery.prototype.toString=function(){return (this.regExp?this.regExp:this.expr).toString();};abego.PageWiseRenderer=function(){this.firstIndexOnPage=0;};merge(abego.PageWiseRenderer.prototype,{setItems:function(_51){this.items=_51;this.setFirstIndexOnPage(0);},getMaxPagesInNavigation:function(){return 10;},getItemsCount:function(_52){return this.items?this.items.length:0;},getCurrentPageIndex:function(){return Math.floor(this.firstIndexOnPage/this.getItemsPerPage());},getLastPageIndex:function(){return Math.floor((this.getItemsCount()-1)/this.getItemsPerPage());},setFirstIndexOnPage:function(_53){this.firstIndexOnPage=Math.min(Math.max(0,_53),this.getItemsCount()-1);},getFirstIndexOnPage:function(){this.firstIndexOnPage=Math.floor(this.firstIndexOnPage/this.getItemsPerPage())*this.getItemsPerPage();return this.firstIndexOnPage;},getLastIndexOnPage:function(){return Math.min(this.getFirstIndexOnPage()+this.getItemsPerPage()-1,this.getItemsCount()-1);},onPageChanged:function(_54,_55){},renderPage:function(_56){if(_56.beginRendering){_56.beginRendering(this);}try{if(this.getItemsCount()){var _57=this.getLastIndexOnPage();var _58=-1;for(var i=this.getFirstIndexOnPage();i&lt;=_57;i++){_58++;_56.render(this,this.items[i],i,_58);}}}finally{if(_56.endRendering){_56.endRendering(this);}}},addPageNavigation:function(_59){if(!this.getItemsCount()){return;}var _5a=this;var _5b=function(e){if(!e){var e=window.event;}abego.consumeEvent(e);var _5c=abego.toInt(this.getAttribute(&quot;page&quot;),0);var _5d=_5a.getCurrentPageIndex();if(_5c==_5d){return;}var _5e=_5c*_5a.getItemsPerPage();_5a.setFirstIndexOnPage(_5e);_5a.onPageChanged(_5c,_5d);};var _5f;var _60=this.getCurrentPageIndex();var _61=this.getLastPageIndex();if(_60&gt;0){_5f=createTiddlyButton(_59,&quot;Previous&quot;,&quot;Go to previous page (Shortcut: Alt-'&lt;')&quot;,_5b,&quot;prev&quot;);_5f.setAttribute(&quot;page&quot;,(_60-1).toString());_5f.setAttribute(&quot;accessKey&quot;,&quot;&lt;&quot;);}for(var i=-this.getMaxPagesInNavigation();i&lt;this.getMaxPagesInNavigation();i++){var _62=_60+i;if(_62&lt;0){continue;}if(_62&gt;_61){break;}var _63=(i+_60+1).toString();var _64=_62==_60?&quot;currentPage&quot;:&quot;otherPage&quot;;_5f=createTiddlyButton(_59,_63,&quot;Go to page %0&quot;.format([_63]),_5b,_64);_5f.setAttribute(&quot;page&quot;,(_62).toString());}if(_60&lt;_61){_5f=createTiddlyButton(_59,&quot;Next&quot;,&quot;Go to next page (Shortcut: Alt-'&gt;')&quot;,_5b,&quot;next&quot;);_5f.setAttribute(&quot;page&quot;,(_60+1).toString());_5f.setAttribute(&quot;accessKey&quot;,&quot;&gt;&quot;);}}});abego.LimitedTextRenderer=function(){var _65=40;var _66=4;var _67=function(_68,_69,_6a){var n=_68.length;if(n==0){_68.push({start:_69,end:_6a});return;}var i=0;for(;i&lt;n;i++){var _6b=_68[i];if(_6b.start&lt;=_6a&amp;&amp;_69&lt;=_6b.end){var r;var _6c=i+1;for(;_6c&lt;n;_6c++){r=_68[_6c];if(r.start&gt;_6a||_69&gt;_6b.end){break;}}var _6d=_69;var _6e=_6a;for(var j=i;j&lt;_6c;j++){r=_68[j];_6d=Math.min(_6d,r.start);_6e=Math.max(_6e,r.end);}_68.splice(i,_6c-i,{start:_6d,end:_6e});return;}if(_6b.start&gt;_6a){break;}}_68.splice(i,0,{start:_69,end:_6a});};var _6f=function(_70){var _71=0;for(var i=0;i&lt;_70.length;i++){var _72=_70[i];_71+=_72.end-_72.start;}return _71;};var _73=function(c){return (c&gt;=&quot;a&quot;&amp;&amp;c&lt;=&quot;z&quot;)||(c&gt;=&quot;A&quot;&amp;&amp;c&lt;=&quot;Z&quot;)||c==&quot;_&quot;;};var _74=function(s,_75){if(!_73(s[_75])){return null;}for(var i=_75-1;i&gt;=0&amp;&amp;_73(s[i]);i--){}var _76=i+1;var n=s.length;for(i=_75+1;i&lt;n&amp;&amp;_73(s[i]);i++){}return {start:_76,end:i};};var _77=function(s,_78,_79){var _7a;if(_79){_7a=_74(s,_78);}else{if(_78&lt;=0){return _78;}_7a=_74(s,_78-1);}if(!_7a){return _78;}if(_79){if(_7a.start&gt;=_78-_66){return _7a.start;}if(_7a.end&lt;=_78+_66){return _7a.end;}}else{if(_7a.end&lt;=_78+_66){return _7a.end;}if(_7a.start&gt;=_78-_66){return _7a.start;}}return _78;};var _7b=function(s,_7c){var _7d=[];if(_7c){var _7e=0;var n=s.length;var _7f=0;do{_7c.lastIndex=_7e;var _80=_7c.exec(s);if(_80){if(_7e&lt;_80.index){var t=s.substring(_7e,_80.index);_7d.push({text:t});}_7d.push({text:_80[0],isMatch:true});_7e=_80.index+_80[0].length;}else{_7d.push({text:s.substr(_7e)});break;}}while(true);}else{_7d.push({text:s});}return _7d;};var _81=function(_82){var _83=0;for(var i=0;i&lt;_82.length;i++){if(_82[i].isMatch){_83++;}}return _83;};var _84=function(s,_85,_86,_87,_88){var _89=Math.max(Math.floor(_88/(_87+1)),_65);var _8a=Math.max(_89-(_86-_85),0);var _8b=Math.min(Math.floor(_86+_8a/3),s.length);var _8c=Math.max(_8b-_89,0);_8c=_77(s,_8c,true);_8b=_77(s,_8b,false);return {start:_8c,end:_8b};};var _8d=function(_8e,s,_8f){var _90=[];var _91=_81(_8e);var pos=0;for(var i=0;i&lt;_8e.length;i++){var t=_8e[i];var _92=t.text;if(t.isMatch){var _93=_84(s,pos,pos+_92.length,_91,_8f);_67(_90,_93.start,_93.end);}pos+=_92.length;}return _90;};var _94=function(s,_95,_96){var _97=_96-_6f(_95);while(_97&gt;0){if(_95.length==0){_67(_95,0,_77(s,_96,false));return;}else{var _98=_95[0];var _99;var _9a;if(_98.start==0){_99=_98.end;if(_95.length&gt;1){_9a=_95[1].start;}else{_67(_95,_99,_77(s,_99+_97,false));return;}}else{_99=0;_9a=_98.start;}var _9b=Math.min(_9a,_99+_97);_67(_95,_99,_9b);_97-=(_9b-_99);}}};var _9c=function(_9d,s,_9e,_9f,_a0){if(_9f.length==0){return;}var _a1=function(_a2,s,_a3,_a4,_a5){var t;var _a6;var pos=0;var i=0;var _a7=0;for(;i&lt;_a3.length;i++){t=_a3[i];_a6=t.text;if(_a4&lt;pos+_a6.length){_a7=_a4-pos;break;}pos+=_a6.length;}var _a8=_a5-_a4;for(;i&lt;_a3.length&amp;&amp;_a8&gt;0;i++){t=_a3[i];_a6=t.text.substr(_a7);_a7=0;if(_a6.length&gt;_a8){_a6=_a6.substr(0,_a8);}if(t.isMatch){createTiddlyElement(_a2,&quot;span&quot;,null,&quot;marked&quot;,_a6);}else{createTiddlyText(_a2,_a6);}_a8-=_a6.length;}if(_a5&lt;s.length){abego.createEllipsis(_a2);}};if(_9f[0].start&gt;0){abego.createEllipsis(_9d);}var _a9=_a0;for(var i=0;i&lt;_9f.length&amp;&amp;_a9&gt;0;i++){var _aa=_9f[i];var len=Math.min(_aa.end-_aa.start,_a9);_a1(_9d,s,_9e,_aa.start,_aa.start+len);_a9-=len;}};this.render=function(_ab,s,_ac,_ad){if(s.length&lt;_ac){_ac=s.length;}var _ae=_7b(s,_ad);var _af=_8d(_ae,s,_ac);_94(s,_af,_ac);_9c(_ab,s,_ae,_af,_ac);};};(function(){function _b0(msg){alert(msg);throw msg;};if(version.major&lt;2||(version.major==2&amp;&amp;version.minor&lt;1)){_b0(&quot;YourSearchPlugin requires TiddlyWiki 2.1 or newer.\n\nCheck the archive for YourSearch plugins\nsupporting older versions of TiddlyWiki.\n\nArchive: http://tiddlywiki.abego-software.de/archive&quot;);}abego.YourSearch={};var _b1;var _b2;var _b3=function(_b4){_b1=_b4;};var _b5=function(){return _b1?_b1:[];};var _b6=function(){return _b1?_b1.length:0;};var _b7=4;var _b8=10;var _b9=2;var _ba=function(s,re){var m=s.match(re);return m?m.length:0;};var _bb=function(_bc,_bd){var _be=_bd.getMarkRegExp();if(!_be){return 1;}var _bf=_bc.title.match(_be);var _c0=_bf?_bf.length:0;var _c1=_ba(_bc.getTags(),_be);var _c2=_bf?_bf.join(&quot;&quot;).length:0;var _c3=_bc.title.length&gt;0?_c2/_bc.title.length:0;var _c4=_c0*_b7+_c1*_b9+_c3*_b8+1;return _c4;};var _c5=function(_c6,_c7,_c8,_c9,_ca,_cb){_b2=null;var _cc=_c6.reverseLookup(&quot;tags&quot;,_cb,false);try{var _cd=[];if(config.options.chkSearchInTitle){_cd.push(&quot;title&quot;);}if(config.options.chkSearchInText){_cd.push(&quot;text&quot;);}if(config.options.chkSearchInTags){_cd.push(&quot;tags&quot;);}_b2=new abego.TiddlerQuery(_c7,_c8,_c9,_cd,config.options.chkSearchExtendedFields);}catch(e){return [];}var _ce=_b2.filter(_cc);var _cf=abego.YourSearch.getRankFunction();for(var i=0;i&lt;_ce.length;i++){var _d0=_ce[i];var _d1=_cf(_d0,_b2);_d0.searchRank=_d1;}if(!_ca){_ca=&quot;title&quot;;}var _d2=function(a,b){var _d3=a.searchRank-b.searchRank;if(_d3==0){if(a[_ca]==b[_ca]){return (0);}else{return (a[_ca]&lt;b[_ca])?-1:+1;}}else{return (_d3&gt;0)?-1:+1;}};_ce.sort(_d2);return _ce;};var _d4=80;var _d5=50;var _d6=250;var _d7=50;var _d8=25;var _d9=10;var _da=&quot;yourSearchResult&quot;;var _db=&quot;yourSearchResultItems&quot;;var _dc;var _dd;var _de;var _df;var _e0;var _e1=function(){if(version.extensions.YourSearchPlugin.styleSheetInited){return;}version.extensions.YourSearchPlugin.styleSheetInited=true;setStylesheet(store.getTiddlerText(&quot;YourSearchStyleSheet&quot;),&quot;yourSearch&quot;);};var _e2=function(){return _dd!=null&amp;&amp;_dd.parentNode==document.body;};var _e3=function(){if(_e2()){document.body.removeChild(_dd);}};var _e4=function(e){_e3();var _e5=this.getAttribute(&quot;tiddlyLink&quot;);if(_e5){var _e6=this.getAttribute(&quot;withHilite&quot;);var _e7=highlightHack;if(_e6&amp;&amp;_e6==&quot;true&quot;&amp;&amp;_b2){highlightHack=_b2.getMarkRegExp();}story.displayTiddler(this,_e5);highlightHack=_e7;}return (false);};var _e8=function(){if(!_de){return;}var _e9=_de;var _ea=findPosX(_e9);var _eb=findPosY(_e9);var _ec=_e9.offsetHeight;var _ed=_ea;var _ee=_eb+_ec;var _ef=findWindowWidth();if(_ef&lt;_dd.offsetWidth){_dd.style.width=(_ef-100)+&quot;px&quot;;_ef=findWindowWidth();}var _f0=_dd.offsetWidth;if(_ed+_f0&gt;_ef){_ed=_ef-_f0-30;}if(_ed&lt;0){_ed=0;}_dd.style.left=_ed+&quot;px&quot;;_dd.style.top=_ee+&quot;px&quot;;_dd.style.display=&quot;block&quot;;};var _f1=function(){if(_dd){window.scrollTo(0,ensureVisible(_dd));}if(_de){window.scrollTo(0,ensureVisible(_de));}};var _f2=function(){_e8();_f1();};var _f3;var _f4;var _f5=new abego.PageWiseRenderer();var _f6=function(_f7){this.itemHtml=store.getTiddlerText(&quot;YourSearchItemTemplate&quot;);if(!this.itemHtml){_b0(&quot;YourSearchItemTemplate not found&quot;);}this.place=document.getElementById(_db);if(!this.place){this.place=createTiddlyElement(_f7,&quot;div&quot;,_db);}};merge(_f6.prototype,{render:function(_f8,_f9,_fa,_fb){_f3=_fb;_f4=_f9;var _fc=createTiddlyElement(this.place,&quot;div&quot;,null,&quot;yourSearchItem&quot;);_fc.innerHTML=this.itemHtml;applyHtmlMacros(_fc,null);refreshElements(_fc,null);},endRendering:function(_fd){_f4=null;}});var _fe=function(){if(!_dd||!_de){return;}var _ff=store.getTiddlerText(&quot;YourSearchResultTemplate&quot;);if(!_ff){_ff=&quot;&lt;b&gt;Tiddler YourSearchResultTemplate not found&lt;/b&gt;&quot;;}_dd.innerHTML=_ff;applyHtmlMacros(_dd,null);refreshElements(_dd,null);var _100=new _f6(_dd);_f5.renderPage(_100);_f2();};_f5.getItemsPerPage=function(){var n=(config.options.chkPreviewText)?abego.toInt(config.options.txtItemsPerPageWithPreview,_d9):abego.toInt(config.options.txtItemsPerPage,_d8);return (n&gt;0)?n:1;};_f5.onPageChanged=function(){_fe();};var _101=function(){if(_de==null||!config.options.chkUseYourSearch){return;}if((_de.value==_dc)&amp;&amp;_dc&amp;&amp;!_e2()){if(_dd&amp;&amp;(_dd.parentNode!=document.body)){document.body.appendChild(_dd);_f2();}else{abego.YourSearch.onShowResult(true);}}};var _102=function(){_e3();_dd=null;_dc=null;};var _103=function(self,e){while(e!=null){if(self==e){return true;}e=e.parentNode;}return false;};var _104=function(e){if(e.target==_de){return;}if(e.target==_df){return;}if(_dd&amp;&amp;_103(_dd,e.target)){return;}_e3();};var _105=function(e){if(e.keyCode==27){_e3();}};addEvent(document,&quot;click&quot;,_104);addEvent(document,&quot;keyup&quot;,_105);var _106=function(text,_107,_108){_dc=text;_b3(_c5(store,text,_107,_108,&quot;title&quot;,&quot;excludeSearch&quot;));abego.YourSearch.onShowResult();};var _109=function(_10a,_10b,_10c,_10d,_10e,_10f){_e1();_dc=&quot;&quot;;var _110=null;var _111=function(txt){if(config.options.chkUseYourSearch){_106(txt.value,config.options.chkCaseSensitiveSearch,config.options.chkRegExpSearch);}else{story.search(txt.value,config.options.chkCaseSensitiveSearch,config.options.chkRegExpSearch);}_dc=txt.value;};var _112=function(e){_111(_de);return false;};var _113=function(e){if(!e){var e=window.event;}_de=this;switch(e.keyCode){case 13:if(e.ctrlKey&amp;&amp;_e0&amp;&amp;_e2()){_e0.onclick.apply(_e0,[e]);}else{_111(this);}break;case 27:if(_e2()){_e3();}else{this.value=&quot;&quot;;clearMessage();}break;}if(String.fromCharCode(e.keyCode)==this.accessKey||e.altKey){_101();}if(this.value.length&lt;3&amp;&amp;_110){clearTimeout(_110);}if(this.value.length&gt;2){if(this.value!=_dc){if(!config.options.chkUseYourSearch||config.options.chkSearchAsYouType){if(_110){clearTimeout(_110);}var txt=this;_110=setTimeout(function(){_111(txt);},500);}}else{if(_110){clearTimeout(_110);}}}if(this.value.length==0){_e3();}};var _114=function(e){this.select();clearMessage();_101();};var args=_10e.parseParams(&quot;list&quot;,null,true);var _115=getFlag(args,&quot;buttonAtRight&quot;);var _116=getParam(args,&quot;sizeTextbox&quot;,this.sizeTextbox);var btn;if(!_115){btn=createTiddlyButton(_10a,this.label,this.prompt,_112);}var txt=createTiddlyElement(null,&quot;input&quot;,null,&quot;txtOptionInput searchField&quot;,null);if(_10c[0]){txt.value=_10c[0];}txt.onkeyup=_113;txt.onfocus=_114;txt.setAttribute(&quot;size&quot;,_116);txt.setAttribute(&quot;accessKey&quot;,this.accessKey);txt.setAttribute(&quot;autocomplete&quot;,&quot;off&quot;);if(config.browser.isSafari){txt.setAttribute(&quot;type&quot;,&quot;search&quot;);txt.setAttribute(&quot;results&quot;,&quot;5&quot;);}else{txt.setAttribute(&quot;type&quot;,&quot;text&quot;);}if(_10a){_10a.appendChild(txt);}if(_115){btn=createTiddlyButton(_10a,this.label,this.prompt,_112);}_de=txt;_df=btn;};var _117=function(){_e3();var _118=_b5();var n=_118.length;if(n){var _119=[];for(var i=0;i&lt;n;i++){_119.push(_118[i].title);}story.displayTiddlers(null,_119);}};var _11a=function(_11b,_11c,_11d,_11e){invokeMacro(_11b,&quot;option&quot;,_11c,_11d,_11e);var elem=_11b.lastChild;var _11f=elem.onclick;elem.onclick=function(e){var _120=_11f.apply(this,arguments);_fe();return _120;};return elem;};var _121=function(s){var _122=[&quot;''&quot;,&quot;{{{&quot;,&quot;}}}&quot;,&quot;//&quot;,&quot;&lt;&lt;&lt;&quot;,&quot;/***&quot;,&quot;***/&quot;];var _123=&quot;&quot;;for(var i=0;i&lt;_122.length;i++){if(i!=0){_123+=&quot;|&quot;;}_123+=&quot;(&quot;+_122[i].escapeRegExp()+&quot;)&quot;;}return s.replace(new RegExp(_123,&quot;mg&quot;),&quot;&quot;).trim();};var _124=function(){var i=_f3;return (i&gt;=0&amp;&amp;i&lt;=9)?(i&lt;9?(i+1):0):-1;};var _125=new abego.LimitedTextRenderer();var _126=function(_127,s,_128){_125.render(_127,s,_128,_b2.getMarkRegExp());};var _129=TiddlyWiki.prototype.saveTiddler;TiddlyWiki.prototype.saveTiddler=function(_12a,_12b,_12c,_12d,_12e,tags,_12f){_129.apply(this,arguments);_102();};var _130=TiddlyWiki.prototype.removeTiddler;TiddlyWiki.prototype.removeTiddler=function(_131){_130.apply(this,arguments);_102();};config.macros.yourSearch={label:&quot;yourSearch&quot;,prompt:&quot;Gives access to the current/last YourSearch result&quot;,handler:function(_132,_133,_134,_135,_136,_137){if(_134.length==0){return;}var name=_134[0];var func=config.macros.yourSearch.funcs[name];if(func){func(_132,_133,_134,_135,_136,_137);}},tests:{&quot;true&quot;:function(){return true;},&quot;false&quot;:function(){return false;},&quot;found&quot;:function(){return _b6()&gt;0;},&quot;previewText&quot;:function(){return config.options.chkPreviewText;}},funcs:{itemRange:function(_138){if(_b6()){var _139=_f5.getLastIndexOnPage();var s=&quot;%0 - %1&quot;.format([_f5.getFirstIndexOnPage()+1,_139+1]);createTiddlyText(_138,s);}},count:function(_13a){createTiddlyText(_13a,_b6().toString());},query:function(_13b){if(_b2){createTiddlyText(_13b,_b2.toString());}},version:function(_13c){var t=&quot;YourSearch %0.%1.%2&quot;.format([version.extensions.YourSearchPlugin.major,version.extensions.YourSearchPlugin.minor,version.extensions.YourSearchPlugin.revision]);var e=createTiddlyElement(_13c,&quot;a&quot;);e.setAttribute(&quot;href&quot;,&quot;http://tiddlywiki.abego-software.de/#YourSearchPlugin&quot;);e.innerHTML=&quot;&lt;font color=\&quot;black\&quot; face=\&quot;Arial, Helvetica, sans-serif\&quot;&gt;&quot;+t+&quot;&lt;font&gt;&quot;;},copyright:function(_13d){var e=createTiddlyElement(_13d,&quot;a&quot;);e.setAttribute(&quot;href&quot;,&quot;http://www.abego-software.de&quot;);e.innerHTML=&quot;&lt;font color=\&quot;black\&quot; face=\&quot;Arial, Helvetica, sans-serif\&quot;&gt;&amp;copy; 2005-2008 &lt;b&gt;&lt;font color=\&quot;red\&quot;&gt;abego&lt;/font&gt;&lt;/b&gt; Software&lt;font&gt;&quot;;},newTiddlerButton:function(_13e){if(_b2){var r=abego.parseNewTiddlerCommandLine(_b2.getQueryText());var btn=config.macros.newTiddler.createNewTiddlerButton(_13e,r.title,r.params,&quot;new tiddler&quot;,&quot;Create a new tiddler based on search text. (Shortcut: Ctrl-Enter; Separators: '.', '#')&quot;,null,&quot;text&quot;);var _13f=btn.onclick;btn.onclick=function(){_e3();_13f.apply(this,arguments);};_e0=btn;}},linkButton:function(_140,_141,_142,_143,_144,_145){if(_142&lt;2){return;}var _146=_142[1];var text=_142&lt;3?_146:_142[2];var _147=_142&lt;4?text:_142[3];var _148=_142&lt;5?null:_142[4];var btn=createTiddlyButton(_140,text,_147,_e4,null,null,_148);btn.setAttribute(&quot;tiddlyLink&quot;,_146);},closeButton:function(_149,_14a,_14b,_14c,_14d,_14e){var _14f=createTiddlyButton(_149,&quot;close&quot;,&quot;Close the Search Results (Shortcut: ESC)&quot;,_e3);},openAllButton:function(_150,_151,_152,_153,_154,_155){var n=_b6();if(n==0){return;}var _156=n==1?&quot;open tiddler&quot;:&quot;open all %0 tiddlers&quot;.format([n]);var _157=createTiddlyButton(_150,_156,&quot;Open all found tiddlers (Shortcut: Alt-O)&quot;,_117);_157.setAttribute(&quot;accessKey&quot;,&quot;O&quot;);},naviBar:function(_158,_159,_15a,_15b,_15c,_15d){_f5.addPageNavigation(_158);},&quot;if&quot;:function(_15e,_15f,_160,_161,_162,_163){if(_160.length&lt;2){return;}var _164=_160[1];var _165=(_164==&quot;not&quot;);if(_165){if(_160.length&lt;3){return;}_164=_160[2];}var test=config.macros.yourSearch.tests[_164];var _166=false;try{if(test){_166=test(_15e,_15f,_160,_161,_162,_163)!=_165;}else{_166=(!eval(_164))==_165;}}catch(ex){}if(!_166){_15e.style.display=&quot;none&quot;;}},chkPreviewText:function(_167,_168,_169,_16a,_16b,_16c){var _16d=_169.slice(1).join(&quot; &quot;);var elem=_11a(_167,&quot;chkPreviewText&quot;,_16a,_16c);elem.setAttribute(&quot;accessKey&quot;,&quot;P&quot;);elem.title=&quot;Show text preview of found tiddlers (Shortcut: Alt-P)&quot;;return elem;}}};config.macros.foundTiddler={label:&quot;foundTiddler&quot;,prompt:&quot;Provides information on the tiddler currently processed on the YourSearch result page&quot;,handler:function(_16e,_16f,_170,_171,_172,_173){var name=_170[0];var func=config.macros.foundTiddler.funcs[name];if(func){func(_16e,_16f,_170,_171,_172,_173);}},funcs:{title:function(_174,_175,_176,_177,_178,_179){if(!_f4){return;}var _17a=_124();var _17b=_17a&gt;=0?&quot;Open tiddler (Shortcut: Alt-%0)&quot;.format([_17a.toString()]):&quot;Open tiddler&quot;;var btn=createTiddlyButton(_174,null,_17b,_e4,null);btn.setAttribute(&quot;tiddlyLink&quot;,_f4.title);btn.setAttribute(&quot;withHilite&quot;,&quot;true&quot;);_126(btn,_f4.title,_d4);if(_17a&gt;=0){btn.setAttribute(&quot;accessKey&quot;,_17a.toString());}},tags:function(_17c,_17d,_17e,_17f,_180,_181){if(!_f4){return;}_126(_17c,_f4.getTags(),_d5);},text:function(_182,_183,_184,_185,_186,_187){if(!_f4){return;}_126(_182,_121(_f4.text),_d6);},field:function(_188,_189,_18a,_18b,_18c,_18d){if(!_f4){return;}var name=_18a[1];var len=_18a.length&gt;2?abego.toInt(_18a[2],_d7):_d7;var v=store.getValue(_f4,name);if(v){_126(_188,_121(v),len);}},number:function(_18e,_18f,_190,_191,_192,_193){var _194=_124();if(_194&gt;=0){var text=&quot;%0)&quot;.format([_194.toString()]);createTiddlyElement(_18e,&quot;span&quot;,null,&quot;shortcutNumber&quot;,text);}}}};var opts={chkUseYourSearch:true,chkPreviewText:true,chkSearchAsYouType:true,chkSearchInTitle:true,chkSearchInText:true,chkSearchInTags:true,chkSearchExtendedFields:true,txtItemsPerPage:_d8,txtItemsPerPageWithPreview:_d9};for(var n in opts){if(config.options[n]==undefined){config.options[n]=opts[n];}}config.shadowTiddlers.AdvancedOptions+=&quot;\n&lt;&lt;option chkUseYourSearch&gt;&gt; Use 'Your Search' //([[more options|YourSearch Options]]) ([[help|YourSearch Help]])// &quot;;config.shadowTiddlers[&quot;YourSearch Help&quot;]=&quot;!Field Search\nWith the Field Search you can restrict your search to certain fields of a tiddler, e.g&quot;+&quot; only search the tags or only the titles. The general form is //fieldname//'':''//textToSearch// (e.&quot;+&quot;g. {{{title:intro}}}). In addition one-character shortcuts are also supported for the standard field&quot;+&quot;s {{{title}}}, {{{text}}} and {{{tags}}}:\n|!What you want|!What you type|!Example|\n|Search ''titles &quot;+&quot;only''|start word with ''!''|{{{!jonny}}} (shortcut for {{{title:jonny}}})|\n|Search ''contents/text &quot;+&quot;only''|start word with ''%''|{{{%football}}} (shortcut for {{{text:football}}})|\n|Search ''tags only&quot;+&quot;''|start word with ''#''|{{{#Plugin}}} (shortcut for {{{tags:Plugin}}})|\n\nUsing this feature you may&quot;+&quot; also search the extended fields (\&quot;Metadata\&quot;) introduced with TiddlyWiki 2.1, e.g. use {{{priority:1&quot;+&quot;}}} to find all tiddlers with the priority field set to \&quot;1\&quot;.\n\nYou may search a word in more than one&quot;+&quot; field. E.g. {{{!#Plugin}}} (or {{{title:tags:Plugin}}} in the \&quot;long form\&quot;) finds tiddlers containin&quot;+&quot;g \&quot;Plugin\&quot; either in the title or in the tags (but does not look for \&quot;Plugin\&quot; in the text). \n\n!Boole&quot;+&quot;an Search\nThe Boolean Search is useful when searching for multiple words.\n|!What you want|!What you &quot;+&quot;type|!Example|\n|''All words'' must exist|List of words|{{{jonny jeremy}}} (or {{{jonny and jeremy}}}&quot;+&quot;)|\n|''At least one word'' must exist|Separate words by ''or''|{{{jonny or jeremy}}}|\n|A word ''must &quot;+&quot;not exist''|Start word with ''-''|{{{-jonny}}} (or {{{not jonny}}})|\n\n''Note:'' When you specify two&quot;+&quot; words, separated with a space, YourSearch finds all tiddlers that contain both words, but not neces&quot;+&quot;sarily next to each other. If you want to find a sequence of word, e.g. '{{{John Brown}}}', you need&quot;+&quot; to put the words into quotes. I.e. you type: {{{\&quot;john brown\&quot;}}}.\n\nUsing parenthesis you may change &quot;+&quot;the default \&quot;left to right\&quot; evaluation of the boolean search. E.g. {{{not (jonny or jeremy)}}} finds&quot;+&quot; all tiddlers that contain neither \&quot;jonny\&quot; nor \&quot;jeremy. In contrast to this {{{not jonny or jeremy}}&quot;+&quot;} (i.e. without parenthesis) finds all tiddlers that either don't contain \&quot;jonny\&quot; or that contain \&quot;j&quot;+&quot;eremy\&quot;.\n\n!'Exact Word' Search\nBy default a search result all matches that 'contain' the searched tex&quot;+&quot;t. E.g. if you search for {{{Task}}} you will get all tiddlers containing 'Task', but also '~Complet&quot;+&quot;edTask', '~TaskForce' etc.\n\nIf you only want to get the tiddlers that contain 'exactly the word' you&quot;+&quot; need to prefix it with a '='. E.g. typing '=Task' will find the tiddlers that contain the word 'Tas&quot;+&quot;k', ignoring words that just contain 'Task' as a substring.\n\n!~CaseSensitiveSearch and ~RegExpSearch&quot;+&quot;\nThe standard search options ~CaseSensitiveSearch and ~RegExpSearch are fully supported by YourSearc&quot;+&quot;h. However when ''~RegExpSearch'' is on Filtered and Boolean Search are disabled.\n\nIn addition you m&quot;+&quot;ay do a \&quot;regular expression\&quot; search even with the ''~RegExpSearch'' set to false by directly enterin&quot;+&quot;g the regular expression into the search field, framed with {{{/.../}}}. \n\nExample: {{{/m[ae][iy]er/&quot;+&quot;}}} will find all tiddlers that contain either \&quot;maier\&quot;, \&quot;mayer\&quot;, \&quot;meier\&quot; or \&quot;meyer\&quot;.\n\n!~JavaScript E&quot;+&quot;xpression Filtering\nIf you are familiar with JavaScript programming and know some TiddlyWiki interna&quot;+&quot;ls you may also use JavaScript expression for the search. Just enter a JavaScript boolean expression&quot;+&quot; into the search field, framed with {{{ { ... } }}}. In the code refer to the variable tiddler and e&quot;+&quot;valuate to {{{true}}} when the given tiddler should be included in the result. \n\nExample: {{{ { tidd&quot;+&quot;ler.modified &gt; new Date(\&quot;Jul 4, 2005\&quot;)} }}} returns all tiddler modified after July 4th, 2005.\n\n!Com&quot;+&quot;bined Search\nYou are free to combine the various search options. \n\n''Examples''\n|!What you type|!Res&quot;+&quot;ult|\n|{{{!jonny !jeremy -%football}}}|all tiddlers with both {{{jonny}}} and {{{jeremy}}} in its tit&quot;+&quot;les, but no {{{football}}} in content.|\n|{{{#=Task}}}|All tiddlers tagged with 'Task' (the exact wor&quot;+&quot;d). Tags named '~CompletedTask', '~TaskForce' etc. are not considered.|\n\n!Access Keys\nYou are encour&quot;+&quot;aged to use the access keys (also called \&quot;shortcut\&quot; keys) for the most frequently used operations. F&quot;+&quot;or quick reference these shortcuts are also mentioned in the tooltip for the various buttons etc.\n\n|&quot;+&quot;!Key|!Operation|\n|{{{Alt-F}}}|''The most important keystroke'': It moves the cursor to the search in&quot;+&quot;put field so you can directly start typing your query. Pressing {{{Alt-F}}} will also display the pr&quot;+&quot;evious search result. This way you can quickly display multiple tiddlers using \&quot;Press {{{Alt-F}}}. S&quot;+&quot;elect tiddler.\&quot; sequences.|\n|{{{ESC}}}|Closes the [[YourSearch Result]]. When the [[YourSearch Resul&quot;+&quot;t]] is already closed and the cursor is in the search input field the field's content is cleared so &quot;+&quot;you start a new query.|\n|{{{Alt-1}}}, {{{Alt-2}}},... |Pressing these keys opens the first, second e&quot;+&quot;tc. tiddler from the result list.|\n|{{{Alt-O}}}|Opens all found tiddlers.|\n|{{{Alt-P}}}|Toggles the &quot;+&quot;'Preview Text' mode.|\n|{{{Alt-'&lt;'}}}, {{{Alt-'&gt;'}}}|Displays the previous or next page in the [[Your&quot;+&quot;Search Result]].|\n|{{{Return}}}|When you have turned off the 'as you type' search mode pressing the &quot;+&quot;{{{Return}}} key actually starts the search (as does pressing the 'search' button).|\n\n//If some of t&quot;+&quot;hese shortcuts don't work for you check your browser if you have other extensions installed that alr&quot;+&quot;eady \&quot;use\&quot; these shortcuts.//&quot;;config.shadowTiddlers[&quot;YourSearch Options&quot;]=&quot;|&gt;|!YourSearch Options|\n|&gt;|&lt;&lt;option chkUseYourSearch&gt;&gt; Use 'Your Search'|\n|!|&lt;&lt;option chkPreviewText&quot;+&quot;&gt;&gt; Show Text Preview|\n|!|&lt;&lt;option chkSearchAsYouType&gt;&gt; 'Search As You Type' Mode (No RETURN required&quot;+&quot; to start search)|\n|!|Default Search Filter:&lt;&lt;option chkSearchInTitle&gt;&gt;Title ('!')     &lt;&lt;option chk&quot;+&quot;SearchInText&gt;&gt;Text ('%')     &lt;&lt;option chkSearchInTags&gt;&gt;Tags ('#')    &lt;&lt;option chkSearchExtendedFiel&quot;+&quot;ds&gt;&gt;Extended Fields&lt;html&gt;&lt;br&gt;&lt;font size=\&quot;-2\&quot;&gt;The fields of a tiddlers that are searched when you don&quot;+&quot;'t explicitly specify a filter in the search text &lt;br&gt;(Explictly specify fields using one or more '!&quot;+&quot;', '%', '#' or 'fieldname:' prefix before the word/text to find).&lt;/font&gt;&lt;/html&gt;|\n|!|Number of items &quot;+&quot;on search result page: &lt;&lt;option txtItemsPerPage&gt;&gt;|\n|!|Number of items on search result page with pre&quot;+&quot;view text: &lt;&lt;option txtItemsPerPageWithPreview&gt;&gt;|\n&quot;;config.shadowTiddlers[&quot;YourSearchStyleSheet&quot;]=&quot;/***\n!~YourSearchResult Stylesheet\n***/\n/*{{{*/\n.yourSearchResult {\n\tposition: absolute;\n\twidth: 800&quot;+&quot;px;\n\n\tpadding: 0.2em;\n\tlist-style: none;\n\tmargin: 0;\n\n\tbackground: #ffd;\n\tborder: 1px solid DarkGra&quot;+&quot;y;\n}\n\n/*}}}*/\n/***\n!!Summary Section\n***/\n/*{{{*/\n.yourSearchResult .summary {\n\tborder-bottom-width:&quot;+&quot; thin;\n\tborder-bottom-style: solid;\n\tborder-bottom-color: #999999;\n\tpadding-bottom: 4px;\n}\n\n.yourSea&quot;+&quot;rchRange, .yourSearchCount, .yourSearchQuery   {\n\tfont-weight: bold;\n}\n\n.yourSearchResult .summary .&quot;+&quot;button {\n\tfont-size: 10px;\n\n\tpadding-left: 0.3em;\n\tpadding-right: 0.3em;\n}\n\n.yourSearchResult .summa&quot;+&quot;ry .chkBoxLabel {\n\tfont-size: 10px;\n\n\tpadding-right: 0.3em;\n}\n\n/*}}}*/\n/***\n!!Items Area\n***/\n/*{{{*&quot;+&quot;/\n.yourSearchResult .marked {\n\tbackground: none;\n\tfont-weight: bold;\n}\n\n.yourSearchItem {\n\tmargin-to&quot;+&quot;p: 2px;\n}\n\n.yourSearchNumber {\n\tcolor: #808080;\n}\n\n\n.yourSearchTags {\n\tcolor: #008000;\n}\n\n.yourSearc&quot;+&quot;hText {\n\tcolor: #808080;\n\tmargin-bottom: 6px;\n}\n\n/*}}}*/\n/***\n!!Footer\n***/\n/*{{{*/\n.yourSearchFoote&quot;+&quot;r {\n\tmargin-top: 8px;\n\tborder-top-width: thin;\n\tborder-top-style: solid;\n\tborder-top-color: #999999;&quot;+&quot;\n}\n\n.yourSearchFooter a:hover{\n\tbackground: none;\n\tcolor: none;\n}\n/*}}}*/\n/***\n!!Navigation Bar\n***/&quot;+&quot;\n/*{{{*/\n.yourSearchNaviBar a {\n\tfont-size: 16px;\n\tmargin-left: 4px;\n\tmargin-right: 4px;\n\tcolor: bla&quot;+&quot;ck;\n\ttext-decoration: underline;\n}\n\n.yourSearchNaviBar a:hover {\n\tbackground-color: none;\n}\n\n.yourSe&quot;+&quot;archNaviBar .prev {\n\tfont-weight: bold;\n\tcolor: blue;\n}\n\n.yourSearchNaviBar .currentPage {\n\tcolor: #&quot;+&quot;FF0000;\n\tfont-weight: bold;\n\ttext-decoration: none;\n}\n\n.yourSearchNaviBar .next {\n\tfont-weight: bold&quot;+&quot;;\n\tcolor: blue;\n}\n/*}}}*/\n&quot;;config.shadowTiddlers[&quot;YourSearchResultTemplate&quot;]=&quot;&lt;!--\n{{{\n--&gt;\n&lt;span macro=\&quot;yourSearch if found\&quot;&gt;\n&lt;!-- The Summary Header ============================&quot;+&quot;================ --&gt;\n&lt;table class=\&quot;summary\&quot; border=\&quot;0\&quot; width=\&quot;100%\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot;&gt;&quot;+&quot;&lt;tbody&gt;\n  &lt;tr&gt;\n\t&lt;td align=\&quot;left\&quot;&gt;\n\t\tYourSearch Result &lt;span class=\&quot;yourSearchRange\&quot; macro=\&quot;yourSearc&quot;+&quot;h itemRange\&quot;&gt;&lt;/span&gt;\n\t\t&amp;nbsp;of&amp;nbsp;&lt;span class=\&quot;yourSearchCount\&quot; macro=\&quot;yourSearch count\&quot;&gt;&lt;/span&gt;\n&quot;+&quot;\t\tfor&amp;nbsp;&lt;span class=\&quot;yourSearchQuery\&quot; macro=\&quot;yourSearch query\&quot;&gt;&lt;/span&gt;\n\t&lt;/td&gt;\n\t&lt;td class=\&quot;yourSea&quot;+&quot;rchButtons\&quot; align=\&quot;right\&quot;&gt;\n\t\t&lt;span macro=\&quot;yourSearch chkPreviewText\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;chkBoxLabel&quot;+&quot;\&quot;&gt;preview text&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch newTiddlerButton\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch openAllButton\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch lin&quot;+&quot;kButton 'YourSearch Options' options 'Configure YourSearch'\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch linkB&quot;+&quot;utton 'YourSearch Help' help 'Get help how to use YourSearch'\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch clo&quot;+&quot;seButton\&quot;&gt;&lt;/span&gt;\n\t&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;!-- The List of Found Tiddlers =================&quot;+&quot;=========================== --&gt;\n&lt;div id=\&quot;yourSearchResultItems\&quot; itemsPerPage=\&quot;25\&quot; itemsPerPageWithPr&quot;+&quot;eview=\&quot;10\&quot;&gt;&lt;/div&gt;\n\n&lt;!-- The Footer (with the Navigation) ===========================================&quot;+&quot;= --&gt;\n&lt;table class=\&quot;yourSearchFooter\&quot; border=\&quot;0\&quot; width=\&quot;100%\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot;&gt;&lt;tbody&quot;+&quot;&gt;\n  &lt;tr&gt;\n\t&lt;td align=\&quot;left\&quot;&gt;\n\t\tResult page: &lt;span class=\&quot;yourSearchNaviBar\&quot; macro=\&quot;yourSearch naviBar&quot;+&quot;\&quot;&gt;&lt;/span&gt;\n\t&lt;/td&gt;\n\t&lt;td align=\&quot;right\&quot;&gt;&lt;span macro=\&quot;yourSearch version\&quot;&gt;&lt;/span&gt;, &lt;span macro=\&quot;yourSearc&quot;+&quot;h copyright\&quot;&gt;&lt;/span&gt;\n\t&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&lt;!-- end of the 'tiddlers found' case =========&quot;+&quot;================================== --&gt;\n&lt;/span&gt;\n\n\n&lt;!-- The \&quot;No tiddlers found\&quot; case =================&quot;+&quot;========================== --&gt;\n&lt;span macro=\&quot;yourSearch if not found\&quot;&gt;\n&lt;table class=\&quot;summary\&quot; border=&quot;+&quot;\&quot;0\&quot; width=\&quot;100%\&quot; cellspacing=\&quot;0\&quot; cellpadding=\&quot;0\&quot;&gt;&lt;tbody&gt;\n  &lt;tr&gt;\n\t&lt;td align=\&quot;left\&quot;&gt;\n\t\tYourSearch Resu&quot;+&quot;lt: No tiddlers found for &lt;span class=\&quot;yourSearchQuery\&quot; macro=\&quot;yourSearch query\&quot;&gt;&lt;/span&gt;.\n\t&lt;/td&gt;\n\t&lt;t&quot;+&quot;d class=\&quot;yourSearchButtons\&quot; align=\&quot;right\&quot;&gt;\n\t\t&lt;span macro=\&quot;yourSearch newTiddlerButton\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch linkButton 'YourSearch Options'&quot;+&quot; options 'Configure YourSearch'\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch linkButton 'YourSearch Help' help&quot;+&quot; 'Get help how to use YourSearch'\&quot;&gt;&lt;/span&gt;\n\t\t&lt;span macro=\&quot;yourSearch closeButton\&quot;&gt;&lt;/span&gt;\n\t&lt;/td&gt;\n  &lt;&quot;+&quot;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&lt;/span&gt;\n\n\n&lt;!--\n}}}\n--&gt;\n&quot;;config.shadowTiddlers[&quot;YourSearchItemTemplate&quot;]=&quot;&lt;!--\n{{{\n--&gt;\n&lt;span class='yourSearchNumber' macro='foundTiddler number'&gt;&lt;/span&gt;\n&lt;span class='yourSea&quot;+&quot;rchTitle' macro='foundTiddler title'/&gt;&lt;/span&gt;&amp;nbsp;-&amp;nbsp;\n&lt;span class='yourSearchTags' macro='found&quot;+&quot;Tiddler field tags 50'/&gt;&lt;/span&gt;\n&lt;span macro=\&quot;yourSearch if previewText\&quot;&gt;&lt;div class='yourSearchText' macro='fo&quot;+&quot;undTiddler field text 250'/&gt;&lt;/div&gt;&lt;/span&gt;\n&lt;!--\n}}}\n--&gt;&quot;;config.shadowTiddlers[&quot;YourSearch&quot;]=&quot;&lt;&lt;tiddler [[YourSearch Help]]&gt;&gt;&quot;;config.shadowTiddlers[&quot;YourSearch Result&quot;]=&quot;The popup-like window displaying the result of a YourSearch query.&quot;;config.macros.search.handler=_109;var _195=function(){if(config.macros.search.handler!=_109){alert(&quot;Message from YourSearchPlugin:\n\n\nAnother plugin has disabled the 'Your Search' features.\n\n\nYou may &quot;+&quot;disable the other plugin or change the load order of \nthe plugins (by changing the names of the tidd&quot;+&quot;lers)\nto enable the 'Your Search' features.&quot;);}};setTimeout(_195,5000);abego.YourSearch.getStandardRankFunction=function(){return _bb;};abego.YourSearch.getRankFunction=function(){return abego.YourSearch.getStandardRankFunction();};abego.YourSearch.getCurrentTiddler=function(){return _f4;};abego.YourSearch.closeResult=function(){_e3();};abego.YourSearch.getFoundTiddlers=function(){return _b1;};abego.YourSearch.getQuery=function(){return _b2;};abego.YourSearch.onShowResult=function(_196){highlightHack=_b2?_b2.getMarkRegExp():null;if(!_196){_f5.setItems(_b5());}if(!_dd){_dd=createTiddlyElement(document.body,&quot;div&quot;,_da,&quot;yourSearchResult&quot;);}else{if(_dd.parentNode!=document.body){document.body.appendChild(_dd);}}_fe();highlightHack=null;};})();}
//%/
</pre>
</div>
<div title="YourSearchPlugin-src" modifier="UdoBorkowski" modified="200609161825" created="200601161428">
<pre>For YourSearchPlugin source code see the [[archive|http://tiddlywiki.abego-software.de/archive]].</pre>
</div>
<div title="abego.editIncludedTiddlerCommand (Experimental)" modifier="UdoBorkowski" modified="200709280826" created="200709280824" tags="systemConfig">
<pre>/***
|''Name:''|abego.editIncludedTiddlerCommand|
|''Version:''|experimental|
|''SourceCode:''|http://tiddlywiki.abego-software.de/experimental/abego.editIncludedTiddlerCommand-src.js|
|''Author:''|Udo Borkowski (ub [at] abego-software [dot] de)|
|''Copyright:''|&amp;copy; 2007 [[abego Software|http://www.abego-software.de]]|
|''Licence:''|[[BSD open source license (abego Software)|http://www.abego-software.de/legal/apl-v10.html]]|
|''~CoreVersion:''|2.1.3|
|''Browser:''|Firefox 1.5.0.9 or better; Internet Explorer 6.0|
***/
//{{{
(function(){

		  
//================================================================================
// The &quot;editIncludedTiddler&quot; command
//
// allows editing tiddlers from &quot;included TiddlyWikis&quot;
//
// (see IncludePlugin (http://tiddlywiki.abego-software.de/#IncludePlugin))

var fixUpURL = function(url) {
	// Make sure the URL is a real URL, with protocol prefix etc.
	if (url.search(/^((http(s)?)|(file)):/) != 0) {
		
		// no protocol specified. 
		if (url.search(/^((.\:\\)|(\\\\)|(\/))/) == 0) {
			// &quot;url&quot; is an &quot;absolute&quot; path to a local file. Prefix it with file://
			url = &quot;file://&quot;+url;
			
		} else {
			// &quot;url&quot; is a &quot;relative&quot; URL. Make it absolute
			
			// prefix the url with the directory containing the current document
			// (This also includes the protocol prefix)
			var documentPath = document.location.toString();
			var i = documentPath.lastIndexOf(&quot;/&quot;);
			url = documentPath.substr(0,i+1)+url;
		}
		// replace every \ by a /, to cover Windows style pathes
		url = url.replace(/\\/mg,&quot;/&quot;);
	}
	return url;
};

// @return [may be null/undefined]
var getIncludedTiddlerURL = function(title) {
	var t = store.fetchTiddler(title);
	if (!t) return;
	var url = t[&quot;includeURL&quot;];
	if (!url) return;
	return fixUpURL(url)+&quot;#&quot;+encodeURIComponent(String.encodeTiddlyLink(title));
};

config.commands.editIncludedTiddler = {
	text: &quot;goto&quot;,
	tooltip: &quot;Open tiddler from an included TiddlyWiki in a separate window. e.g. to edit it&quot;
};

var editIncludedTiddlerWindow; 

config.commands.editIncludedTiddler.handler = function(event,src,title) {
	var url = getIncludedTiddlerURL(title);
	if (url) {
		if (editIncludedTiddlerWindow) editIncludedTiddlerWindow.close();
		editIncludedTiddlerWindow = window.open(url,&quot;editIncludedTiddlerWindow&quot;);
	} else {
		displayMessage(&quot;Tiddler is not from an included TiddlyWiki&quot;);
	}
};

var orig_getValue = TiddlyWiki.prototype.getValue;
// see 'Applications of &quot;getValue&quot;' below
TiddlyWiki.prototype.getValue = function(tiddler,fieldName) {
	var result = orig_getValue.apply(this,arguments);
	if (result === undefined) {
		var t = this.resolveTiddler(tiddler);
		if (t)
			result = t[fieldName];
	}
	return result;
};

// Applications of &quot;getValue&quot;
// 
// Display the name of the TW containing the included tiddler in the ViewTemplate:
//
// 		in the &quot;ViewTemplate&quot; (shadow) tiddler add:
//
// 			&lt;div class='subtitle' macro='view includeURL'&gt;&lt;/div&gt;
//	 	(e.g. below the &quot;title&quot; div)
//
// In the YourSearch result also display the name of the TW containing the included tiddler
//
// 		in the &quot;YourSearchItemTemplate&quot; (shadow) tiddler add:
//
// 			&lt;span macro='foundTiddler field includeURL'/&gt;&lt;/span&gt;&amp;nbsp;-&amp;nbsp;
// 
//		(e.g. behind the &quot;title&quot; span)


})();
//}}}
</pre>
</div>
<div title="abegoExtensions News" modifier="YourName" modified="201002161639" created="200512281209" tags="basic" changecount="18">
<pre>!2010-02-16
* YourSearchPlugin v2.1.5 released
** Fixed problems with CSS and search textfield. Thanks to Guido Glatzel for reporting.
!2009-12-29
* Added the ForEachTiddlerPlugin example '[[List all tasks completed on a journal tiddler's day, as a &quot;Daily Status Report&quot;]]'. Based on an idea by cmari and Alan Cohen. Thanks.
!2009-10-09
* Revised the NewTiddlerWithFormMacro documentation
!2009-09-04
* YourSearchPlugin v2.1.4 released
** Fixed &quot;this command is not supported&quot; error under IE 8. Thanks to rouilj for reporting. (For details see: http://groups.google.com/group/TiddlyWiki/browse_thread/thread/cffee3254381e478)
!2008-05-04
* Improved TiddlyWiki style for better appearance in Safari
!2008-04-16
* YourSearchPlugin v2.1.3 released
** Fixed problem with Firefox3. Thanks to Andreas Hoefler for reporting.
!2008-03-17
* YourSearchPlugin v2.1.2 released
** Bugfix: on IE (6.0) the first letter is dropped from the search string. Thanks to Kashgarinn and Nick Padfield for reporting.

^^For older news see the revision history of the various plugins.^^
</pre>
</div>
<div title="getCreateDate Function" modifier="UdoBorkowski" modified="200703120730" created="200512110220" tags="ForEachTiddlerMacro JavaFunction">
<pre>//{{{
//============================================================================
// getCreateDate Function
//============================================================================
//
// Returns the &quot;create date&quot; as generated by the AutoTaggerPlugin
// (http://www.TiddlyTools.com/#AutoTaggerPlugin).
// The create date must be stored in the default format &quot;YYYY.0MM.0DD&quot;.
//
// @return [may be null] the create date (as a String) or null if no create 
// date is found.
//
version.extensions.getCreateDate = {major: 1, minor: 0, revision: 0, 
 date: new Date(2005,11,21), 
 provider: &quot;http://tiddlywiki.abego-software.de&quot;};
//
function getCreateDate(tiddler) {
 if (!tiddler || !tiddler.tags) {
 return null;
 }

 for(var i = 0; i &lt; tiddler.tags.length; i++) {
 var matches = tiddler.tags[i].match(/^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$/);
 if (matches &amp;&amp; matches.length &gt; 0) {
 return matches[0];
 }
 }
 return null;
}

//}}}</pre>
</div>
<div title="inClause" modifier="UdoBorkowski" created="200512081503" tags="Documentation ForEachTiddlerMacro">
<pre>''Syntax'' 
|[''in'' //tiddlyWikiPath//]|

The //tiddlyWikiPath// in the [[ForEachTiddlerMacro]]s inClause is a path to a TiddlyWiki file. The [[ForEachTiddlerMacro]] will use the tiddlers of that TiddlyWiki.
 
When no inClause is specified the tiddlers of the current TiddlyWiki are used.

Example: 
{{{
&lt;&lt;forEachTiddler in 'file:///c:/SampleTiddlyWiki.html' ...
}}}

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="scriptClause" modifier="UdoBorkowski" created="200512081503" tags="Documentation ForEachTiddlerMacro">
<pre>''Syntax'' 
|[''script'' //scriptText//]|

The //scriptText// in the [[ForEachTiddlerMacro]]s scriptClause is a JavaScript text. It typically defines JavaScript &quot;helper&quot; functions that are called by the various JavaScript expressions (whereClause, sortClause, action arguments,...). It main purpose is to make the expressions more simpler and to allow reuse of code.

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="sortClause" modifier="UdoBorkowski" created="200511241156" tags="Documentation ForEachTiddlerMacro">
<pre>''Syntax''
|[''sortBy'' //sortExpression// [''ascending'' or ''descending'']]|

Using the sortClause of the [[ForEachTiddlerMacro]] you can specify the order the tiddlers are processed. 

The sortClause consists of the sortExpression and the sort order directive (''ascending'' or ''descending'').

The sortExpression is a (quoted) JavaScript expression returning the value that should be used for sorting. The value is anything that can be compared using {{{&lt;}}}, {{{&gt;}}} and {{{==}}}. In the sortExpression you refer to the build-in variable {{{tiddler}}} to access the &quot;current&quot; tiddler. 

A typical sortExpression is {{{'tiddler.title'}}} to sort by title or {{{'tiddler.modified'}}} to sort by modification time. But you are not limited to only access the tiddlers properties, you may to more complex stuff like {{{'tiddler.title.length'}}}: this will sort the tiddlers by the length of their titles.

With the sort order directives ''ascending'' and ''descending'' you specify if the smaller one should be processed before the larger ones (''ascending'') or vice versa (''descending''). When no sort order directive is given ''ascending'' is used.

See also [[ForEachTiddlerExamples]].</pre>
</div>
<div title="whereClause" modifier="UdoBorkowski" modified="200709190923" created="200511241157" tags="Documentation ForEachTiddlerMacro">
<pre>''Syntax'' 
|[''where'' //whereCondition//]|

The whereCondition in the [[ForEachTiddlerMacro]]s whereClause is a (quoted) JavaScript boolean expression that specifies what tiddlers should be processed. In the whereCondition you refer to the build-in variable {{{tiddler}}} to access the &quot;current&quot; tiddler, i.e. the one that is currently checked.

Every tiddler of the TiddlyWiki is checked against the whereCondition. Those tiddlers that make the whereCondition return {{{true}}} are selected for further processing.

When the where clause is empty all tiddlers are selected for further processing.

E.g. you may write {{{'tiddler.title.length &lt;= 4'}}} to select all tiddlers that have a title with 4 or less characters. Or {{{'tiddler.tags.contain(&quot;TODO&quot;)'}}} to select all tiddlers that have the tag &quot;TODO&quot;. Of cause you may use any other valid JavaScript expression. 

''{{{context.inTiddler}}} and {{{context.viewerTiddler}}}''

Inside the whereCondition you may also refer to the build-in variables {{{context.inTiddler}}} and {{{context.viewerTiddler}}}. {{{context.inTiddler}}} refers the Tiddler that contains the ForEachTiddlerMacro currently executed, and  {{{context.viewerTiddler}}} the Tiddler currently rendered (&quot;viewed&quot;). 

Most times {{{context.inTiddler}}} and {{{context.viewerTiddler}}} refer the same Tiddler but when a tiddler (&quot;A&quot;) uses the {{{&lt;&lt;tiddler ...&gt;&gt;}}} macro to &quot;call&quot; a tiddler &quot;B&quot; (containing the ForEachTiddlerMacro) the {{{context.inTiddler}}} will be the Tiddler &quot;B&quot; and the {{{context.viewerTiddler}}} the Tiddler &quot;A&quot;.

The {{{context}}} variable may also be used to hold &quot;custom&quot; properties, e.g. to share data across the processing of the individual tiddlers. 

See also [[ForEachTiddlerExamples]].</pre>
</div>
</tiddlers>